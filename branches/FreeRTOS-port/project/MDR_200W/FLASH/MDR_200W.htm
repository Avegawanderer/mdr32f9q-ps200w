<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\FLASH\MDR_200W.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\FLASH\MDR_200W.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Feb 02 19:11:37 2014
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vTaskUARTReceiver &rArr; UART_sendStrAlloc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[40]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[1b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ADC_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1e]">BACKUP_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[e]">CAN1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[f]">CAN2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1c]">COMPARATOR_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[11]">DMA_IRQHandler</a> from uart.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1f]">EXT_INT1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[20]">EXT_INT2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[21]">EXT_INT3_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[22]">EXT_INT4_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[15]">I2C_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[16]">POWER_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[3e]">Reset_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[14]">SSP1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1d]">SSP2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from port.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_mdr32f9qx.o(.text) referenced from startup_mdr32f9x.o(.text)
 <LI><a href="#[18]">Timer1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[19]">Timer2_IRQHandler</a> from systick.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1a]">Timer3_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[13]">UART2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[10]">USB_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[17]">WWDG_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[3f]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f9x.o(.text)
 <LI><a href="#[3c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3b]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[1a2]">guiCheckBox_ProcessEvent</a> from guicheckbox.o(.text) referenced from guicheckbox.o(.text)
 <LI><a href="#[196]">guiCore_UpdateValidator</a> from guicore.o(.text) referenced from guicore.o(.text)
 <LI><a href="#[2f]">guiMainForm_ProcessEvents</a> from guimainform.o(.text) referenced from guimainform.o(.text)
 <LI><a href="#[30]">guiMasterPanel_ProcessEvents</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[181]">guiPanel_ProcessEvent</a> from guipanel.o(.text) referenced from guipanel.o(.text)
 <LI><a href="#[38]">guiSetupList_ProcessEvent</a> from guisetuppanel.o(.text) referenced from guisetuppanel.o(.text)
 <LI><a href="#[37]">guiSetupList_onIndexChanged</a> from guisetuppanel.o(.text) referenced from guisetuppanel.o(.text)
 <LI><a href="#[36]">guiSetupPanel_ProcessEvents</a> from guisetuppanel.o(.text) referenced from guisetuppanel.o(.text)
 <LI><a href="#[17c]">guiSpinBox_ProcessEvent</a> from guispinbox.o(.text) referenced from guispinbox.o(.text)
 <LI><a href="#[189]">guiStringList_ProcessEvent</a> from guistringlist.o(.text) referenced from guistringlist.o(.text)
 <LI><a href="#[1b4]">guiTextLabel_ProcessEvent</a> from guitextlabel.o(.text) referenced from guitextlabel.o(.text)
 <LI><a href="#[3a]">onHighVoltageLimitChanged</a> from guisetuppanel.o(.text) referenced 2 times from guisetuppanel.o(.text)
 <LI><a href="#[39]">onLowVoltageLimitChanged</a> from guisetuppanel.o(.text) referenced from guisetuppanel.o(.text)
 <LI><a href="#[34]">onSpinBoxDrawEvent</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[35]">onSpinBoxValueChanged</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[31]">onTextLabelDrawEvent</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[32]">onTextLabelKeyEncoderEvent</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[2e]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[2d]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[33]">spinBoxEventProcessFunction</a> from guimasterpanel.o(.text) referenced from guimasterpanel.o(.text)
 <LI><a href="#[29]">vTaskADC</a> from adc.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">vTaskConverter</a> from converter.o(.text) referenced from main.o(.text)
 <LI><a href="#[28]">vTaskDispatcher</a> from dispatcher.o(.text) referenced from main.o(.text)
 <LI><a href="#[25]">vTaskGUI</a> from guitop.o(.text) referenced from main.o(.text)
 <LI><a href="#[27]">vTaskService</a> from service.o(.text) referenced from main.o(.text)
 <LI><a href="#[2c]">vTaskSound</a> from sound_driver.o(.text) referenced from main.o(.text)
 <LI><a href="#[2a]">vTaskUARTReceiver</a> from uart.o(.text) referenced from main.o(.text)
 <LI><a href="#[2b]">vTaskUARTTransmitter</a> from uart.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ec]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ed]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ee]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ef]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[44]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1c3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[46]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1f1]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[52]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[4c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[200]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[201]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[202]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[203]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[204]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[205]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[57]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[209]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[20a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[20b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[20c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[53]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1da]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[56]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[58]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>

<P><STRONG><a name="[149]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[210]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[3e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_handler_c
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Timer1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Timer3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, system_mdr32f9qx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_mdr32f9qx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>SSP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>SSP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SSPInit
</UL>

<P><STRONG><a name="[10b]"></a>SSP_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SSPInit
</UL>

<P><STRONG><a name="[10d]"></a>SSP_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SSPInit
</UL>

<P><STRONG><a name="[212]"></a>SSP_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>SSP_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>SSP_GetITStatusMasked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>SSP_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>SSP_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>SSP_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>

<P><STRONG><a name="[217]"></a>SSP_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>SSP_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateBothByCore
</UL>

<P><STRONG><a name="[109]"></a>SSP_BRGInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SSPInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DMAInit
</UL>

<P><STRONG><a name="[100]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PortInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[102]"></a>PORT_Init</STRONG> (Thumb, 384 bytes, Stack size 52 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PortInit
</UL>

<P><STRONG><a name="[101]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PortInit
</UL>

<P><STRONG><a name="[218]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>PORT_ReadInputData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>PORT_SetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PortInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
</UL>

<P><STRONG><a name="[97]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
</UL>

<P><STRONG><a name="[21a]"></a>PORT_WriteBit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>PORT_Write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>TIMER_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[11a]"></a>TIMER_CntStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[121]"></a>TIMER_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[21d]"></a>TIMER_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>TIMER_SetCntPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>TIMER_SetCntAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>TIMER_CntAutoreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>TIMER_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>TIMER_CntEventSourceConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>TIMER_FilterSamplingConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>TIMER_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>TIMER_SetCounterDirection</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>TIMER_ETRInputConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>TIMER_ETRFilterConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>TIMER_ETRPrescalerConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIMER_ETRPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>TIMER_BRKPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>TIMER_GetCounterDirection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIMER_GetCntWriteComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>TIMER_ChnInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ChnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[11c]"></a>TIMER_ChnStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[22d]"></a>TIMER_SetChnCompare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>TIMER_SetChnCompare1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>TIMER_ChnCompareConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>TIMER_ChnCompare1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>TIMER_GetChnCapture</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIMER_GetChnCapture1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>TIMER_ChnETR_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIMER_ChnETRResetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>TIMER_ChnBRKResetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>TIMER_ChnREFFormatConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIMER_ChnCapturePrescalerConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIMER_ChnEventSourceConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIMER_ChnFilterConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIMER_GetChnWriteComplete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>TIMER_ChnCCR1_EventSourceConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>TIMER_ChnCCR1_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>TIMER_ChnOutInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ChnOutInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[11e]"></a>TIMER_ChnOutStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[23d]"></a>TIMER_ChnOutConfig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIMER_ChnOutSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>TIMER_ChnOutModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>TIMER_ChnOutPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIMER_ChnNOutConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIMER_ChnNOutSourceConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIMER_ChnNOutModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIMER_ChnNOutPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIMER_ChnOutDTGConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>TIMER_GetStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIMER_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>TIMER_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[248]"></a>TIMER_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>TIMER_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[249]"></a>TIMER_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>TIMER_BRGInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
</UL>

<P><STRONG><a name="[24a]"></a>I2C_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>I2C_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2CInit
</UL>

<P><STRONG><a name="[24b]"></a>I2C_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>I2C_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2CInit
</UL>

<P><STRONG><a name="[24c]"></a>I2C_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>I2C_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
</UL>

<P><STRONG><a name="[dc]"></a>I2C_SendByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
</UL>

<P><STRONG><a name="[db]"></a>I2C_SendSTOP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
</UL>

<P><STRONG><a name="[dd]"></a>I2C_StartReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[de]"></a>I2C_GetReceivedData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[5e]"></a>I2C_GetLastEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>

<P><STRONG><a name="[5d]"></a>I2C_CheckEvent</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>

<P><STRONG><a name="[5f]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
</UL>

<P><STRONG><a name="[110]"></a>ADC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[112]"></a>ADC_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[111]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[24f]"></a>ADC_SetTrim</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>ADC1_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[115]"></a>ADC2_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[113]"></a>ADCx_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[118]"></a>ADC1_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[119]"></a>ADC2_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[8e]"></a>ADC1_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[e9]"></a>ADC2_SetChannel</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[250]"></a>ADC1_SetChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>ADC2_SetChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>ADC1_OperationModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>ADC2_OperationModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>ADC1_SamplingModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>ADC2_SamplingModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>ADC1_ChannelSwithingConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>ADC2_ChannelSwithingConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>ADC1_LevelsConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>ADC2_LevelsConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>ADC1_SetLowLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>ADC2_SetLowLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>ADC1_SetHighLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>ADC2_SetHighLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>ADC1_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[eb]"></a>ADC2_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[8f]"></a>ADC1_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[ec]"></a>ADC2_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[61]"></a>ADC_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>

<P><STRONG><a name="[25e]"></a>ADC1_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>ADC2_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[260]"></a>ADC1_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>ADC2_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>ADC1_ClearOverwriteFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>ADC2_ClearOverwriteFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>ADC1_ClearOutOfRangeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>ADC2_ClearOutOfRangeFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>ADC_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>ADC1_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[117]"></a>ADC2_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
</UL>

<P><STRONG><a name="[62]"></a>ADC_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[267]"></a>ADC1_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>ADC2_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>UART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[63]"></a>UART_Init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[103]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[106]"></a>UART_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[269]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>UART_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[13b]"></a>UART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[26d]"></a>UART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>UART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>UART_BreakLine</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>UART_IrDAConfig</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, mdr32f9qx_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>

<P><STRONG><a name="[270]"></a>UART_IrDACmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>UART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_uart.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>UART_BRGInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
</UL>

<P><STRONG><a name="[67]"></a>DMA_CtrlDataInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SG_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SG_CtrlInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_DMA_ChannelInit
</UL>

<P><STRONG><a name="[108]"></a>DMA_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DMAInit
</UL>

<P><STRONG><a name="[66]"></a>DMA_CtrlInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CtrlInit &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
</UL>

<P><STRONG><a name="[68]"></a>DMA_SG_CtrlInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>

<P><STRONG><a name="[69]"></a>DMA_SG_Init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, mdr32f9qx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>

<P><STRONG><a name="[6a]"></a>DMA_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdr32f9qx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>

<P><STRONG><a name="[272]"></a>DMA_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>DMA_SG_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>DMA_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[274]"></a>DMA_Request</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>DMA_ClearError</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[275]"></a>DMA_GetCurrTransferCounter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mdr32f9qx_dma.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mdr32f9qx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DMAInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[6f]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[6c]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_USB_PLLstatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSIstatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEstatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
</UL>

<P><STRONG><a name="[6b]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[6e]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[6d]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[70]"></a>RST_CLK_DeInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>

<P><STRONG><a name="[f5]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[72]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_HSEstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[276]"></a>RST_CLK_LSEconfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RST_CLK_LSEstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[277]"></a>RST_CLK_HSIadjust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>RST_CLK_LSIcmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>RST_CLK_LSIadjust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>RST_CLK_LSIstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[f6]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f9]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f7]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[75]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[f8]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[27a]"></a>RST_CLK_USB_PLLconfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>RST_CLK_USB_PLLuse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>RST_CLK_USB_PLLcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RST_CLK_USB_PLLstatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[27d]"></a>RST_CLK_USBclkPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>RST_CLK_USBclkEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RST_CLK_ADCclkSelection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[fb]"></a>RST_CLK_ADCclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[fc]"></a>RST_CLK_ADCclkEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[27f]"></a>RST_CLK_HSIclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>RST_CLK_RTC_HSIclkEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>RST_CLK_HSEclkPrescaler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>RST_CLK_RTC_HSEclkEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 404 bytes, Stack size 36 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[77]"></a>EEPROM_test</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[54]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSetBacklight
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtons
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_UARTInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_TimersInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SSPInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PortInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NVIC_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_I2CInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DMAInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_ADCInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[29]"></a>vTaskADC</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskADC &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>Converter_HW_ADCProcess</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Converter_HW_ADCProcess &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>InitButtons</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetButtonEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>ProcessButtons</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessButtons &rArr; UpdateRawButtonState
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetButtonEvents
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
</UL>

<P><STRONG><a name="[b7]"></a>GetOverloadStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>

<P><STRONG><a name="[124]"></a>GetACLineStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[96]"></a>SetConverterState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>

<P><STRONG><a name="[283]"></a>GetConverterState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, control.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>SetFeedbackChannel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetFeedBackChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[9a]"></a>SetCurrentRange</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentRange
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[9b]"></a>SetOutputLoad</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[a5]"></a>Converter_Init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Converter_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageDAC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentDAC
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_TurnOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_IsReady
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
</UL>

<P><STRONG><a name="[26]"></a>vTaskConverter</STRONG> (Thumb, 1114 bytes, Stack size 24 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vTaskConverter &rArr; SoundEvent_OnGenericError &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageDAC
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentDAC
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_TurnOn
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_TurnOff
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetFeedBackChannel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentRange
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_IsReady
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_ClearOverloadFlag
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnGenericError
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnOverload
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnSettingChanged
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_ValidateLimit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_ValidateCurrentRange
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_ValidateChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentLimit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltageLimit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltage
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>SetVoltageDAC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltagePWMPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a9]"></a>SetCurrentDAC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentPWMPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a7]"></a>Converter_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[b0]"></a>Converter_SetFeedBackChannel</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, converter_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Converter_SetFeedBackChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[b1]"></a>Converter_SetCurrentRange</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, converter_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Converter_SetCurrentRange
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentRange
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[b2]"></a>Converter_TurnOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a6]"></a>Converter_TurnOff</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[b3]"></a>Converter_ClearOverloadFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, converter_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[b6]"></a>Converter_HWProcess</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, converter_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Converter_HWProcess &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOverloadStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[28]"></a>vTaskDispatcher</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, dispatcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vTaskDispatcher &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEncoderDelta
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>DWT_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>DWT_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[12e]"></a>DWT_GetDelta</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>DWT_GetDeltaForNow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[92]"></a>DWT_StartDelayUs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
</UL>

<P><STRONG><a name="[93]"></a>DWT_DelayInProgress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
</UL>

<P><STRONG><a name="[12c]"></a>ProcessEncoder</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>UpdateEncoderDelta</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
</UL>

<P><STRONG><a name="[284]"></a>GUI_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, guitop.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>vTaskGUI</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = vTaskGUI &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageIndicator
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTemperatureIndicator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerIndicator
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentIndicator
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_Initialize
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RedrawAll
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessKeyEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessEncoderEvent
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateBothByCore
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterCurrentRange
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCurrentLimitSetting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCurrentSetting
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVoltageLimitSetting
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVoltageSetting
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeGuiKeyEvent
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encodeGuiKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>applyGuiVoltageSetting</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = applyGuiVoltageSetting &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onSpinBoxValueChanged
</UL>

<P><STRONG><a name="[d6]"></a>applyGuiVoltageLimit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = applyGuiVoltageLimit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onLowVoltageLimitChanged
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onHighVoltageLimitChanged
</UL>

<P><STRONG><a name="[d7]"></a>applyGuiCurrentSetting</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = applyGuiCurrentSetting &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onSpinBoxValueChanged
</UL>

<P><STRONG><a name="[d8]"></a>applyGuiCurrentLimit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guitop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d9]"></a>applyGuiCurrentRange</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = applyGuiCurrentRange &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTextLabelKeyEncoderEvent
</UL>

<P><STRONG><a name="[78]"></a>EEPROMReadBlock</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetReceivedData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StartReceiveData
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_test
</UL>

<P><STRONG><a name="[df]"></a>EEPROMWriteBlock</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>

<P><STRONG><a name="[e0]"></a>EEPROMReady</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>

<P><STRONG><a name="[e1]"></a>LcdWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSingleInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateBothByCore
</UL>

<P><STRONG><a name="[e4]"></a>LcdDelayUs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartDelayUs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayInProgress
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
</UL>

<P><STRONG><a name="[e5]"></a>LcdSelect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdSelect &rArr; LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateBothByCore
</UL>

<P><STRONG><a name="[e6]"></a>LcdSingleInit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdSingleInit &rArr; LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[83]"></a>LcdInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdInit &rArr; LcdSingleInit &rArr; LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSingleInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>LcdUpdateByCore</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd_1202.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>

<P><STRONG><a name="[cb]"></a>LcdUpdateBothByCore</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdUpdateBothByCore &rArr; LcdSelect &rArr; LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[b8]"></a>UpdateLEDs</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateLEDs
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>

<P><STRONG><a name="[27]"></a>vTaskService</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, service.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskService &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_GetResult
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Start
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SetChannel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>vTaskSound</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, sound_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskSound &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_beeper_output
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_beeper_period
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>my_DMA_GlobalInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DMAInit
</UL>

<P><STRONG><a name="[f4]"></a>my_DMA_ChannelInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_DMA_ChannelInit &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlDataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init_TX_DMA
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init_RX_DMA
</UL>

<P><STRONG><a name="[79]"></a>Setup_CPU_Clock</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Setup_CPU_Clock &rArr; RST_CLK_CPU_PLLstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_ADCclkEnable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_ADCclkPrescaler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_ADCclkSelection
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>HW_NVIC_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_NVIC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriority
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>HW_NVIC_check</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, systemfunc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriority
</UL>

<P><STRONG><a name="[7f]"></a>HW_PortInit</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HW_PortInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>HW_UARTInit</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HW_UARTInit &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>HW_DMAInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HW_DMAInit &rArr; SSP_BRGInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_BRGInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_DMA_GlobalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>HW_SSPInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_SSPInit &rArr; SSP_BRGInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_BRGInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_StructInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>HW_I2CInit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_I2CInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>HW_ADCInit</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HW_ADCInit &rArr; ADC2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_ITConfig
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_ITConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Cmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>HW_TimersInit</STRONG> (Thumb, 476 bytes, Stack size 96 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HW_TimersInit &rArr; TIMER_BRGInit
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutStructInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnStructInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>SetVoltagePWMPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltageDAC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[b5]"></a>SetCurrentPWMPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentDAC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[85]"></a>SetCoolerSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[86]"></a>LcdSetBacklight</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[123]"></a>ProcessPowerOff</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProcessPowerOff &rArr; LCD_PrintString &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentRange
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetACLineStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartDelayUs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayInProgress
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSetBacklight
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillWholeBuffer
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateBothByCore
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltagePWMPeriod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentPWMPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>hard_fault_handler_c</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[129]"></a>vApplicationTickHook</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDeltaForNow
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[19]"></a>Timer2_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Timer2_IRQHandler &rArr; ProcessPowerOff &rArr; LCD_PrintString &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEncoder
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_GetDelta
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_Get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>UART_Get_from_RX_buffer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[131]"></a>parseKeyCode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parseKeyCode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[133]"></a>parseKeyType</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parseKeyType
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[2a]"></a>vTaskUARTReceiver</STRONG> (Thumb, 1076 bytes, Stack size 240 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = vTaskUARTReceiver &rArr; UART_sendStrAlloc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseKeyType
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseKeyCode
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_from_RX_buffer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init_RX_DMA
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init_RX_buffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>vTaskUARTTransmitter</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vTaskUARTTransmitter &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CtrlInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init_TX_DMA
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>DMA_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>pxPortInitialiseStack</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[145]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[144]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[171]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[14d]"></a>vPortYield</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[147]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[148]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[161]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[165]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[169]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[167]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[ab]"></a>xQueueGenericReset</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[89]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSound
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskADC
</UL>

<P><STRONG><a name="[8a]"></a>xQueueGenericSend</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnGenericError
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnOverload
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundEvent_OnSettingChanged
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskADC
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiCurrentRange
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiCurrentLimit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiCurrentSetting
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiVoltageLimit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiVoltageSetting
</UL>

<P><STRONG><a name="[8d]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>

<P><STRONG><a name="[8b]"></a>xQueueGenericReceive</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSound
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskADC
</UL>

<P><STRONG><a name="[15a]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[15b]"></a>xQueuePeekFromISR</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[15c]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[15d]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[285]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>vQueueDelete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[286]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>xTaskGenericCreate</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>vTaskDelete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[14a]"></a>xTaskIncrementTick</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[156]"></a>xTaskResumeAll</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[154]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[ea]"></a>vTaskDelayUntil</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[af]"></a>vTaskDelay</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[16a]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[16b]"></a>vTaskPrioritySet</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>

<P><STRONG><a name="[5a]"></a>vTaskSwitchContext</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[aa]"></a>vTaskSuspend</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSuspend &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[16c]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[b9]"></a>vTaskResume</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskResume &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDispatcher
</UL>

<P><STRONG><a name="[16d]"></a>xTaskResumeFromISR</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[88]"></a>vTaskStartScheduler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>vTaskEndScheduler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[e8]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[172]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>

<P><STRONG><a name="[288]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14c]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[153]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[155]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14f]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[136]"></a>pvPortMalloc</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
</UL>

<P><STRONG><a name="[138]"></a>vPortFree</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
</UL>

<P><STRONG><a name="[289]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>guiMainForm_Initialize</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, guimainform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = guiMainForm_Initialize &rArr; guiSetupPanel_Initialize &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_Initialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[17a]"></a>guiMasterPanel_Initialize</STRONG> (Thumb, 784 bytes, Stack size 40 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = guiMasterPanel_Initialize &rArr; guiPanel_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_Initialize
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_Initialize
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_Initialize
</UL>

<P><STRONG><a name="[d1]"></a>setVoltageIndicator</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = setVoltageIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[bc]"></a>setVoltageSetting</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setVoltageSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVoltageSetting
</UL>

<P><STRONG><a name="[d2]"></a>setCurrentIndicator</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = setCurrentIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[c1]"></a>setCurrentSetting</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setCurrentSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCurrentSetting
</UL>

<P><STRONG><a name="[d3]"></a>setPowerIndicator</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = setPowerIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[d4]"></a>setTemperatureIndicator</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = setTemperatureIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[c5]"></a>setFeedbackChannelIndicator</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = setFeedbackChannelIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
</UL>

<P><STRONG><a name="[c3]"></a>setCurrentRangeIndicator</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = setCurrentRangeIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterCurrentRange
</UL>

<P><STRONG><a name="[17b]"></a>guiSetupPanel_Initialize</STRONG> (Thumb, 864 bytes, Stack size 40 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = guiSetupPanel_Initialize &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_Initialize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_Initialize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_Initialize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_Initialize
</UL>

<P><STRONG><a name="[bf]"></a>setLowVoltageLimitSetting</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setLowVoltageLimitSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_SetChecked
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVoltageLimitSetting
</UL>

<P><STRONG><a name="[be]"></a>setHighVoltageLimitSetting</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = setHighVoltageLimitSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_SetChecked
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateVoltageLimitSetting
</UL>

<P><STRONG><a name="[c8]"></a>guiCore_AddMessageToQueue</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusChange
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessKeyEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessEncoderEvent
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AcceptFocus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessTouchEvent
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_TimerProcess
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_PostEventToFocused
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinBoxEventProcessFunction
</UL>

<P><STRONG><a name="[18e]"></a>guiCore_GetMessageFromQueue</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, guicore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
</UL>

<P><STRONG><a name="[c9]"></a>guiCore_ProcessMessageQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = guiCore_ProcessMessageQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_GetMessageFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RedrawAll
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessKeyEvent
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessEncoderEvent
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_UpdateAll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessTimers
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessTouchEvent
</UL>

<P><STRONG><a name="[18f]"></a>guiCore_PostEventToFocused</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>

<P><STRONG><a name="[28b]"></a>guiCore_TimerInit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, guicore.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>guiCore_TimerStart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, guicore.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>guiCore_TimerStop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, guicore.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>guiCore_TimerProcess</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessTimers
</UL>

<P><STRONG><a name="[c7]"></a>guiCore_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = guiCore_Init &rArr; guiCore_ProcessMessageQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[192]"></a>guiCore_CheckWidgetOvelap</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = guiCore_CheckWidgetOvelap
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RedrawAll
</UL>

<P><STRONG><a name="[ca]"></a>guiCore_RedrawAll</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = guiCore_RedrawAll &rArr; guiCore_ProcessMessageQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_SetBaseXY
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_OffsetBaseXY
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CheckWidgetOvelap
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[194]"></a>guiCore_ProcessTouchEvent</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>

<P><STRONG><a name="[ce]"></a>guiCore_ProcessKeyEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = guiCore_ProcessKeyEvent &rArr; guiCore_ProcessMessageQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[cf]"></a>guiCore_ProcessEncoderEvent</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = guiCore_ProcessEncoderEvent &rArr; guiCore_ProcessMessageQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[195]"></a>guiCore_ProcessTimers</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_TimerProcess
</UL>

<P><STRONG><a name="[198]"></a>guiCore_BroadcastEvent</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_UpdateAll
</UL>

<P><STRONG><a name="[196]"></a>guiCore_UpdateValidator</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guicore.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> guicore.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>guiCore_UpdateAll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ProcessMessageQueue
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_BroadcastEvent
</UL>

<P><STRONG><a name="[19b]"></a>guiCore_InvalidateRect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = guiCore_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
</UL>

<P><STRONG><a name="[28e]"></a>guiCore_ConvertToAbsoluteXY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, guicore.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>guiCore_ConvertToRelativeXY</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_DecodeContainerTouchEvent
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_DecodeWidgetTouchEvent
</UL>

<P><STRONG><a name="[19f]"></a>guiCore_GetTouchedWidgetAtXY</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_DecodeContainerTouchEvent
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_DecodeWidgetTouchEvent
</UL>

<P><STRONG><a name="[176]"></a>guiCore_RequestFocusChange</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiCore_RequestFocusChange &rArr; guiCore_AddMessageToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusNextWidget
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[19a]"></a>guiCore_GetWidgetIndex</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = guiCore_GetWidgetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AcceptFocus
</UL>

<P><STRONG><a name="[199]"></a>guiCore_AcceptFocus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiCore_AcceptFocus &rArr; guiCore_AddMessageToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_GetWidgetIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
</UL>

<P><STRONG><a name="[182]"></a>guiCore_RequestFocusNextWidget</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = guiCore_RequestFocusNextWidget &rArr; guiCore_RequestFocusChange &rArr; guiCore_AddMessageToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessKey
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupList_ProcessEvent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[1a6]"></a>guiCore_CheckWidgetTabIndex</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiCore_CheckWidgetTabIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessKey
</UL>

<P><STRONG><a name="[19c]"></a>guiCore_CallEventHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_ProcessEvent
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SetActive
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectItem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectNextItem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActiveDigit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_ProcessEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_SetChecked
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
</UL>

<P><STRONG><a name="[178]"></a>guiCore_SetVisible</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = guiCore_SetVisible &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_InvalidateRect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_ProcessEvent
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_ProcessEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
</UL>

<P><STRONG><a name="[175]"></a>guiCore_SetFocused</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = guiCore_SetFocused &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AcceptFocus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_ProcessEvent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessKey
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_ProcessEvent
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
</UL>

<P><STRONG><a name="[18a]"></a>guiCore_SetVisibleByTag</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, guicore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = guiCore_SetVisibleByTag
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupList_onIndexChanged
</UL>

<P><STRONG><a name="[19d]"></a>guiCore_DecodeWidgetTouchEvent</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_GetTouchedWidgetAtXY
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ConvertToRelativeXY
</UL>

<P><STRONG><a name="[1a0]"></a>guiCore_DecodeContainerTouchEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, guicore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_GetTouchedWidgetAtXY
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_ConvertToRelativeXY
</UL>

<P><STRONG><a name="[18d]"></a>guiCheckbox_SetChecked</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = guiCheckbox_SetChecked &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLowVoltageLimitSetting
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighVoltageLimitSetting
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_ProcessKey
</UL>

<P><STRONG><a name="[1a1]"></a>guiCheckbox_ProcessKey</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = guiCheckbox_ProcessKey &rArr; guiCheckbox_SetChecked &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_SetChecked
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_ProcessEvent
</UL>

<P><STRONG><a name="[1a2]"></a>guiCheckBox_ProcessEvent</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = guiCheckBox_ProcessEvent &rArr; guiGraph_DrawCheckBox &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckbox_ProcessKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guicheckbox.o(.text)
</UL>
<P><STRONG><a name="[18c]"></a>guiCheckBox_Initialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, guicheckbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiCheckBox_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
</UL>

<P><STRONG><a name="[1a5]"></a>guiPanel_ProcessKey</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, guipanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = guiPanel_ProcessKey &rArr; guiCore_SetFocused &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CheckWidgetTabIndex
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusNextWidget
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
</UL>

<P><STRONG><a name="[181]"></a>guiPanel_ProcessEvent</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, guipanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = guiPanel_ProcessEvent &rArr; guiGraph_DrawPanel &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusNextWidget
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guipanel.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>guiPanel_Initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, guipanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiPanel_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_Initialize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_Initialize
</UL>

<P><STRONG><a name="[1a7]"></a>guiSpinBox_SetActiveDigit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessKey
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>

<P><STRONG><a name="[188]"></a>guiSpinBox_SetValue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32toa_align_right
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActiveDigit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageSetting
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLowVoltageLimitSetting
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighVoltageLimitSetting
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentSetting
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_IncrementValue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActive
</UL>

<P><STRONG><a name="[1a9]"></a>guiSpinBox_SetActive</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = guiSpinBox_SetActive &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessKey
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
</UL>

<P><STRONG><a name="[1aa]"></a>guiSpinBox_IncrementValue</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = guiSpinBox_IncrementValue &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessKey
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
</UL>

<P><STRONG><a name="[1ab]"></a>guiSpinBox_ProcessKey</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = guiSpinBox_ProcessKey &rArr; guiSpinBox_SetActive &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_IncrementValue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActiveDigit
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
</UL>

<P><STRONG><a name="[17c]"></a>guiSpinBox_ProcessEvent</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = guiSpinBox_ProcessEvent &rArr; guiGraph_DrawSpinBox &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessKey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_IncrementValue
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetActive
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinBoxEventProcessFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guispinbox.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>guiSpinBox_Initialize</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, guispinbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiSpinBox_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_Initialize
</UL>

<P><STRONG><a name="[1ad]"></a>guiStringList_SelectItem</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = guiStringList_SelectItem &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SetActive
</UL>

<P><STRONG><a name="[1b1]"></a>guiStringList_SetActive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = guiStringList_SetActive &rArr; guiStringList_SelectItem &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectItem
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessKey
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
</UL>

<P><STRONG><a name="[1b2]"></a>guiStringList_ProcessKey</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = guiStringList_ProcessKey &rArr; guiStringList_SetActive &rArr; guiStringList_SelectItem &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SetActive
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectNextItem
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
</UL>

<P><STRONG><a name="[189]"></a>guiStringList_ProcessEvent</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = guiStringList_ProcessEvent &rArr; guiGraph_DrawStringList &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessKey
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SetActive
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupList_ProcessEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guistringlist.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>guiStringList_Initialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiStringList_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_Initialize
</UL>

<P><STRONG><a name="[1b4]"></a>guiTextLabel_ProcessEvent</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, guitextlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = guiTextLabel_ProcessEvent &rArr; guiGraph_DrawTextLabel &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guitextlabel.o(.text)
</UL>
<P><STRONG><a name="[183]"></a>guiTextLabel_Initialize</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, guitextlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = guiTextLabel_Initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_Initialize
</UL>

<P><STRONG><a name="[126]"></a>LCD_SetPixelOutputMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, guigraphhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTextLabelDrawEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onSpinBoxDrawEvent
</UL>

<P><STRONG><a name="[17e]"></a>LCD_SetLineStyle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guigraphhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[125]"></a>LCD_FillWholeBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, guigraphhal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[1b6]"></a>LCD_PutPixel</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, guigraphhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
</UL>

<P><STRONG><a name="[17f]"></a>LCD_DrawHorLine</STRONG> (Thumb, 160 bytes, Stack size 36 bytes, guigraphhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrawHorLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[180]"></a>LCD_DrawVertLine</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, guigraphhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[177]"></a>LCD_DrawImage</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, guigraphhal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_DrawImage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onTextLabelDrawEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onSpinBoxDrawEvent
</UL>

<P><STRONG><a name="[127]"></a>LCD_SetFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, guigraphprimitives.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[1b7]"></a>LCD_DrawRect</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, guigraphprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHorLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
</UL>

<P><STRONG><a name="[1b9]"></a>LCD_GetFontItem</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, guigraphprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStringWidth
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawSpinBox
</UL>

<P><STRONG><a name="[1b8]"></a>LCD_GetStringWidth</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, guigraphprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_GetStringWidth &rArr; LCD_GetFontItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
</UL>

<P><STRONG><a name="[128]"></a>LCD_PrintString</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, guigraphprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_PrintString &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMainForm_ProcessEvents
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[1ba]"></a>LCD_PrintStringAligned</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, guigraphprimitives.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetStringWidth
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawTextLabel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawCheckBox
</UL>

<P><STRONG><a name="[1bb]"></a>LCD_DrawLine</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, guigraphprimitives.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutPixel
</UL>

<P><STRONG><a name="[191]"></a>guiGraph_SetBaseXY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guigraphwidgets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RedrawAll
</UL>

<P><STRONG><a name="[193]"></a>guiGraph_OffsetBaseXY</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, guigraphwidgets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RedrawAll
</UL>

<P><STRONG><a name="[17d]"></a>guiGraph_DrawPanel</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, guigraphwidgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = guiGraph_DrawPanel &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSetupPanel_ProcessEvents
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiMasterPanel_ProcessEvents
</UL>

<P><STRONG><a name="[1b5]"></a>guiGraph_DrawTextLabel</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, guigraphwidgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = guiGraph_DrawTextLabel &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_ProcessEvent
</UL>

<P><STRONG><a name="[1a3]"></a>guiGraph_DrawCheckBox</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, guigraphwidgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = guiGraph_DrawCheckBox &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_ProcessEvent
</UL>

<P><STRONG><a name="[1ac]"></a>guiGraph_DrawSpinBox</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, guigraphwidgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = guiGraph_DrawSpinBox &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GetFontItem
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHorLine
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
</UL>

<P><STRONG><a name="[1af]"></a>guiGraph_GetStringListVisibleItemCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guigraphwidgets.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawStringList
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectNextItem
</UL>

<P><STRONG><a name="[1b3]"></a>guiGraph_DrawStringList</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, guigraphwidgets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = guiGraph_DrawStringList &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintStringAligned
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_GetStringListVisibleItemCount
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
</UL>

<P><STRONG><a name="[1a8]"></a>i32toa_align_right</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32toa_align_right
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_SetValue
</UL>

<P><STRONG><a name="[13f]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageIndicator
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTemperatureIndicator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerIndicator
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFeedbackChannelIndicator
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentRangeIndicator
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentIndicator
</UL>

<P><STRONG><a name="[1be]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1bf]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[47]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[1c1]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[13e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[13d]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[137]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
</UL>

<P><STRONG><a name="[135]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_sendStrAlloc
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[28f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_Initialize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_Initialize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCheckBox_Initialize
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiTextLabel_Initialize
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_Initialize
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[140]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
</UL>

<P><STRONG><a name="[132]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseKeyType
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseKeyCode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[292]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[295]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[297]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1bc]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[3b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[1d4]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[49]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1c5]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[298]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1c9]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[29b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1d6]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[1cc]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[55]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[59]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[29d]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1dc]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1db]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1dd]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1de]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1ce]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cf]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1df]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[1d2]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1c2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[1e0]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[1e4]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[2a0]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskService
</UL>

<P><STRONG><a name="[1e5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1e3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1e2]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[1e6]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageIndicator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerIndicator
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentIndicator
</UL>

<P><STRONG><a name="[1e8]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageIndicator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerIndicator
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentIndicator
</UL>

<P><STRONG><a name="[1ea]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageIndicator
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPowerIndicator
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentIndicator
</UL>

<P><STRONG><a name="[2a2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1e9]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1eb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[45]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[91]"></a>UpdateRawButtonState</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateRawButtonState
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_StartDelayUs
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWT_DelayInProgress
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
</UL>

<P><STRONG><a name="[94]"></a>ResetButtonEvents</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtons
</UL>

<P><STRONG><a name="[9d]"></a>SetRegulationValue</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetRegulationValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrent
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltage
</UL>

<P><STRONG><a name="[9f]"></a>SetRegulationLimit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetRegulationLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentLimit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltageLimit
</UL>

<P><STRONG><a name="[9c]"></a>Converter_SetVoltage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Converter_SetVoltage &rArr; SetRegulationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegulationValue
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltageLimit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[9e]"></a>Converter_SetVoltageLimit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Converter_SetVoltageLimit &rArr; Converter_SetVoltage &rArr; SetRegulationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltage
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegulationLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a0]"></a>Converter_SetCurrent</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Converter_SetCurrent &rArr; SetRegulationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegulationValue
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentLimit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a1]"></a>Converter_SetCurrentLimit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Converter_SetCurrentLimit &rArr; Converter_SetCurrent &rArr; SetRegulationValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrent
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRegulationLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[ac]"></a>Converter_ValidateChannel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[ae]"></a>Converter_ValidateCurrentRange</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[ad]"></a>Converter_ValidateLimit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a2]"></a>SoundEvent_OnSettingChanged</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SoundEvent_OnSettingChanged &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a3]"></a>SoundEvent_OnOverload</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SoundEvent_OnOverload &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[a4]"></a>SoundEvent_OnGenericError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SoundEvent_OnGenericError &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskConverter
</UL>

<P><STRONG><a name="[cc]"></a>encodeGuiKey</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[cd]"></a>encodeGuiKeyEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[bb]"></a>UpdateVoltageSetting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpdateVoltageSetting &rArr; setVoltageSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[bd]"></a>UpdateVoltageLimitSetting</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UpdateVoltageLimitSetting &rArr; setLowVoltageLimitSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLowVoltageLimitSetting
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighVoltageLimitSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[c0]"></a>UpdateCurrentSetting</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UpdateCurrentSetting &rArr; setCurrentSetting &rArr; guiSpinBox_SetValue &rArr; guiSpinBox_SetActiveDigit &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterCurrentRange
</UL>

<P><STRONG><a name="[d0]"></a>UpdateCurrentLimitSetting</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, guitop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[c2]"></a>UpdateConverterCurrentRange</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UpdateConverterCurrentRange &rArr; setCurrentRangeIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentRangeIndicator
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCurrentSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterChannel
</UL>

<P><STRONG><a name="[c4]"></a>UpdateConverterChannel</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, guitop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UpdateConverterChannel &rArr; UpdateConverterCurrentRange &rArr; setCurrentRangeIndicator &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageSetting
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLowVoltageLimitSetting
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setHighVoltageLimitSetting
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFeedbackChannelIndicator
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConverterCurrentRange
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGUI
</UL>

<P><STRONG><a name="[f1]"></a>decode_event</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sound_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSound
</UL>

<P><STRONG><a name="[f2]"></a>set_beeper_period</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sound_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSound
</UL>

<P><STRONG><a name="[f3]"></a>set_beeper_output</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sound_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSound
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_SetPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NVIC_init
</UL>

<P><STRONG><a name="[fd]"></a>NVIC_GetPriority</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NVIC_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_NVIC_check
</UL>

<P><STRONG><a name="[139]"></a>UART_Init_RX_buffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[12f]"></a>UART_init_RX_DMA</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_init_RX_DMA &rArr; my_DMA_ChannelInit &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_DMA_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[130]"></a>UART_init_TX_DMA</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_init_TX_DMA &rArr; my_DMA_ChannelInit &rArr; DMA_CtrlDataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_DMA_ChannelInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTTransmitter
</UL>

<P><STRONG><a name="[134]"></a>UART_sendStrAlloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = UART_sendStrAlloc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskUARTReceiver
</UL>

<P><STRONG><a name="[2d]"></a>prvTaskExitError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[150]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[151]"></a>prvCopyDataToQueue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[158]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[159]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[15f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[160]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[162]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[168]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[16e]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[16f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2e]"></a>prvIdleTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[173]"></a>prvHeapInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[2f]"></a>guiMainForm_ProcessEvents</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, guimainform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = guiMainForm_ProcessEvents &rArr; LCD_PrintString &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisible
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetFocused
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusChange
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimainform.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>onSpinBoxValueChanged</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = onSpinBoxValueChanged &rArr; applyGuiCurrentSetting &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiCurrentSetting
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiVoltageSetting
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>onSpinBoxDrawEvent</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = onSpinBoxDrawEvent &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>spinBoxEventProcessFunction</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = spinBoxEventProcessFunction &rArr; guiSpinBox_ProcessEvent &rArr; guiGraph_DrawSpinBox &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiSpinBox_ProcessEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>onTextLabelKeyEncoderEvent</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = onTextLabelKeyEncoderEvent &rArr; applyGuiCurrentRange &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiCurrentRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[31]"></a>onTextLabelDrawEvent</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = onTextLabelDrawEvent &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>guiMasterPanel_ProcessEvents</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, guimasterpanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = guiMasterPanel_ProcessEvents &rArr; guiPanel_ProcessEvent &rArr; guiGraph_DrawPanel &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusChange
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusNextWidget
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetLineStyle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVertLine
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHorLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimasterpanel.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>onHighVoltageLimitChanged</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = onHighVoltageLimitChanged &rArr; applyGuiVoltageLimit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiVoltageLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guisetuppanel.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>onLowVoltageLimitChanged</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = onLowVoltageLimitChanged &rArr; applyGuiVoltageLimit &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyGuiVoltageLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guisetuppanel.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>guiSetupList_ProcessEvent</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = guiSetupList_ProcessEvent &rArr; guiStringList_ProcessEvent &rArr; guiGraph_DrawStringList &rArr; LCD_PrintStringAligned &rArr; LCD_DrawImage
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessEvent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusNextWidget
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guisetuppanel.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>guiSetupList_onIndexChanged</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = guiSetupList_onIndexChanged &rArr; guiCore_SetVisibleByTag
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_SetVisibleByTag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guisetuppanel.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>guiSetupPanel_ProcessEvents</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, guisetuppanel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = guiSetupPanel_ProcessEvents &rArr; guiPanel_ProcessEvent &rArr; guiGraph_DrawPanel &rArr; LCD_DrawRect &rArr; LCD_DrawVertLine &rArr; LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_RequestFocusChange
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetPixelOutputMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetFont
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PrintString
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_AddMessageToQueue
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiPanel_ProcessEvent
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_DrawPanel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guisetuppanel.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>wrapIndex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, guistringlist.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_SelectNextItem
</UL>

<P><STRONG><a name="[1ae]"></a>guiStringList_SelectNextItem</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, guistringlist.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = guiStringList_SelectNextItem &rArr; guiCore_CallEventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiGraph_GetStringListVisibleItemCount
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrapIndex
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiCore_CallEventHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiStringList_ProcessKey
</UL>

<P><STRONG><a name="[1e7]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[1e1]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1cb]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
