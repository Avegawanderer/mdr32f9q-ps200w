; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\mdr32f9qx_ssp.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\mdr32f9qx_ssp.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\mdr32f9qx_ssp.crf ..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_ssp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SSP_DeInit PROC
;;;56       */
;;;57     void SSP_DeInit(MDR_SSP_TypeDef* SSPx)
000000  2100              MOVS     r1,#0
;;;58     {
;;;59       /* Check the parameters */
;;;60       assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;61     
;;;62       SSPx->CR0   = 0;
000002  6001              STR      r1,[r0,#0]
;;;63       SSPx->CR1   = 0;
000004  6041              STR      r1,[r0,#4]
;;;64       SSPx->CPSR  = 0;
000006  6101              STR      r1,[r0,#0x10]
;;;65       SSPx->IMSC  = 0;
000008  6141              STR      r1,[r0,#0x14]
;;;66       SSPx->DMACR = 0;
00000a  6241              STR      r1,[r0,#0x24]
;;;67     
;;;68       /* Clear SSP ICR[RTIC] and SSP ICR[RORIC] bits */
;;;69       SSPx->ICR = SSP_IT_RT | SSP_IT_ROR;
00000c  2103              MOVS     r1,#3
00000e  6201              STR      r1,[r0,#0x20]
;;;70     
;;;71     }
000010  4770              BX       lr
;;;72     
                          ENDP

                  SSP_Init PROC
;;;82       */
;;;83     void SSP_Init(MDR_SSP_TypeDef* SSPx, const SSP_InitTypeDef* SSP_InitStruct)
000012  b510              PUSH     {r4,lr}
;;;84     {
;;;85       uint32_t tmpreg;
;;;86     
;;;87       /* Check the parameters */
;;;88       assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;89       assert_param(IS_SSP_SPEED_FACTOR(SSP_InitStruct->SSP_SCR));
;;;90       assert_param(IS_SSP_SPEED_DIVIDER(SSP_InitStruct->SSP_CPSDVSR));
;;;91       assert_param(IS_SSP_MODE(SSP_InitStruct->SSP_Mode));
;;;92       assert_param(IS_SSP_WORD_LENGTH(SSP_InitStruct->SSP_WordLength));
;;;93       assert_param(IS_SSP_SPH(SSP_InitStruct->SSP_SPH));
;;;94       assert_param(IS_SSP_SPO(SSP_InitStruct->SSP_SPO));
;;;95       assert_param(IS_SSP_FRF(SSP_InitStruct->SSP_FRF));
;;;96       assert_param(IS_SSP_HARDWARE_FLOW_CONTROL(SSP_InitStruct->SSP_HardwareFlowControl));
;;;97     
;;;98       /* SSPx CPSR Configuration */
;;;99       SSPx->CPSR = SSP_InitStruct->SSP_CPSDVSR;
000014  884a              LDRH     r2,[r1,#2]
000016  6102              STR      r2,[r0,#0x10]
;;;100    
;;;101      /* SSPx CR0 Configuration */
;;;102      tmpreg = (SSP_InitStruct->SSP_SCR << SSP_CR0_SCR_Pos)
000018  890a              LDRH     r2,[r1,#8]
00001a  894b              LDRH     r3,[r1,#0xa]
00001c  880c              LDRH     r4,[r1,#0]
00001e  441a              ADD      r2,r2,r3
000020  898b              LDRH     r3,[r1,#0xc]
000022  eb032304          ADD      r3,r3,r4,LSL #8
000026  441a              ADD      r2,r2,r3
000028  88cb              LDRH     r3,[r1,#6]
00002a  441a              ADD      r2,r2,r3
;;;103             + SSP_InitStruct->SSP_SPH
;;;104             + SSP_InitStruct->SSP_SPO
;;;105             + SSP_InitStruct->SSP_FRF
;;;106             + SSP_InitStruct->SSP_WordLength;
;;;107      SSPx->CR0 = tmpreg;
00002c  6002              STR      r2,[r0,#0]
;;;108    
;;;109      /* SSPx CR1 Configuration */
;;;110      tmpreg = SSP_InitStruct->SSP_HardwareFlowControl + SSP_InitStruct->SSP_Mode;
00002e  89ca              LDRH     r2,[r1,#0xe]
000030  8889              LDRH     r1,[r1,#4]
000032  4411              ADD      r1,r1,r2
;;;111      SSPx->CR1 = tmpreg;
000034  6041              STR      r1,[r0,#4]
;;;112    }
000036  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  SSP_StructInit PROC
;;;119      */
;;;120    void SSP_StructInit(SSP_InitTypeDef* SSP_InitStruct)
000038  2100              MOVS     r1,#0
;;;121    {
;;;122      /* SSP_InitStruct members default value */
;;;123      /* initialize the SPI_Mode member */
;;;124      SSP_InitStruct->SSP_Mode = SSP_ModeMaster;
00003a  8081              STRH     r1,[r0,#4]
;;;125      /* initialize the SSP_WordLength member */
;;;126      SSP_InitStruct->SSP_WordLength = SSP_WordLength8b;
00003c  2207              MOVS     r2,#7
00003e  80c2              STRH     r2,[r0,#6]
;;;127      /* Initialize the SSP_SPO member */
;;;128      SSP_InitStruct->SSP_SPO = SSP_SPO_Low;
000040  8141              STRH     r1,[r0,#0xa]
;;;129      /* Initialize the SSP_SPH member */
;;;130      SSP_InitStruct->SSP_SPH = SSP_SPH_1Edge;
000042  8101              STRH     r1,[r0,#8]
;;;131      /* Initialize the SSP_FRF member */
;;;132      SSP_InitStruct->SSP_FRF = SSP_FRF_SPI_Motorola;
000044  8181              STRH     r1,[r0,#0xc]
;;;133      /* Initialize the SSP max speed */
;;;134      SSP_InitStruct->SSP_CPSDVSR = 2;
000046  2202              MOVS     r2,#2
000048  8042              STRH     r2,[r0,#2]
;;;135      SSP_InitStruct->SSP_SCR = 0;
00004a  8001              STRH     r1,[r0,#0]
;;;136    
;;;137    }
00004c  4770              BX       lr
;;;138    
                          ENDP

                  SSP_Cmd PROC
;;;147      */
;;;148    void SSP_Cmd(MDR_SSP_TypeDef* SSPx, FunctionalState NewState)
00004e  b121              CBZ      r1,|L1.90|
;;;149    {
;;;150      /* Check the parameters */
;;;151      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;152      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;153    
;;;154      if (NewState != DISABLE)
;;;155      {
;;;156        /* Enable the selected SSP by setting the SSE bit in the CR1 register */
;;;157        SSPx->CR1 |= CR1_EN_Set;
000050  6841              LDR      r1,[r0,#4]
000052  f0410102          ORR      r1,r1,#2
000056  6041              STR      r1,[r0,#4]
;;;158      }
;;;159      else
;;;160      {
;;;161        /* Disable the selected SSP by clearing the SSE bit in the CR1 register */
;;;162        SSPx->CR1 &= CR1_EN_Reset;
;;;163      }
;;;164    }
000058  4770              BX       lr
                  |L1.90|
00005a  6841              LDR      r1,[r0,#4]            ;162
00005c  f64f72fd          MOV      r2,#0xfffd            ;162
000060  4011              ANDS     r1,r1,r2              ;162
000062  6041              STR      r1,[r0,#4]            ;162
000064  4770              BX       lr
;;;165    
                          ENDP

                  SSP_ITConfig PROC
;;;180      */
;;;181    void SSP_ITConfig(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT, FunctionalState NewState)
000066  b11a              CBZ      r2,|L1.112|
;;;182    {
;;;183      /* Check the parameters */
;;;184      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;185      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;186      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;187    
;;;188      if (NewState != DISABLE)
;;;189      {
;;;190        SSPx->IMSC |= SSP_IT;
000068  6942              LDR      r2,[r0,#0x14]
00006a  430a              ORRS     r2,r2,r1
00006c  6142              STR      r2,[r0,#0x14]
;;;191      }
;;;192      else
;;;193      {
;;;194        SSPx->IMSC &= ~SSP_IT;
;;;195      }
;;;196    }
00006e  4770              BX       lr
                  |L1.112|
000070  6942              LDR      r2,[r0,#0x14]         ;194
000072  438a              BICS     r2,r2,r1              ;194
000074  6142              STR      r2,[r0,#0x14]         ;194
000076  4770              BX       lr
;;;197    
                          ENDP

                  SSP_GetITStatus PROC
;;;210      */
;;;211    ITStatus SSP_GetITStatus(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
000078  6980              LDR      r0,[r0,#0x18]
;;;212    {
;;;213      ITStatus bitstatus;
;;;214    
;;;215      /* Check the parameters */
;;;216      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;217      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;218    
;;;219      if ((SSPx->RIS & SSP_IT) == SSP_IT)
00007a  4381              BICS     r1,r1,r0
00007c  d001              BEQ      |L1.130|
;;;220      {
;;;221        bitstatus = SET;
;;;222      }
;;;223      else
;;;224      {
;;;225        bitstatus = RESET;
00007e  2000              MOVS     r0,#0
;;;226      }
;;;227    
;;;228      return bitstatus;
;;;229    }
000080  4770              BX       lr
                  |L1.130|
000082  2001              MOVS     r0,#1                 ;221
000084  4770              BX       lr
;;;230    
                          ENDP

                  SSP_GetITStatusMasked PROC
;;;243      */
;;;244    ITStatus SSP_GetITStatusMasked(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
000086  69c0              LDR      r0,[r0,#0x1c]
;;;245    {
;;;246      ITStatus bitstatus;
;;;247    
;;;248      /* Check the parameters */
;;;249      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;250      assert_param(IS_SSP_CONFIG_IT(SSP_IT));
;;;251    
;;;252      if (SSPx->MIS & SSP_IT)
000088  4208              TST      r0,r1
00008a  d001              BEQ      |L1.144|
;;;253      {
;;;254        bitstatus = SET;
00008c  2001              MOVS     r0,#1
;;;255      }
;;;256      else
;;;257      {
;;;258        bitstatus = RESET;
;;;259      }
;;;260    
;;;261      return bitstatus;
;;;262    }
00008e  4770              BX       lr
                  |L1.144|
000090  2000              MOVS     r0,#0                 ;258
000092  4770              BX       lr
;;;263    
                          ENDP

                  SSP_ClearITPendingBit PROC
;;;274      */
;;;275    void SSP_ClearITPendingBit(MDR_SSP_TypeDef* SSPx, uint32_t SSP_IT)
000094  6a02              LDR      r2,[r0,#0x20]
;;;276    {
;;;277      /* Check the parameters */
;;;278      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;279      assert_param(IS_SSP_RESET_IT(SSP_IT));
;;;280    
;;;281      SSPx->ICR |= SSP_IT;
000096  430a              ORRS     r2,r2,r1
000098  6202              STR      r2,[r0,#0x20]
;;;282    }
00009a  4770              BX       lr
;;;283    
                          ENDP

                  SSP_DMACmd PROC
;;;297      */
;;;298    void SSP_DMACmd(MDR_SSP_TypeDef* SSPx, uint32_t SSP_DMAReq, FunctionalState NewState)
00009c  b11a              CBZ      r2,|L1.166|
;;;299    {
;;;300      /* Check the parameters */
;;;301      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;302      assert_param(IS_SSP_DMAREQ(SSP_DMAReq));
;;;303      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;304    
;;;305      if (NewState != DISABLE)
;;;306      {
;;;307        /* Enable the DMA transfer for selected requests in the SSP DMACR register */
;;;308        SSPx->DMACR |= SSP_DMAReq;
00009e  6a42              LDR      r2,[r0,#0x24]
0000a0  430a              ORRS     r2,r2,r1
0000a2  6242              STR      r2,[r0,#0x24]
;;;309      }
;;;310      else
;;;311      {
;;;312        /* Disable the DMA transfer for selected requests in the SSP DMACR register */
;;;313        SSPx->DMACR &= (uint16_t)~SSP_DMAReq;
;;;314      }
;;;315    }
0000a4  4770              BX       lr
                  |L1.166|
0000a6  6a42              LDR      r2,[r0,#0x24]         ;313
0000a8  43c9              MVNS     r1,r1                 ;313
0000aa  b289              UXTH     r1,r1                 ;313
0000ac  400a              ANDS     r2,r2,r1              ;313
0000ae  6242              STR      r2,[r0,#0x24]         ;313
0000b0  4770              BX       lr
;;;316    
                          ENDP

                  SSP_SendData PROC
;;;324      */
;;;325    void SSP_SendData(MDR_SSP_TypeDef* SSPx, uint16_t Data)
0000b2  6081              STR      r1,[r0,#8]
;;;326    {
;;;327      /* Check the parameters */
;;;328      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;329    
;;;330      /* Transmit Data */
;;;331      SSPx->DR = Data;
;;;332    
;;;333    }
0000b4  4770              BX       lr
;;;334    
                          ENDP

                  SSP_ReceiveData PROC
;;;341      */
;;;342    uint16_t SSP_ReceiveData(MDR_SSP_TypeDef* SSPx)
0000b6  6880              LDR      r0,[r0,#8]
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;346    
;;;347      /* Receive Data */
;;;348      return (uint16_t)(SSPx->DR);
0000b8  b280              UXTH     r0,r0
;;;349    }
0000ba  4770              BX       lr
;;;350    
                          ENDP

                  SSP_GetFlagStatus PROC
;;;363      */
;;;364    FlagStatus SSP_GetFlagStatus(MDR_SSP_TypeDef* SSPx, uint32_t SSP_FLAG)
0000bc  68c0              LDR      r0,[r0,#0xc]
;;;365    {
;;;366      FlagStatus bitstatus;
;;;367    
;;;368      /* Check the parameters */
;;;369      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;370      assert_param(IS_SSP_FLAG(SSP_FLAG));
;;;371    
;;;372      if (SSPx->SR & SSP_FLAG)
0000be  4208              TST      r0,r1
0000c0  d001              BEQ      |L1.198|
;;;373      {
;;;374        bitstatus = SET;
0000c2  2001              MOVS     r0,#1
;;;375      }
;;;376      else
;;;377      {
;;;378        bitstatus = RESET;
;;;379      }
;;;380    
;;;381      return bitstatus;
;;;382    }
0000c4  4770              BX       lr
                  |L1.198|
0000c6  2000              MOVS     r0,#0                 ;378
0000c8  4770              BX       lr
;;;383    
                          ENDP

                  SSP_BRGInit PROC
;;;401      */
;;;402    void SSP_BRGInit(MDR_SSP_TypeDef* SSPx, uint32_t SSP_BRG)
0000ca  b510              PUSH     {r4,lr}
;;;403    {
;;;404      uint32_t tmpreg;
;;;405    
;;;406      /* Check the parameters */
;;;407      assert_param(IS_SSP_ALL_PERIPH(SSPx));
;;;408      assert_param(IS_SSP_CLOCK_BRG(SSP_BRG));
;;;409    
;;;410      tmpreg = MDR_RST_CLK->SSP_CLOCK;
0000cc  4b0a              LDR      r3,|L1.248|
0000ce  6ada              LDR      r2,[r3,#0x2c]
;;;411    
;;;412      if (SSPx == MDR_SSP1)
0000d0  4c0a              LDR      r4,|L1.252|
0000d2  42a0              CMP      r0,r4
0000d4  d105              BNE      |L1.226|
;;;413      {
;;;414        tmpreg |= RST_CLK_SSP_CLOCK_SSP1_CLK_EN;
0000d6  f0427080          ORR      r0,r2,#0x1000000
;;;415        tmpreg &= ~RST_CLK_SSP_CLOCK_SSP1_BRG_Msk;
0000da  f02002ff          BIC      r2,r0,#0xff
;;;416        tmpreg |= SSP_BRG;
0000de  430a              ORRS     r2,r2,r1
0000e0  e008              B        |L1.244|
                  |L1.226|
;;;417      }
;;;418      else if (SSPx == MDR_SSP2)
0000e2  4c07              LDR      r4,|L1.256|
0000e4  42a0              CMP      r0,r4
0000e6  d105              BNE      |L1.244|
;;;419      {
;;;420        tmpreg |= RST_CLK_SSP_CLOCK_SSP2_CLK_EN;
0000e8  f0427000          ORR      r0,r2,#0x2000000
;;;421        tmpreg &= ~RST_CLK_SSP_CLOCK_SSP2_BRG_Msk;
0000ec  f420407f          BIC      r0,r0,#0xff00
;;;422        tmpreg |= (SSP_BRG << 8);
0000f0  ea402201          ORR      r2,r0,r1,LSL #8
                  |L1.244|
;;;423      }
;;;424      MDR_RST_CLK->SSP_CLOCK = tmpreg;
0000f4  62da              STR      r2,[r3,#0x2c]
;;;425    }
0000f6  bd10              POP      {r4,pc}
;;;426    
                          ENDP

                  |L1.248|
                          DCD      0x40020000
                  |L1.252|
                          DCD      0x40040000
                  |L1.256|
                          DCD      0x400a0000

;*** Start embedded assembler ***

#line 1 "..\\Library\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_ssp.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_ssp_c_f8d46607____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_ssp_c_f8d46607____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_ssp_c_f8d46607____REVSH|
#line 130
|__asm___15_MDR32F9Qx_ssp_c_f8d46607____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
