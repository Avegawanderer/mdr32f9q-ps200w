; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\guimasterpanel.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guimasterpanel.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guimasterpanel.crf src\gui\guiMasterPanel.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_c
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  onSpinBoxValueChanged PROC
;;;352    
;;;353    static uint8_t onSpinBoxValueChanged(void *sender, guiEvent_t *event)
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355        guiSpinBox_t *spinBox = (guiSpinBox_t *)sender;
;;;356        if (spinBox == &spinBox_voltage)
000002  49fe              LDR      r1,|L1.1020|
000004  4288              CMP      r0,r1
000006  d107              BNE      |L1.24|
;;;357        {
;;;358            applyGuiVoltageSetting(spinBox_voltage.value * 10);
000008  6a88              LDR      r0,[r1,#0x28]  ; spinBox_voltage
00000a  eb000080          ADD      r0,r0,r0,LSL #2
00000e  0440              LSLS     r0,r0,#17
000010  0c00              LSRS     r0,r0,#16
000012  f7fffffe          BL       applyGuiVoltageSetting
000016  e00a              B        |L1.46|
                  |L1.24|
;;;359        }
;;;360        else if (spinBox == &spinBox_current)
000018  49f8              LDR      r1,|L1.1020|
00001a  3148              ADDS     r1,r1,#0x48
00001c  4288              CMP      r0,r1
00001e  d106              BNE      |L1.46|
;;;361        {
;;;362            applyGuiCurrentSetting(spinBox_current.value * 10);
000020  6a88              LDR      r0,[r1,#0x28]  ; spinBox_current
000022  eb000080          ADD      r0,r0,r0,LSL #2
000026  0440              LSLS     r0,r0,#17
000028  0c00              LSRS     r0,r0,#16
00002a  f7fffffe          BL       applyGuiCurrentSetting
                  |L1.46|
;;;363        }
;;;364        return 0;   // doesn't matter
00002e  2000              MOVS     r0,#0
;;;365    }
000030  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  onSpinBoxDrawEvent PROC
;;;318    
;;;319    static uint8_t onSpinBoxDrawEvent(void *sender, guiEvent_t *event)
000032  e92d41fc          PUSH     {r2-r8,lr}
;;;320    {
000036  4604              MOV      r4,r0
;;;321        guiSpinBox_t *spinBox = (guiSpinBox_t *)sender;
;;;322    
;;;323        if ((spinBox->redrawFocus) && (spinBox == &spinBox_voltage))
;;;324        {
;;;325            if (spinBox->isFocused)
;;;326            {
;;;327                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
;;;328                LCD_DrawImage((uint8_t*)&selector_tri, 88, 39, 6, 12, IMAGE_MODE_NORMAL);
000038  f04f0601          MOV      r6,#1
00003c  7a60              LDRB     r0,[r4,#9]            ;323
00003e  f04f050c          MOV      r5,#0xc
000042  07c0              LSLS     r0,r0,#31             ;323
;;;329            }
;;;330            else
;;;331            {
;;;332                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
;;;333                LCD_DrawImage((uint8_t*)&selector_tri, 88, 39, 6, 12, IMAGE_MODE_INVERSE);
000044  f04f0700          MOV      r7,#0
000048  d01c              BEQ      |L1.132|
00004a  48ec              LDR      r0,|L1.1020|
00004c  4284              CMP      r4,r0                 ;323
00004e  d119              BNE      |L1.132|
000050  7a20              LDRB     r0,[r4,#8]            ;325
000052  0700              LSLS     r0,r0,#28             ;325
000054  d50b              BPL      |L1.110|
000056  2002              MOVS     r0,#2                 ;327
000058  f7fffffe          BL       LCD_SetPixelOutputMode
00005c  e9cd5600          STRD     r5,r6,[sp,#0]         ;328
000060  2306              MOVS     r3,#6                 ;328
000062  2227              MOVS     r2,#0x27              ;328
000064  2158              MOVS     r1,#0x58              ;328
000066  48e6              LDR      r0,|L1.1024|
000068  f7fffffe          BL       LCD_DrawImage
00006c  e00a              B        |L1.132|
                  |L1.110|
00006e  2001              MOVS     r0,#1                 ;332
000070  f7fffffe          BL       LCD_SetPixelOutputMode
000074  e9cd5700          STRD     r5,r7,[sp,#0]
000078  2306              MOVS     r3,#6
00007a  2227              MOVS     r2,#0x27
00007c  2158              MOVS     r1,#0x58
00007e  48e0              LDR      r0,|L1.1024|
000080  f7fffffe          BL       LCD_DrawImage
                  |L1.132|
;;;334            }
;;;335        }
;;;336        if ((spinBox->redrawFocus) && (spinBox == &spinBox_current))
000084  7a60              LDRB     r0,[r4,#9]
000086  07c0              LSLS     r0,r0,#31
000088  d01d              BEQ      |L1.198|
00008a  48dc              LDR      r0,|L1.1020|
00008c  3048              ADDS     r0,r0,#0x48
00008e  4284              CMP      r4,r0
000090  d119              BNE      |L1.198|
;;;337        {
;;;338            if (spinBox->isFocused)
000092  7a20              LDRB     r0,[r4,#8]
000094  0700              LSLS     r0,r0,#28
000096  d50b              BPL      |L1.176|
;;;339            {
;;;340                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
000098  2002              MOVS     r0,#2
00009a  f7fffffe          BL       LCD_SetPixelOutputMode
;;;341                LCD_DrawImage((uint8_t*)&selector_tri, 96+88, 39, 6, 12, IMAGE_MODE_NORMAL);
00009e  e9cd5600          STRD     r5,r6,[sp,#0]
0000a2  2306              MOVS     r3,#6
0000a4  2227              MOVS     r2,#0x27
0000a6  21b8              MOVS     r1,#0xb8
0000a8  48d5              LDR      r0,|L1.1024|
0000aa  f7fffffe          BL       LCD_DrawImage
0000ae  e00a              B        |L1.198|
                  |L1.176|
;;;342            }
;;;343            else
;;;344            {
;;;345                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       LCD_SetPixelOutputMode
;;;346                LCD_DrawImage((uint8_t*)&selector_tri, 96+88, 39, 6, 12, IMAGE_MODE_INVERSE);
0000b6  e9cd5700          STRD     r5,r7,[sp,#0]
0000ba  2306              MOVS     r3,#6
0000bc  2227              MOVS     r2,#0x27
0000be  21b8              MOVS     r1,#0xb8
0000c0  48cf              LDR      r0,|L1.1024|
0000c2  f7fffffe          BL       LCD_DrawImage
                  |L1.198|
;;;347            }
;;;348        }
;;;349        return 0;   // doesn't matter
0000c6  2000              MOVS     r0,#0
;;;350    }
0000c8  e8bd81fc          POP      {r2-r8,pc}
;;;351    
                          ENDP

                  spinBoxEventProcessFunction PROC
;;;294    
;;;295    static uint8_t spinBoxEventProcessFunction(guiGenericWidget_t *widget, guiEvent_t event)
0000cc  b537              PUSH     {r0-r2,r4,r5,lr}
;;;296    {
;;;297        guiSpinBox_t *spinBox = (guiSpinBox_t *)widget;
;;;298        uint8_t processResult = GUI_EVENT_ACCEPTED;
0000ce  2401              MOVS     r4,#1
;;;299    
;;;300        switch(event.type)
0000d0  f89d1004          LDRB     r1,[sp,#4]
0000d4  290c              CMP      r1,#0xc
0000d6  d006              BEQ      |L1.230|
;;;301        {
;;;302            case GUI_EVENT_ENCODER:
;;;303                if (spinBox->isActive)
;;;304                {
;;;305                    processResult = guiSpinBox_ProcessEvent(widget, event);
;;;306                }
;;;307                else
;;;308                {
;;;309                    event.type = SPINBOX_EVENT_ACTIVATE;
;;;310                    guiCore_AddMessageToQueue(widget,&event);   // activate
;;;311                }
;;;312                break;
;;;313            default: processResult = guiSpinBox_ProcessEvent(widget, event);
0000d8  e9dd1201          LDRD     r1,r2,[sp,#4]
0000dc  f7fffffe          BL       guiSpinBox_ProcessEvent
0000e0  4604              MOV      r4,r0
                  |L1.226|
;;;314        }
;;;315        return processResult;
0000e2  4620              MOV      r0,r4
;;;316    }
0000e4  bd3e              POP      {r1-r5,pc}
                  |L1.230|
0000e6  f8901024          LDRB     r1,[r0,#0x24]         ;303
0000ea  0709              LSLS     r1,r1,#28             ;303
0000ec  d505              BPL      |L1.250|
0000ee  e9dd1201          LDRD     r1,r2,[sp,#4]         ;305
0000f2  f7fffffe          BL       guiSpinBox_ProcessEvent
0000f6  4604              MOV      r4,r0                 ;305
0000f8  e7f3              B        |L1.226|
                  |L1.250|
0000fa  2140              MOVS     r1,#0x40              ;309
0000fc  f88d1004          STRB     r1,[sp,#4]            ;309
000100  a901              ADD      r1,sp,#4              ;310
000102  f7fffffe          BL       guiCore_AddMessageToQueue
000106  e7ec              B        |L1.226|
;;;317    
                          ENDP

                  onTextLabelKeyEncoderEvent PROC
;;;387    
;;;388    static uint8_t onTextLabelKeyEncoderEvent(void *sender, guiEvent_t *event)
000108  b510              PUSH     {r4,lr}
;;;389    {
;;;390        //guiTextLabel_t *label = (guiTextLabel_t *)sender;
;;;391        uint8_t processResult = GUI_EVENT_ACCEPTED;
00010a  2401              MOVS     r4,#1
;;;392        switch (event->type)
00010c  7808              LDRB     r0,[r1,#0]
00010e  280c              CMP      r0,#0xc
000110  d002              BEQ      |L1.280|
;;;393        {
;;;394            case GUI_EVENT_ENCODER:
;;;395                if ((int16_t)event->lparam < 0)
;;;396                {
;;;397                    applyGuiCurrentLimit(GUI_CURRENT_LIM_LOW);
;;;398                }
;;;399                else if ((int16_t)event->lparam > 0)
;;;400                {
;;;401                    applyGuiCurrentLimit(GUI_CURRENT_LIM_HIGH);
;;;402                }
;;;403                break;
;;;404            default:
;;;405                processResult = GUI_EVENT_DECLINE;
000112  2400              MOVS     r4,#0
                  |L1.276|
;;;406        }
;;;407        return processResult;
000114  4620              MOV      r0,r4
;;;408    }
000116  bd10              POP      {r4,pc}
                  |L1.280|
000118  f9b12002          LDRSH    r2,[r1,#2]            ;395
00011c  2a00              CMP      r2,#0                 ;395
00011e  da04              BGE      |L1.298|
000120  f04f0000          MOV      r0,#0                 ;397
000124  f7fffffe          BL       applyGuiCurrentLimit
000128  e7f4              B        |L1.276|
                  |L1.298|
00012a  ddf3              BLE      |L1.276|
00012c  f04f0001          MOV      r0,#1                 ;401
000130  f7fffffe          BL       applyGuiCurrentLimit
000134  e7ee              B        |L1.276|
;;;409    
                          ENDP

                  onTextLabelDrawEvent PROC
;;;367    
;;;368    static uint8_t onTextLabelDrawEvent(void *sender, guiEvent_t *event)
000136  b51c              PUSH     {r2-r4,lr}
;;;369    {
;;;370        guiTextLabel_t *label = (guiTextLabel_t *)sender;
;;;371        if ((label->redrawFocus) && (label == &textLabel_currLimit))
000138  7a41              LDRB     r1,[r0,#9]
00013a  07c9              LSLS     r1,r1,#31
00013c  d021              BEQ      |L1.386|
00013e  49af              LDR      r1,|L1.1020|
000140  3948              SUBS     r1,r1,#0x48
000142  4288              CMP      r0,r1
000144  d11d              BNE      |L1.386|
;;;372        {
;;;373            if (label->isFocused)
000146  7a00              LDRB     r0,[r0,#8]
;;;374            {
;;;375                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
;;;376                LCD_DrawImage((uint8_t*)&selector_tri, 96 + 32, 56, 6, 12, IMAGE_MODE_NORMAL);
000148  f04f040c          MOV      r4,#0xc
00014c  0700              LSLS     r0,r0,#28             ;373
00014e  d50c              BPL      |L1.362|
000150  2002              MOVS     r0,#2                 ;375
000152  f7fffffe          BL       LCD_SetPixelOutputMode
000156  2001              MOVS     r0,#1
000158  e9cd4000          STRD     r4,r0,[sp,#0]
00015c  2306              MOVS     r3,#6
00015e  2238              MOVS     r2,#0x38
000160  2180              MOVS     r1,#0x80
000162  48a7              LDR      r0,|L1.1024|
000164  f7fffffe          BL       LCD_DrawImage
000168  e00b              B        |L1.386|
                  |L1.362|
;;;377            }
;;;378            else
;;;379            {
;;;380                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
00016a  2001              MOVS     r0,#1
00016c  f7fffffe          BL       LCD_SetPixelOutputMode
;;;381                LCD_DrawImage((uint8_t*)&selector_tri, 96 + 32, 56, 6, 12, IMAGE_MODE_INVERSE);
000170  2000              MOVS     r0,#0
000172  e9cd4000          STRD     r4,r0,[sp,#0]
000176  2306              MOVS     r3,#6
000178  2238              MOVS     r2,#0x38
00017a  2180              MOVS     r1,#0x80
00017c  48a0              LDR      r0,|L1.1024|
00017e  f7fffffe          BL       LCD_DrawImage
                  |L1.386|
;;;382            }
;;;383        }
;;;384        return 0;   // doesn't matter
000182  2000              MOVS     r0,#0
;;;385    }
000184  bd1c              POP      {r2-r4,pc}
;;;386    
                          ENDP

                  guiMasterPanel_ProcessEvents PROC
;;;233    
;;;234    static uint8_t guiMasterPanel_ProcessEvents(struct guiGenericWidget_t *widget, guiEvent_t event)
000186  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;235    {
000188  4606              MOV      r6,r0
;;;236        uint8_t processResult = GUI_EVENT_ACCEPTED;
00018a  2501              MOVS     r5,#1
;;;237        switch (event.type)
00018c  f89d1004          LDRB     r1,[sp,#4]
000190  2901              CMP      r1,#1
000192  d004              BEQ      |L1.414|
000194  2909              CMP      r1,#9
000196  d047              BEQ      |L1.552|
000198  290b              CMP      r1,#0xb
00019a  d17a              BNE      |L1.658|
00019c  e052              B        |L1.580|
                  |L1.414|
;;;238        {
;;;239            case GUI_EVENT_DRAW:
;;;240                guiGraph_DrawPanel(&guiMasterPanel);
00019e  4897              LDR      r0,|L1.1020|
0001a0  30a0              ADDS     r0,r0,#0xa0
0001a2  f7fffffe          BL       guiGraph_DrawPanel
;;;241    
;;;242                if (guiMasterPanel.redrawForced)
0001a6  4c95              LDR      r4,|L1.1020|
0001a8  34a0              ADDS     r4,r4,#0xa0
0001aa  7a20              LDRB     r0,[r4,#8]  ; guiMasterPanel
0001ac  0600              LSLS     r0,r0,#24
0001ae  d532              BPL      |L1.534|
;;;243                {
;;;244                    // Draw static elements
;;;245                    LCD_SetPixelOutputMode(PIXEL_MODE_REWRITE);
0001b0  2000              MOVS     r0,#0
0001b2  f7fffffe          BL       LCD_SetPixelOutputMode
;;;246                    LCD_SetLineStyle(LINE_STYLE_SOLID);
0001b6  2010              MOVS     r0,#0x10
0001b8  f7fffffe          BL       LCD_SetLineStyle
;;;247                    LCD_DrawHorLine(0, 55, 96*2, 1);
0001bc  2301              MOVS     r3,#1
0001be  22c0              MOVS     r2,#0xc0
0001c0  2137              MOVS     r1,#0x37
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       LCD_DrawHorLine
;;;248                    LCD_DrawVertLine(48, 56, 13, 1);
0001c8  2301              MOVS     r3,#1
0001ca  220d              MOVS     r2,#0xd
0001cc  2138              MOVS     r1,#0x38
0001ce  2030              MOVS     r0,#0x30
0001d0  f7fffffe          BL       LCD_DrawVertLine
;;;249                    LCD_DrawVertLine(96+42, 56 , 13, 1);
0001d4  2301              MOVS     r3,#1
0001d6  220d              MOVS     r2,#0xd
0001d8  2138              MOVS     r1,#0x38
0001da  208a              MOVS     r0,#0x8a
0001dc  f7fffffe          BL       LCD_DrawVertLine
;;;250                    LCD_SetFont(&font_h11);
0001e0  4888              LDR      r0,|L1.1028|
0001e2  f7fffffe          BL       LCD_SetFont
;;;251                    LCD_PrintString("SET:", 2, 41, IMAGE_MODE_NORMAL);
0001e6  2301              MOVS     r3,#1
0001e8  2229              MOVS     r2,#0x29
0001ea  2102              MOVS     r1,#2
0001ec  a086              ADR      r0,|L1.1032|
0001ee  f7fffffe          BL       LCD_PrintString
;;;252                    LCD_PrintString("V", 75, 41, IMAGE_MODE_NORMAL);
0001f2  2301              MOVS     r3,#1
0001f4  2229              MOVS     r2,#0x29
0001f6  214b              MOVS     r1,#0x4b
0001f8  a085              ADR      r0,|L1.1040|
0001fa  f7fffffe          BL       LCD_PrintString
;;;253                    LCD_PrintString("SET:", 96+2, 41, IMAGE_MODE_NORMAL);
0001fe  2301              MOVS     r3,#1
000200  2229              MOVS     r2,#0x29
000202  2162              MOVS     r1,#0x62
000204  a080              ADR      r0,|L1.1032|
000206  f7fffffe          BL       LCD_PrintString
;;;254                    LCD_PrintString("A", 96+75, 41, IMAGE_MODE_NORMAL);
00020a  2301              MOVS     r3,#1
00020c  2229              MOVS     r2,#0x29
00020e  21ab              MOVS     r1,#0xab
000210  a080              ADR      r0,|L1.1044|
000212  f7fffffe          BL       LCD_PrintString
                  |L1.534|
;;;255                }
;;;256                // Reset flags - redrawForced will be reset by core
;;;257                guiMasterPanel.redrawFocus = 0;
000216  7a60              LDRB     r0,[r4,#9]  ; guiMasterPanel
000218  f0200001          BIC      r0,r0,#1
00021c  7260              STRB     r0,[r4,#9]
;;;258                guiMasterPanel.redrawRequired = 0;
00021e  7a20              LDRB     r0,[r4,#8]  ; guiMasterPanel
000220  f0200040          BIC      r0,r0,#0x40
000224  7220              STRB     r0,[r4,#8]
;;;259                break;
000226  e03a              B        |L1.670|
                  |L1.552|
;;;260            case GUI_EVENT_FOCUS:
;;;261                processResult = guiPanel_ProcessEvent(widget, event);
000228  e9dd1201          LDRD     r1,r2,[sp,#4]
00022c  4630              MOV      r0,r6
00022e  f7fffffe          BL       guiPanel_ProcessEvent
000232  4605              MOV      r5,r0
;;;262                if (processResult == GUI_EVENT_ACCEPTED)
000234  2d01              CMP      r5,#1
000236  d132              BNE      |L1.670|
;;;263                    guiCore_RequestFocusNextWidget((guiGenericContainer_t *)&guiMasterPanel,1);
000238  4870              LDR      r0,|L1.1020|
00023a  2101              MOVS     r1,#1
00023c  30a0              ADDS     r0,r0,#0xa0
00023e  f7fffffe          BL       guiCore_RequestFocusNextWidget
000242  e02c              B        |L1.670|
                  |L1.580|
;;;264                break;
;;;265            case GUI_EVENT_KEY:
;;;266                if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ESC))
000244  f89d2005          LDRB     r2,[sp,#5]
000248  f8bd1006          LDRH     r1,[sp,#6]
00024c  2a01              CMP      r2,#1
00024e  d101              BNE      |L1.596|
000250  2901              CMP      r1,#1
000252  d024              BEQ      |L1.670|
                  |L1.596|
;;;267                {
;;;268                    // do nothing and accept event
;;;269                    break;
;;;270                }
;;;271                if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ENCODER))
000254  2a01              CMP      r2,#1
000256  d11c              BNE      |L1.658|
000258  2907              CMP      r1,#7
00025a  d11a              BNE      |L1.658|
;;;272                {
;;;273                    if (spinBox_voltage.isFocused)
00025c  4867              LDR      r0,|L1.1020|
;;;274                    {
;;;275                        guiCore_RequestFocusChange((guiGenericWidget_t *)&spinBox_current);
;;;276                        event.type = SPINBOX_EVENT_ACTIVATE;
00025e  f04f0440          MOV      r4,#0x40
000262  7a00              LDRB     r0,[r0,#8]            ;273  ; spinBox_voltage
000264  0700              LSLS     r0,r0,#28             ;273
000266  d50b              BPL      |L1.640|
000268  4864              LDR      r0,|L1.1020|
00026a  3048              ADDS     r0,r0,#0x48           ;275
00026c  f7fffffe          BL       guiCore_RequestFocusChange
000270  f88d4004          STRB     r4,[sp,#4]
;;;277                        guiCore_AddMessageToQueue((guiGenericWidget_t *)&spinBox_current,&event);   // activate
000274  4861              LDR      r0,|L1.1020|
000276  a901              ADD      r1,sp,#4
000278  3048              ADDS     r0,r0,#0x48
00027a  f7fffffe          BL       guiCore_AddMessageToQueue
00027e  e008              B        |L1.658|
                  |L1.640|
;;;278                    }
;;;279                    else
;;;280                    {
;;;281                        guiCore_RequestFocusChange((guiGenericWidget_t *)&spinBox_voltage);
000280  485e              LDR      r0,|L1.1020|
000282  f7fffffe          BL       guiCore_RequestFocusChange
;;;282                        event.type = SPINBOX_EVENT_ACTIVATE;
000286  f88d4004          STRB     r4,[sp,#4]
;;;283                        guiCore_AddMessageToQueue((guiGenericWidget_t *)&spinBox_voltage,&event);   // activate
00028a  a901              ADD      r1,sp,#4
00028c  485b              LDR      r0,|L1.1020|
00028e  f7fffffe          BL       guiCore_AddMessageToQueue
                  |L1.658|
;;;284                    }
;;;285                }
;;;286                // fall down to default
;;;287            default:
;;;288                processResult = guiPanel_ProcessEvent(widget, event);
000292  e9dd1201          LDRD     r1,r2,[sp,#4]
000296  4630              MOV      r0,r6
000298  f7fffffe          BL       guiPanel_ProcessEvent
00029c  4605              MOV      r5,r0
                  |L1.670|
;;;289        }
;;;290    
;;;291        return processResult;
00029e  4628              MOV      r0,r5
;;;292    }
0002a0  bdfe              POP      {r1-r7,pc}
;;;293    
                          ENDP

                  guiMasterPanel_Initialize PROC
;;;72     //-------------------------------------------------------//
;;;73     void guiMasterPanel_Initialize(guiGenericWidget_t *parent)
0002a2  e92d5ff0          PUSH     {r4-r12,lr}
;;;74     {
;;;75         // Initialize form
;;;76         guiPanel_Initialize(&guiMasterPanel, parent);
0002a6  4601              MOV      r1,r0
0002a8  4854              LDR      r0,|L1.1020|
0002aa  30a0              ADDS     r0,r0,#0xa0
0002ac  f7fffffe          BL       guiPanel_Initialize
;;;77         guiMasterPanel.processEvent = guiMasterPanel_ProcessEvents;     // redefine standard panel message processing funtion
0002b0  4952              LDR      r1,|L1.1020|
0002b2  4859              LDR      r0,|L1.1048|
0002b4  31a0              ADDS     r1,r1,#0xa0
0002b6  6148              STR      r0,[r1,#0x14]  ; guiMasterPanel
;;;78         guiMasterPanel.widgets.count = MASTER_PANEL_ELEMENTS_COUNT;
0002b8  2008              MOVS     r0,#8
0002ba  f8810020          STRB     r0,[r1,#0x20]
;;;79         guiMasterPanel.widgets.elements = guiMasterPanelElements;
0002be  f101002c          ADD      r0,r1,#0x2c
0002c2  6248              STR      r0,[r1,#0x24]  ; guiMasterPanel
;;;80         guiMasterPanel.widgets.elements[0] = &textLabel_voltage;
0002c4  312c              ADDS     r1,r1,#0x2c
0002c6  f5a0700b          SUB      r0,r0,#0x22c
0002ca  6008              STR      r0,[r1,#0]
;;;81         guiMasterPanel.widgets.elements[1] = &textLabel_current;
0002cc  3038              ADDS     r0,r0,#0x38
0002ce  6048              STR      r0,[r1,#4]
;;;82         guiMasterPanel.widgets.elements[2] = &textLabel_power;
0002d0  3038              ADDS     r0,r0,#0x38
0002d2  6088              STR      r0,[r1,#8]
;;;83         guiMasterPanel.widgets.elements[3] = &textLabel_temperature;
0002d4  3038              ADDS     r0,r0,#0x38
0002d6  60c8              STR      r0,[r1,#0xc]
;;;84         guiMasterPanel.widgets.elements[4] = &textLabel_channel;
0002d8  3038              ADDS     r0,r0,#0x38
0002da  6108              STR      r0,[r1,#0x10]
;;;85         guiMasterPanel.widgets.elements[5] = &textLabel_currLimit;      // focusable!
0002dc  f1000638          ADD      r6,r0,#0x38
0002e0  4608              MOV      r0,r1
0002e2  6146              STR      r6,[r0,#0x14]
;;;86         guiMasterPanel.widgets.elements[6] = &spinBox_voltage;          // focusable
0002e4  4c45              LDR      r4,|L1.1020|
0002e6  6184              STR      r4,[r0,#0x18]
;;;87         guiMasterPanel.widgets.elements[7] = &spinBox_current;          // focusable
0002e8  f1a00584          SUB      r5,r0,#0x84
0002ec  61c5              STR      r5,[r0,#0x1c]
;;;88         guiMasterPanel.x = 0;
0002ee  2000              MOVS     r0,#0
0002f0  392c              SUBS     r1,r1,#0x2c
0002f2  8188              STRH     r0,[r1,#0xc]
;;;89         guiMasterPanel.y = 0;
0002f4  81c8              STRH     r0,[r1,#0xe]
;;;90         guiMasterPanel.width = 96 * 2;
0002f6  20c0              MOVS     r0,#0xc0
0002f8  8208              STRH     r0,[r1,#0x10]
;;;91         guiMasterPanel.height = 68;
0002fa  2044              MOVS     r0,#0x44
0002fc  8248              STRH     r0,[r1,#0x12]
;;;92         guiMasterPanel.showFocus = 0;
0002fe  4608              MOV      r0,r1
000300  7a40              LDRB     r0,[r0,#9]  ; guiMasterPanel
000302  f0200002          BIC      r0,r0,#2
000306  7248              STRB     r0,[r1,#9]
;;;93         guiMasterPanel.focusFallsThrough = 0;
000308  4608              MOV      r0,r1
00030a  f8900028          LDRB     r0,[r0,#0x28]  ; guiMasterPanel
00030e  f0200001          BIC      r0,r0,#1
000312  f8810028          STRB     r0,[r1,#0x28]
;;;94     
;;;95         // Initialize text label for measured voltage display
;;;96         guiTextLabel_Initialize(&textLabel_voltage, (guiGenericWidget_t *)&guiMasterPanel);
000316  f5a17000          SUB      r0,r1,#0x200
00031a  f7fffffe          BL       guiTextLabel_Initialize
;;;97         textLabel_voltage.x = 1;
00031e  f5a471b0          SUB      r1,r4,#0x160
000322  2001              MOVS     r0,#1
000324  8188              STRH     r0,[r1,#0xc]
;;;98         textLabel_voltage.y = 0;
000326  2000              MOVS     r0,#0
000328  81c8              STRH     r0,[r1,#0xe]
;;;99         textLabel_voltage.width = 94;
00032a  205e              MOVS     r0,#0x5e
00032c  8208              STRH     r0,[r1,#0x10]
;;;100        textLabel_voltage.height = 32;
00032e  2020              MOVS     r0,#0x20
000330  8248              STRH     r0,[r1,#0x12]
;;;101        textLabel_voltage.textAlignment = ALIGN_TOP_RIGHT;
000332  2006              MOVS     r0,#6
000334  f8810028          STRB     r0,[r1,#0x28]
;;;102        textLabel_voltage.text = label_voltage_data;
000338  f101002c          ADD      r0,r1,#0x2c
00033c  6208              STR      r0,[r1,#0x20]  ; textLabel_voltage
;;;103        textLabel_voltage.font = &font_h32;
00033e  4837              LDR      r0,|L1.1052|
000340  6248              STR      r0,[r1,#0x24]  ; textLabel_voltage
;;;104    
;;;105        // Initialize text label for measured current display
;;;106        guiTextLabel_Initialize(&textLabel_current, (guiGenericWidget_t *)&guiMasterPanel);
000342  f5017100          ADD      r1,r1,#0x200
000346  f5a170e4          SUB      r0,r1,#0x1c8
00034a  f7fffffe          BL       guiTextLabel_Initialize
;;;107        textLabel_current.x = 96 + 1;
00034e  f5a47094          SUB      r0,r4,#0x128
000352  f04f0961          MOV      r9,#0x61
000356  f8a0900c          STRH     r9,[r0,#0xc]
;;;108        textLabel_current.y = 0;
00035a  f5a47194          SUB      r1,r4,#0x128
00035e  2000              MOVS     r0,#0
000360  81c8              STRH     r0,[r1,#0xe]
;;;109        textLabel_current.width = 94;
000362  205e              MOVS     r0,#0x5e
000364  8208              STRH     r0,[r1,#0x10]
;;;110        textLabel_current.height = 32;
000366  2020              MOVS     r0,#0x20
000368  8248              STRH     r0,[r1,#0x12]
;;;111        textLabel_current.textAlignment = ALIGN_TOP_RIGHT;
00036a  2006              MOVS     r0,#6
00036c  f8810028          STRB     r0,[r1,#0x28]
;;;112        textLabel_current.text = label_current_data;
000370  f101002c          ADD      r0,r1,#0x2c
000374  6208              STR      r0,[r1,#0x20]  ; textLabel_current
;;;113        textLabel_current.font = &font_h32;
000376  4829              LDR      r0,|L1.1052|
000378  6248              STR      r0,[r1,#0x24]  ; textLabel_current
;;;114    
;;;115        // Initialize text label for measured power display
;;;116        guiTextLabel_Initialize(&textLabel_power, (guiGenericWidget_t *)&guiMasterPanel);
00037a  f50171e4          ADD      r1,r1,#0x1c8
00037e  f5a170c8          SUB      r0,r1,#0x190
000382  f7fffffe          BL       guiTextLabel_Initialize
;;;117        textLabel_power.x = 96 + 45;
000386  f1a401f0          SUB      r1,r4,#0xf0
00038a  208d              MOVS     r0,#0x8d
00038c  8188              STRH     r0,[r1,#0xc]
;;;118        textLabel_power.y = 57;
00038e  2039              MOVS     r0,#0x39
000390  81c8              STRH     r0,[r1,#0xe]
;;;119        textLabel_power.width = 50;
000392  2032              MOVS     r0,#0x32
000394  8208              STRH     r0,[r1,#0x10]
;;;120        textLabel_power.height = 11;
000396  200b              MOVS     r0,#0xb
000398  8248              STRH     r0,[r1,#0x12]
;;;121        textLabel_power.textAlignment = ALIGN_TOP_RIGHT;
00039a  2006              MOVS     r0,#6
00039c  f8810028          STRB     r0,[r1,#0x28]
;;;122        textLabel_power.text = label_power_data;
0003a0  f101002c          ADD      r0,r1,#0x2c
0003a4  6208              STR      r0,[r1,#0x20]  ; textLabel_power
;;;123        textLabel_power.font = &font_h11;
0003a6  4817              LDR      r0,|L1.1028|
0003a8  6248              STR      r0,[r1,#0x24]  ; textLabel_power
;;;124    
;;;125        // Initialize text label for temperature display
;;;126        guiTextLabel_Initialize(&textLabel_temperature, (guiGenericWidget_t *)&guiMasterPanel);
0003aa  f50171c8          ADD      r1,r1,#0x190
0003ae  f5a170ac          SUB      r0,r1,#0x158
0003b2  f7fffffe          BL       guiTextLabel_Initialize
;;;127        textLabel_temperature.x = 55;
0003b6  f1a401b8          SUB      r1,r4,#0xb8
0003ba  2037              MOVS     r0,#0x37
0003bc  8188              STRH     r0,[r1,#0xc]
;;;128        textLabel_temperature.y = 57;
0003be  2039              MOVS     r0,#0x39
0003c0  81c8              STRH     r0,[r1,#0xe]
;;;129        textLabel_temperature.width = 40;
0003c2  2028              MOVS     r0,#0x28
0003c4  8208              STRH     r0,[r1,#0x10]
;;;130        textLabel_temperature.height = 11;
0003c6  200b              MOVS     r0,#0xb
0003c8  8248              STRH     r0,[r1,#0x12]
;;;131        textLabel_temperature.textAlignment = ALIGN_TOP_LEFT;
0003ca  4608              MOV      r0,r1
0003cc  2705              MOVS     r7,#5
0003ce  f8807028          STRB     r7,[r0,#0x28]
;;;132        textLabel_temperature.text = label_temperature_data;
0003d2  302c              ADDS     r0,r0,#0x2c
0003d4  6208              STR      r0,[r1,#0x20]  ; textLabel_temperature
;;;133        textLabel_temperature.font = &font_h11;
0003d6  480b              LDR      r0,|L1.1028|
0003d8  6248              STR      r0,[r1,#0x24]  ; textLabel_temperature
;;;134    
;;;135        // Initialize text label for feedback channel display
;;;136        guiTextLabel_Initialize(&textLabel_channel, (guiGenericWidget_t *)&guiMasterPanel);
0003da  f50171ac          ADD      r1,r1,#0x158
0003de  f5a17090          SUB      r0,r1,#0x120
0003e2  f7fffffe          BL       guiTextLabel_Initialize
;;;137        textLabel_channel.x = 1;
0003e6  f1a40180          SUB      r1,r4,#0x80
0003ea  2001              MOVS     r0,#1
0003ec  8188              STRH     r0,[r1,#0xc]
;;;138        textLabel_channel.y = 57;
0003ee  2039              MOVS     r0,#0x39
0003f0  81c8              STRH     r0,[r1,#0xe]
;;;139        textLabel_channel.width = 45;
0003f2  f04f082d          MOV      r8,#0x2d
0003f6  4608              MOV      r0,r1
0003f8  e012              B        |L1.1056|
0003fa  0000              DCW      0x0000
                  |L1.1020|
                          DCD      ||.bss||+0x160
                  |L1.1024|
                          DCD      selector_tri
                  |L1.1028|
                          DCD      font_h11
                  |L1.1032|
000408  5345543a          DCB      "SET:",0
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
                  |L1.1040|
000410  5600              DCB      "V",0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  4100              DCB      "A",0
000416  00                DCB      0
000417  00                DCB      0
                  |L1.1048|
                          DCD      guiMasterPanel_ProcessEvents
                  |L1.1052|
                          DCD      font_h32
                  |L1.1056|
000420  f8a08010          STRH     r8,[r0,#0x10]
;;;140        textLabel_channel.height = 11;
000424  200b              MOVS     r0,#0xb
000426  8248              STRH     r0,[r1,#0x12]
;;;141        textLabel_channel.textAlignment = ALIGN_TOP_LEFT;
000428  4608              MOV      r0,r1
00042a  f8807028          STRB     r7,[r0,#0x28]
;;;142        textLabel_channel.text = label_channel_data;
00042e  302c              ADDS     r0,r0,#0x2c
000430  6208              STR      r0,[r1,#0x20]  ; textLabel_channel
;;;143        textLabel_channel.font = &font_h11;
000432  48a8              LDR      r0,|L1.1748|
000434  6248              STR      r0,[r1,#0x24]  ; textLabel_channel
;;;144    
;;;145        // Initialize text label for current limit display and control
;;;146        guiTextLabel_Initialize(&textLabel_currLimit, (guiGenericWidget_t *)&guiMasterPanel);
000436  f5017190          ADD      r1,r1,#0x120
00043a  4630              MOV      r0,r6
00043c  f7fffffe          BL       guiTextLabel_Initialize
;;;147        textLabel_currLimit.x = 96+1;
000440  f8a6900c          STRH     r9,[r6,#0xc]
;;;148        textLabel_currLimit.y = 57;
000444  2039              MOVS     r0,#0x39
000446  81f0              STRH     r0,[r6,#0xe]
;;;149        textLabel_currLimit.width = 25;
000448  2019              MOVS     r0,#0x19
00044a  8230              STRH     r0,[r6,#0x10]
;;;150        textLabel_currLimit.height = 11;
00044c  200b              MOVS     r0,#0xb
00044e  8270              STRH     r0,[r6,#0x12]
;;;151        textLabel_currLimit.textAlignment = ALIGN_TOP_LEFT;
000450  f8867028          STRB     r7,[r6,#0x28]
;;;152        textLabel_currLimit.text = label_currLimit_data;
000454  f1a4001c          SUB      r0,r4,#0x1c
000458  6230              STR      r0,[r6,#0x20]  ; textLabel_currLimit
;;;153        textLabel_currLimit.font = &font_h11;
00045a  489e              LDR      r0,|L1.1748|
00045c  6270              STR      r0,[r6,#0x24]  ; textLabel_currLimit
;;;154        textLabel_currLimit.acceptFocusByTab = 1;
00045e  7a30              LDRB     r0,[r6,#8]  ; textLabel_currLimit
000460  f0400001          ORR      r0,r0,#1
000464  7230              STRB     r0,[r6,#8]
;;;155        textLabel_currLimit.tabIndex = 13;
000466  200d              MOVS     r0,#0xd
000468  72f0              STRB     r0,[r6,#0xb]
;;;156        textLabel_currLimit.showFocus = 0;
00046a  7a70              LDRB     r0,[r6,#9]  ; textLabel_currLimit
00046c  f0200002          BIC      r0,r0,#2
000470  7270              STRB     r0,[r6,#9]
;;;157        // Handlers:
;;;158        textLabelHandlers[0].eventType = GUI_EVENT_DRAW;
000472  f1a40010          SUB      r0,r4,#0x10
000476  2101              MOVS     r1,#1
000478  7001              STRB     r1,[r0,#0]
;;;159        textLabelHandlers[0].handler = onTextLabelDrawEvent;
00047a  4997              LDR      r1,|L1.1752|
00047c  6041              STR      r1,[r0,#4]  ; textLabelHandlers
;;;160        textLabelHandlers[1].eventType = GUI_EVENT_ENCODER;
00047e  210c              MOVS     r1,#0xc
000480  7201              STRB     r1,[r0,#8]
;;;161        textLabelHandlers[1].handler = onTextLabelKeyEncoderEvent;
000482  4996              LDR      r1,|L1.1756|
000484  60c1              STR      r1,[r0,#0xc]  ; textLabelHandlers
;;;162        textLabel_currLimit.handlers.count = 2;
000486  2702              MOVS     r7,#2
000488  7637              STRB     r7,[r6,#0x18]
;;;163        textLabel_currLimit.handlers.elements = textLabelHandlers;
00048a  61f0              STR      r0,[r6,#0x1c]  ; textLabel_currLimit
;;;164    
;;;165    
;;;166        guiSpinBox_Initialize(&spinBox_voltage, (guiGenericWidget_t *)&guiMasterPanel);
00048c  f10001b0          ADD      r1,r0,#0xb0
000490  3010              ADDS     r0,r0,#0x10
000492  f7fffffe          BL       guiSpinBox_Initialize
;;;167        spinBox_voltage.processEvent = spinBoxEventProcessFunction;
000496  f1040408          ADD      r4,r4,#8
00049a  f8df9244          LDR      r9,|L1.1760|
00049e  f8c4900c          STR      r9,[r4,#0xc]  ; spinBox_voltage
;;;168        spinBox_voltage.x = 30;
0004a2  f04f001e          MOV      r0,#0x1e
0004a6  80a0              STRH     r0,[r4,#4]
;;;169        spinBox_voltage.y = 33;
0004a8  f04f0a21          MOV      r10,#0x21
0004ac  f8a4a006          STRH     r10,[r4,#6]
;;;170        spinBox_voltage.width = 45;
0004b0  f8a48008          STRH     r8,[r4,#8]
;;;171        spinBox_voltage.height = 21;
0004b4  f04f0b15          MOV      r11,#0x15
0004b8  f8a4b00a          STRH     r11,[r4,#0xa]
;;;172        spinBox_voltage.textRightOffset = 0;
0004bc  f04f0000          MOV      r0,#0
0004c0  f884003d          STRB     r0,[r4,#0x3d]
;;;173        spinBox_voltage.textTopOffset = 1;
0004c4  f04f0001          MOV      r0,#1
0004c8  f884003e          STRB     r0,[r4,#0x3e]
;;;174        spinBox_voltage.tabIndex = 11;
0004cc  f04f000b          MOV      r0,#0xb
0004d0  70e0              STRB     r0,[r4,#3]
;;;175        spinBox_voltage.font = &font_h16;
0004d2  4e84              LDR      r6,|L1.1764|
0004d4  61a6              STR      r6,[r4,#0x18]  ; spinBox_voltage
;;;176        spinBox_voltage.dotPosition = 2;
0004d6  77e7              STRB     r7,[r4,#0x1f]
;;;177        spinBox_voltage.activeDigit = 2;
0004d8  77a7              STRB     r7,[r4,#0x1e]
;;;178        spinBox_voltage.minDigitsToDisplay = 3;
0004da  f04f0003          MOV      r0,#3
0004de  7760              STRB     r0,[r4,#0x1d]
;;;179        spinBox_voltage.restoreValueOnEscape = 1;
0004e0  7f20              LDRB     r0,[r4,#0x1c]  ; spinBox_voltage
0004e2  f0400010          ORR      r0,r0,#0x10
0004e6  7720              STRB     r0,[r4,#0x1c]
;;;180        spinBox_voltage.maxValue = 4100;
0004e8  f2410004          MOV      r0,#0x1004
0004ec  62a0              STR      r0,[r4,#0x28]  ; spinBox_voltage
;;;181        spinBox_voltage.minValue = 0;
0004ee  f04f0000          MOV      r0,#0
0004f2  62e0              STR      r0,[r4,#0x2c]  ; spinBox_voltage
;;;182        spinBox_voltage.showFocus = 0;
0004f4  7860              LDRB     r0,[r4,#1]  ; spinBox_voltage
0004f6  f0200002          BIC      r0,r0,#2
0004fa  7060              STRB     r0,[r4,#1]
;;;183    
;;;184        guiSpinBox_Initialize(&spinBox_current, (guiGenericWidget_t *)&guiMasterPanel);
0004fc  f1050158          ADD      r1,r5,#0x58
000500  4628              MOV      r0,r5
000502  f7fffffe          BL       guiSpinBox_Initialize
;;;185        spinBox_current.processEvent = spinBoxEventProcessFunction;
000506  f1050508          ADD      r5,r5,#8
00050a  f8c5900c          STR      r9,[r5,#0xc]  ; spinBox_current
;;;186        spinBox_current.x = 96+30;
00050e  f04f007e          MOV      r0,#0x7e
000512  80a8              STRH     r0,[r5,#4]
;;;187        spinBox_current.y = 33;
000514  f8a5a006          STRH     r10,[r5,#6]
;;;188        spinBox_current.width = 45;
000518  f8a58008          STRH     r8,[r5,#8]
;;;189        spinBox_current.height = 21;
00051c  f8a5b00a          STRH     r11,[r5,#0xa]
;;;190        spinBox_current.textRightOffset = 0;
000520  f04f0000          MOV      r0,#0
000524  f885003d          STRB     r0,[r5,#0x3d]
;;;191        spinBox_current.textTopOffset = 1;
000528  f04f0001          MOV      r0,#1
00052c  f885003e          STRB     r0,[r5,#0x3e]
;;;192        spinBox_current.tabIndex = 12;
000530  f04f000c          MOV      r0,#0xc
000534  70e8              STRB     r0,[r5,#3]
;;;193        spinBox_current.font = &font_h16;
000536  61ae              STR      r6,[r5,#0x18]  ; spinBox_current
;;;194        spinBox_current.dotPosition = 2;
000538  77ef              STRB     r7,[r5,#0x1f]
;;;195        spinBox_current.activeDigit = 2;
00053a  77af              STRB     r7,[r5,#0x1e]
;;;196        spinBox_current.minDigitsToDisplay = 3;
00053c  f04f0003          MOV      r0,#3
000540  7768              STRB     r0,[r5,#0x1d]
;;;197        spinBox_current.restoreValueOnEscape = 1;
000542  7f28              LDRB     r0,[r5,#0x1c]  ; spinBox_current
000544  f0400010          ORR      r0,r0,#0x10
000548  7728              STRB     r0,[r5,#0x1c]
;;;198        spinBox_current.maxValue = 4100;
00054a  f2410004          MOV      r0,#0x1004
00054e  62a8              STR      r0,[r5,#0x28]  ; spinBox_current
;;;199        spinBox_current.minValue = 0;
000550  f04f0000          MOV      r0,#0
000554  62e8              STR      r0,[r5,#0x2c]  ; spinBox_current
;;;200        spinBox_current.showFocus = 0;
000556  7868              LDRB     r0,[r5,#1]  ; spinBox_current
000558  f0200002          BIC      r0,r0,#2
00055c  7068              STRB     r0,[r5,#1]
;;;201    
;;;202        spinBoxHandlers[0].eventType = GUI_EVENT_DRAW;
00055e  4862              LDR      r0,|L1.1768|
000560  f04f0101          MOV      r1,#1
000564  7001              STRB     r1,[r0,#0]
;;;203        spinBoxHandlers[0].handler = onSpinBoxDrawEvent;
000566  4961              LDR      r1,|L1.1772|
000568  6041              STR      r1,[r0,#4]  ; spinBoxHandlers
;;;204        spinBoxHandlers[1].eventType = SPINBOX_VALUE_CHANGED;
00056a  f04f01c1          MOV      r1,#0xc1
00056e  7201              STRB     r1,[r0,#8]
;;;205        spinBoxHandlers[1].handler = onSpinBoxValueChanged;
000570  495f              LDR      r1,|L1.1776|
000572  60c1              STR      r1,[r0,#0xc]  ; spinBoxHandlers
;;;206        spinBox_voltage.handlers.count = 2;
000574  7427              STRB     r7,[r4,#0x10]
;;;207        spinBox_voltage.handlers.elements = spinBoxHandlers;
000576  6160              STR      r0,[r4,#0x14]  ; spinBox_voltage
;;;208        spinBox_current.handlers.count = 2;
000578  742f              STRB     r7,[r5,#0x10]
;;;209        spinBox_current.handlers.elements = spinBoxHandlers;
00057a  6168              STR      r0,[r5,#0x14]  ; spinBox_current
;;;210    
;;;211    
;;;212    
;;;213    #if 0
;;;214        textLabel_voltage.hasFrame = 1;
;;;215        textLabel_voltage.showFocus = 1;
;;;216        textLabel_current.hasFrame = 1;
;;;217        textLabel_current.showFocus = 1;
;;;218        textLabel_power.hasFrame = 1;
;;;219        textLabel_power.showFocus = 1;
;;;220        textLabel_temperature.hasFrame = 1;
;;;221        textLabel_temperature.showFocus = 1;
;;;222        textLabel_channel.hasFrame = 1;
;;;223        textLabel_channel.showFocus = 1;
;;;224        textLabel_currLimit.hasFrame = 1;
;;;225        textLabel_currLimit.showFocus = 1;
;;;226        spinBox_voltage.hasFrame = 1;
;;;227        spinBox_voltage.showFocus = 1;
;;;228    #endif
;;;229    }
00057c  e8bd9ff0          POP      {r4-r12,pc}
;;;230    
                          ENDP

                  setVoltageIndicator PROC
;;;410    
;;;411    void setVoltageIndicator(uint16_t value)
000580  b570              PUSH     {r4-r6,lr}
;;;412    {
;;;413        sprintf(textLabel_voltage.text, "%2.2fv", (float)value/1000);
000582  f7fffffe          BL       __aeabi_ui2f
000586  495b              LDR      r1,|L1.1780|
000588  f7fffffe          BL       __aeabi_fdiv
00058c  f7fffffe          BL       __aeabi_f2d
000590  4c59              LDR      r4,|L1.1784|
000592  4602              MOV      r2,r0
000594  460b              MOV      r3,r1
000596  6a25              LDR      r5,[r4,#0x20]  ; textLabel_voltage
000598  a158              ADR      r1,|L1.1788|
00059a  4628              MOV      r0,r5
00059c  f7fffffe          BL       __2sprintf
;;;414        textLabel_voltage.redrawText = 1;
0005a0  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_voltage
0005a4  f0400002          ORR      r0,r0,#2
0005a8  f8840029          STRB     r0,[r4,#0x29]
;;;415        textLabel_voltage.redrawRequired = 1;
0005ac  7a20              LDRB     r0,[r4,#8]  ; textLabel_voltage
0005ae  f0400040          ORR      r0,r0,#0x40
0005b2  7220              STRB     r0,[r4,#8]
;;;416    }
0005b4  bd70              POP      {r4-r6,pc}
;;;417    
                          ENDP

                  setVoltageSetting PROC
;;;418    void setVoltageSetting(uint16_t value)
0005b6  210a              MOVS     r1,#0xa
;;;419    {
;;;420        guiSpinBox_SetValue(&spinBox_voltage, value/10, 0);     // do not call handler
0005b8  fbb0f1f1          UDIV     r1,r0,r1
0005bc  484a              LDR      r0,|L1.1768|
0005be  2200              MOVS     r2,#0
0005c0  3890              SUBS     r0,r0,#0x90
0005c2  f7ffbffe          B.W      guiSpinBox_SetValue
;;;421    
;;;422    }
;;;423    
                          ENDP

                  setCurrentIndicator PROC
;;;424    void setCurrentIndicator(uint16_t value)
0005c6  b570              PUSH     {r4-r6,lr}
;;;425    {
;;;426        sprintf(textLabel_current.text, "%2.2fa", (float)value/1000);
0005c8  f7fffffe          BL       __aeabi_ui2f
0005cc  4949              LDR      r1,|L1.1780|
0005ce  f7fffffe          BL       __aeabi_fdiv
0005d2  f7fffffe          BL       __aeabi_f2d
0005d6  4c48              LDR      r4,|L1.1784|
0005d8  4602              MOV      r2,r0
0005da  3438              ADDS     r4,r4,#0x38
0005dc  460b              MOV      r3,r1
0005de  6a25              LDR      r5,[r4,#0x20]  ; textLabel_current
0005e0  a148              ADR      r1,|L1.1796|
0005e2  4628              MOV      r0,r5
0005e4  f7fffffe          BL       __2sprintf
;;;427        textLabel_current.redrawText = 1;
0005e8  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_current
0005ec  f0400002          ORR      r0,r0,#2
0005f0  f8840029          STRB     r0,[r4,#0x29]
;;;428        textLabel_current.redrawRequired = 1;
0005f4  7a20              LDRB     r0,[r4,#8]  ; textLabel_current
0005f6  f0400040          ORR      r0,r0,#0x40
0005fa  7220              STRB     r0,[r4,#8]
;;;429    }
0005fc  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP

                  setCurrentSetting PROC
;;;431    void setCurrentSetting(uint16_t value)
0005fe  210a              MOVS     r1,#0xa
;;;432    {
;;;433        guiSpinBox_SetValue(&spinBox_current, value/10, 0);     // do not call handler
000600  fbb0f1f1          UDIV     r1,r0,r1
000604  4838              LDR      r0,|L1.1768|
000606  2200              MOVS     r2,#0
000608  3848              SUBS     r0,r0,#0x48
00060a  f7ffbffe          B.W      guiSpinBox_SetValue
;;;434    }
;;;435    
                          ENDP

                  setPowerIndicator PROC
;;;436    void setPowerIndicator(uint32_t value)
00060e  b570              PUSH     {r4-r6,lr}
;;;437    {
;;;438        sprintf(textLabel_power.text, "%3.2fW", (float)value/1000 );
000610  f7fffffe          BL       __aeabi_ui2f
000614  4937              LDR      r1,|L1.1780|
000616  f7fffffe          BL       __aeabi_fdiv
00061a  f7fffffe          BL       __aeabi_f2d
00061e  4c36              LDR      r4,|L1.1784|
000620  4602              MOV      r2,r0
000622  3470              ADDS     r4,r4,#0x70
000624  460b              MOV      r3,r1
000626  6a25              LDR      r5,[r4,#0x20]  ; textLabel_power
000628  a138              ADR      r1,|L1.1804|
00062a  4628              MOV      r0,r5
00062c  f7fffffe          BL       __2sprintf
;;;439        textLabel_power.redrawText = 1;
000630  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_power
000634  f0400002          ORR      r0,r0,#2
000638  f8840029          STRB     r0,[r4,#0x29]
;;;440        textLabel_power.redrawRequired = 1;
00063c  7a20              LDRB     r0,[r4,#8]  ; textLabel_power
00063e  f0400040          ORR      r0,r0,#0x40
000642  7220              STRB     r0,[r4,#8]
;;;441    }
000644  bd70              POP      {r4-r6,pc}
;;;442    
                          ENDP

                  setTemperatureIndicator PROC
;;;443    void setTemperatureIndicator(int16_t value)
000646  b510              PUSH     {r4,lr}
;;;444    {
000648  4602              MOV      r2,r0
;;;445        sprintf(textLabel_temperature.text, "%2d%cC", value, 0xb0);
00064a  4c2b              LDR      r4,|L1.1784|
00064c  23b0              MOVS     r3,#0xb0
00064e  34a8              ADDS     r4,r4,#0xa8
000650  a130              ADR      r1,|L1.1812|
000652  6a20              LDR      r0,[r4,#0x20]  ; textLabel_temperature
000654  f7fffffe          BL       __2sprintf
;;;446        textLabel_temperature.redrawText = 1;
000658  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_temperature
00065c  f0400002          ORR      r0,r0,#2
000660  f8840029          STRB     r0,[r4,#0x29]
;;;447        textLabel_temperature.redrawRequired = 1;
000664  7a20              LDRB     r0,[r4,#8]  ; textLabel_temperature
000666  f0400040          ORR      r0,r0,#0x40
00066a  7220              STRB     r0,[r4,#8]
;;;448    }
00066c  bd10              POP      {r4,pc}
;;;449    
                          ENDP

                  setFeedbackChannelIndicator PROC
;;;450    void setFeedbackChannelIndicator(uint8_t channel)
00066e  b510              PUSH     {r4,lr}
;;;451    {
;;;452        if (channel == GUI_CHANNEL_5V)
;;;453            sprintf(textLabel_channel.text, "Ch.5V");
000670  4c21              LDR      r4,|L1.1784|
000672  4601              MOV      r1,r0                 ;452
000674  34e0              ADDS     r4,r4,#0xe0
000676  2901              CMP      r1,#1                 ;452
000678  6a20              LDR      r0,[r4,#0x20]         ;452
00067a  d00d              BEQ      |L1.1688|
;;;454        else
;;;455            sprintf(textLabel_channel.text, "Ch.12V");
00067c  a127              ADR      r1,|L1.1820|
00067e  f7fffffe          BL       __2sprintf
                  |L1.1666|
;;;456        textLabel_channel.redrawText = 1;
000682  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_channel
000686  f0400002          ORR      r0,r0,#2
00068a  f8840029          STRB     r0,[r4,#0x29]
;;;457        textLabel_channel.redrawRequired = 1;
00068e  7a20              LDRB     r0,[r4,#8]  ; textLabel_channel
000690  f0400040          ORR      r0,r0,#0x40
000694  7220              STRB     r0,[r4,#8]
;;;458    }
000696  bd10              POP      {r4,pc}
                  |L1.1688|
000698  a122              ADR      r1,|L1.1828|
00069a  f7fffffe          BL       __2sprintf
00069e  e7f0              B        |L1.1666|
;;;459    
                          ENDP

                  setCurrentLimitIndicator PROC
;;;460    void setCurrentLimitIndicator(uint8_t current_limit)
0006a0  b510              PUSH     {r4,lr}
;;;461    {
;;;462        if (current_limit == GUI_CURRENT_LIM_LOW)
;;;463            sprintf(textLabel_currLimit.text, "20A");
0006a2  4c11              LDR      r4,|L1.1768|
0006a4  0001              MOVS     r1,r0                 ;462
0006a6  f1a404d8          SUB      r4,r4,#0xd8
0006aa  6a20              LDR      r0,[r4,#0x20]         ;462
0006ac  d00d              BEQ      |L1.1738|
;;;464        else
;;;465            sprintf(textLabel_currLimit.text, "40A");
0006ae  a11f              ADR      r1,|L1.1836|
0006b0  f7fffffe          BL       __2sprintf
                  |L1.1716|
;;;466        textLabel_currLimit.redrawText = 1;
0006b4  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_currLimit
0006b8  f0400002          ORR      r0,r0,#2
0006bc  f8840029          STRB     r0,[r4,#0x29]
;;;467        textLabel_currLimit.redrawRequired = 1;
0006c0  7a20              LDRB     r0,[r4,#8]  ; textLabel_currLimit
0006c2  f0400040          ORR      r0,r0,#0x40
0006c6  7220              STRB     r0,[r4,#8]
;;;468    }
0006c8  bd10              POP      {r4,pc}
                  |L1.1738|
0006ca  a119              ADR      r1,|L1.1840|
0006cc  f7fffffe          BL       __2sprintf
0006d0  e7f0              B        |L1.1716|
;;;469    
                          ENDP

0006d2  0000              DCW      0x0000
                  |L1.1748|
                          DCD      font_h11
                  |L1.1752|
                          DCD      onTextLabelDrawEvent
                  |L1.1756|
                          DCD      onTextLabelKeyEncoderEvent
                  |L1.1760|
                          DCD      spinBoxEventProcessFunction
                  |L1.1764|
                          DCD      font_h16
                  |L1.1768|
                          DCD      ||.bss||+0x1f0
                  |L1.1772|
                          DCD      onSpinBoxDrawEvent
                  |L1.1776|
                          DCD      onSpinBoxValueChanged
                  |L1.1780|
                          DCD      0x447a0000
                  |L1.1784|
                          DCD      ||.bss||
                  |L1.1788|
0006fc  25322e32          DCB      "%2.2fv",0
000700  667600  
000703  00                DCB      0
                  |L1.1796|
000704  25322e32          DCB      "%2.2fa",0
000708  666100  
00070b  00                DCB      0
                  |L1.1804|
00070c  25332e32          DCB      "%3.2fW",0
000710  665700  
000713  00                DCB      0
                  |L1.1812|
000714  25326425          DCB      "%2d%cC",0
000718  634300  
00071b  00                DCB      0
                  |L1.1820|
00071c  43682e31          DCB      "Ch.12V",0
000720  325600  
000723  00                DCB      0
                  |L1.1828|
000724  43682e35          DCB      "Ch.5V",0
000728  5600    
00072a  00                DCB      0
00072b  00                DCB      0
                  |L1.1836|
00072c  34304100          DCB      "40A",0
                  |L1.1840|
000730  32304100          DCB      "20A",0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  textLabel_voltage
                          %        44
                  label_voltage_data
                          %        12
                  textLabel_current
                          %        44
                  label_current_data
                          %        12
                  textLabel_power
                          %        44
                  label_power_data
                          %        12
                  textLabel_temperature
                          %        44
                  label_temperature_data
                          %        12
                  textLabel_channel
                          %        44
                  label_channel_data
                          %        12
                  textLabel_currLimit
                          %        44
                  label_currLimit_data
                          %        12
                  textLabelHandlers
                          %        16
                  spinBox_voltage
                          %        72
                  spinBox_current
                          %        72
                  spinBoxHandlers
                          %        16
                  guiMasterPanel
                          %        44
                  guiMasterPanelElements
                          %        32
