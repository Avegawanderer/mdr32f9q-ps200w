; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\mdr32f9qx_port.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\mdr32f9qx_port.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\mdr32f9qx_port.crf ..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_port.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PORT_DeInit PROC
;;;45       */
;;;46     void PORT_DeInit(MDR_PORT_TypeDef* PORTx)
000000  2100              MOVS     r1,#0
;;;47     {
;;;48       /* Check the parameters */
;;;49       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;50     
;;;51       PORTx->ANALOG = 0;
000002  60c1              STR      r1,[r0,#0xc]
;;;52       PORTx->PULL = 0;
000004  6101              STR      r1,[r0,#0x10]
;;;53       PORTx->OE = 0;
000006  6041              STR      r1,[r0,#4]
;;;54       PORTx->RXTX = 0;
000008  6001              STR      r1,[r0,#0]
;;;55       PORTx->FUNC = 0;
00000a  6081              STR      r1,[r0,#8]
;;;56       PORTx->PD = 0;
00000c  6141              STR      r1,[r0,#0x14]
;;;57       PORTx->PWR = 0;
00000e  6181              STR      r1,[r0,#0x18]
;;;58       PORTx->GFEN = 0;
000010  61c1              STR      r1,[r0,#0x1c]
;;;59     }
000012  4770              BX       lr
;;;60     
                          ENDP

                  PORT_Init PROC
;;;69       */
;;;70     void PORT_Init(MDR_PORT_TypeDef* PORTx, const PORT_InitTypeDef* PORT_InitStruct)
000014  e92d4ffe          PUSH     {r1-r11,lr}
;;;71     {
;;;72       uint32_t tmpreg_OE;
;;;73       uint32_t tmpreg_FUNC;
;;;74       uint32_t tmpreg_ANALOG;
;;;75       uint32_t tmpreg_PULL;
;;;76       uint32_t tmpreg_PD;
;;;77       uint32_t tmpreg_PWR;
;;;78       uint32_t tmpreg_GFEN;
;;;79       uint32_t portpin, pos, mask_s, mask_l, mask_d;
;;;80     
;;;81       /* Check the parameters */
;;;82       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;83       assert_param(IS_PORT_PIN(PORT_InitStruct->PORT_Pin));
;;;84       assert_param(IS_PORT_OE(PORT_InitStruct->PORT_OE));
;;;85       assert_param(IS_PORT_PULL_UP(PORT_InitStruct->PORT_PULL_UP));
;;;86       assert_param(IS_PORT_PULL_DOWN(PORT_InitStruct->PORT_PULL_DOWN));
;;;87       assert_param(IS_PORT_PD_SHM(PORT_InitStruct->PORT_PD_SHM));
;;;88       assert_param(IS_PORT_PD(PORT_InitStruct->PORT_PD));
;;;89       assert_param(IS_PORT_GFEN(PORT_InitStruct->PORT_GFEN));
;;;90       assert_param(IS_PORT_FUNC(PORT_InitStruct->PORT_FUNC));
;;;91       assert_param(IS_PORT_SPEED(PORT_InitStruct->PORT_SPEED));
;;;92       assert_param(IS_PORT_MODE(PORT_InitStruct->PORT_MODE));
;;;93     
;;;94       /* Get current PORT register values */
;;;95       tmpreg_OE     = PORTx->OE;
000018  6847              LDR      r7,[r0,#4]
;;;96       tmpreg_FUNC   = PORTx->FUNC;
00001a  f8d0c008          LDR      r12,[r0,#8]
;;;97       tmpreg_ANALOG = PORTx->ANALOG;
00001e  f8d0800c          LDR      r8,[r0,#0xc]
;;;98       tmpreg_PULL   = PORTx->PULL;
000022  f8d09010          LDR      r9,[r0,#0x10]
;;;99       tmpreg_PD     = PORTx->PD;
000026  f8d0a014          LDR      r10,[r0,#0x14]
00002a  f8cda008          STR      r10,[sp,#8]
;;;100      tmpreg_PWR    = PORTx->PWR;
00002e  f8d0a018          LDR      r10,[r0,#0x18]
000032  f8cda004          STR      r10,[sp,#4]
;;;101      tmpreg_GFEN   = PORTx->GFEN;
000036  f8d0a01c          LDR      r10,[r0,#0x1c]
00003a  f8cda000          STR      r10,[sp,#0]
;;;102    
;;;103      /* Form new values */
;;;104      pos = 0;
00003e  2200              MOVS     r2,#0
;;;105      mask_s = 0x0001;
000040  2301              MOVS     r3,#1
;;;106      mask_l = 0x00000003;
000042  2503              MOVS     r5,#3
;;;107      mask_d = 0x00010001;
000044  f04f1601          MOV      r6,#0x10001
;;;108      for (portpin = PORT_InitStruct->PORT_Pin; portpin; portpin >>= 1)
000048  880c              LDRH     r4,[r1,#0]
00004a  e05d              B        |L1.264|
                  |L1.76|
;;;109      {
;;;110        if (portpin & 0x1)
00004c  f0140f01          TST      r4,#1
000050  d055              BEQ      |L1.254|
;;;111        {
;;;112          tmpreg_OE     = (tmpreg_OE     & ~mask_s) | (PORT_InitStruct->PORT_OE        <<  pos);
000052  ea270a03          BIC      r10,r7,r3
000056  f891b002          LDRB     r11,[r1,#2]
00005a  fa0bfb02          LSL      r11,r11,r2
00005e  ea4a070b          ORR      r7,r10,r11
;;;113          tmpreg_FUNC   = (tmpreg_FUNC   & ~mask_l) | (PORT_InitStruct->PORT_FUNC      << (pos*2));
000062  f891a008          LDRB     r10,[r1,#8]
000066  ea4f0b42          LSL      r11,r2,#1
00006a  fa0afa0b          LSL      r10,r10,r11
00006e  ea2c0b05          BIC      r11,r12,r5
000072  ea4a0c0b          ORR      r12,r10,r11
;;;114          tmpreg_ANALOG = (tmpreg_ANALOG & ~mask_s) | (PORT_InitStruct->PORT_MODE      <<  pos);
000076  ea280a03          BIC      r10,r8,r3
00007a  f891b00a          LDRB     r11,[r1,#0xa]
00007e  fa0bfb02          LSL      r11,r11,r2
000082  ea4a080b          ORR      r8,r10,r11
;;;115          tmpreg_PULL   = (tmpreg_PULL   & ~mask_d) | (PORT_InitStruct->PORT_PULL_UP   << (pos + 16))
000086  ea290a06          BIC      r10,r9,r6
00008a  f891b003          LDRB     r11,[r1,#3]
00008e  f1020e10          ADD      lr,r2,#0x10
000092  fa0bfb0e          LSL      r11,r11,lr
000096  ea4a0a0b          ORR      r10,r10,r11
00009a  f891b004          LDRB     r11,[r1,#4]
00009e  fa0bfb02          LSL      r11,r11,r2
0000a2  ea4a090b          ORR      r9,r10,r11
;;;116                                                    | (PORT_InitStruct->PORT_PULL_DOWN <<  pos);
;;;117          tmpreg_PD     = (tmpreg_PD     & ~mask_d) | (PORT_InitStruct->PORT_PD_SHM    << (pos + 16))
0000a6  f8dda008          LDR      r10,[sp,#8]
0000aa  ea2a0a06          BIC      r10,r10,r6
0000ae  f891b005          LDRB     r11,[r1,#5]
0000b2  fa0bfb0e          LSL      r11,r11,lr
0000b6  ea4a0a0b          ORR      r10,r10,r11
0000ba  f891b006          LDRB     r11,[r1,#6]
0000be  fa0bfb02          LSL      r11,r11,r2
0000c2  ea4a0a0b          ORR      r10,r10,r11
0000c6  f8cda008          STR      r10,[sp,#8]
;;;118                                                    | (PORT_InitStruct->PORT_PD        <<  pos);
;;;119          tmpreg_PWR    = (tmpreg_PWR    & ~mask_l) | (PORT_InitStruct->PORT_SPEED     << (pos*2));
0000ca  f891a009          LDRB     r10,[r1,#9]
0000ce  ea4f0b42          LSL      r11,r2,#1
0000d2  fa0afa0b          LSL      r10,r10,r11
0000d6  f8ddb004          LDR      r11,[sp,#4]
0000da  ea2b0b05          BIC      r11,r11,r5
0000de  ea4a0a0b          ORR      r10,r10,r11
0000e2  f8cda004          STR      r10,[sp,#4]
;;;120          tmpreg_GFEN   = (tmpreg_GFEN   & ~mask_s) | (PORT_InitStruct->PORT_GFEN      <<  pos);
0000e6  f8dda000          LDR      r10,[sp,#0]
0000ea  ea2a0a03          BIC      r10,r10,r3
0000ee  f891b007          LDRB     r11,[r1,#7]
0000f2  fa0bfb02          LSL      r11,r11,r2
0000f6  ea4a0a0b          ORR      r10,r10,r11
0000fa  f8cda000          STR      r10,[sp,#0]
                  |L1.254|
;;;121        }
;;;122        mask_s <<= 1;
0000fe  005b              LSLS     r3,r3,#1
;;;123        mask_l <<= 2;
000100  00ad              LSLS     r5,r5,#2
;;;124        mask_d <<= 1;
000102  0076              LSLS     r6,r6,#1
;;;125        pos++;
000104  1c52              ADDS     r2,r2,#1
000106  0864              LSRS     r4,r4,#1              ;108
                  |L1.264|
000108  2c00              CMP      r4,#0                 ;108
00010a  d19f              BNE      |L1.76|
;;;126      }
;;;127    
;;;128      /* Configure PORT registers with new values */
;;;129      PORTx->OE     = tmpreg_OE & (~JTAG_PINS(PORTx));
00010c  f8dfa15c          LDR      r10,|L1.620|
000110  4550              CMP      r0,r10
000112  d102              BNE      |L1.282|
000114  f04f0a1f          MOV      r10,#0x1f
000118  e001              B        |L1.286|
                  |L1.282|
00011a  f04f0a00          MOV      r10,#0
                  |L1.286|
00011e  ea270a0a          BIC      r10,r7,r10
000122  f8c0a004          STR      r10,[r0,#4]
;;;130      PORTx->FUNC   = tmpreg_FUNC & (~JTAG_PINS(PORTx));
000126  f8dfa144          LDR      r10,|L1.620|
00012a  4550              CMP      r0,r10
00012c  d102              BNE      |L1.308|
00012e  f04f0a1f          MOV      r10,#0x1f
000132  e001              B        |L1.312|
                  |L1.308|
000134  f04f0a00          MOV      r10,#0
                  |L1.312|
000138  ea2c0a0a          BIC      r10,r12,r10
00013c  f8c0a008          STR      r10,[r0,#8]
;;;131      PORTx->ANALOG = tmpreg_ANALOG & (~JTAG_PINS(PORTx));
000140  f8dfa128          LDR      r10,|L1.620|
000144  4550              CMP      r0,r10
000146  d102              BNE      |L1.334|
000148  f04f0a1f          MOV      r10,#0x1f
00014c  e001              B        |L1.338|
                  |L1.334|
00014e  f04f0a00          MOV      r10,#0
                  |L1.338|
000152  ea280a0a          BIC      r10,r8,r10
000156  f8c0a00c          STR      r10,[r0,#0xc]
;;;132      PORTx->PULL   = tmpreg_PULL & (~JTAG_PINS(PORTx));
00015a  f8dfa110          LDR      r10,|L1.620|
00015e  4550              CMP      r0,r10
000160  d102              BNE      |L1.360|
000162  f04f0a1f          MOV      r10,#0x1f
000166  e001              B        |L1.364|
                  |L1.360|
000168  f04f0a00          MOV      r10,#0
                  |L1.364|
00016c  ea290a0a          BIC      r10,r9,r10
000170  f8c0a010          STR      r10,[r0,#0x10]
;;;133      PORTx->PD     = tmpreg_PD & (~JTAG_PINS(PORTx));
000174  f8dfa0f4          LDR      r10,|L1.620|
000178  4550              CMP      r0,r10
00017a  d102              BNE      |L1.386|
00017c  f04f0b1f          MOV      r11,#0x1f
000180  e001              B        |L1.390|
                  |L1.386|
000182  f04f0b00          MOV      r11,#0
                  |L1.390|
000186  f8dda008          LDR      r10,[sp,#8]
00018a  ea2a0a0b          BIC      r10,r10,r11
00018e  f8c0a014          STR      r10,[r0,#0x14]
;;;134      PORTx->PWR    = tmpreg_PWR & (~JTAG_PINS(PORTx));
000192  f8dfa0d8          LDR      r10,|L1.620|
000196  4550              CMP      r0,r10
000198  d102              BNE      |L1.416|
00019a  f04f0b1f          MOV      r11,#0x1f
00019e  e001              B        |L1.420|
                  |L1.416|
0001a0  f04f0b00          MOV      r11,#0
                  |L1.420|
0001a4  f8dda004          LDR      r10,[sp,#4]
0001a8  ea2a0a0b          BIC      r10,r10,r11
0001ac  f8c0a018          STR      r10,[r0,#0x18]
;;;135      PORTx->GFEN   = tmpreg_GFEN & (~JTAG_PINS(PORTx));
0001b0  f8dfa0b8          LDR      r10,|L1.620|
0001b4  4550              CMP      r0,r10
0001b6  d102              BNE      |L1.446|
0001b8  f04f0b1f          MOV      r11,#0x1f
0001bc  e001              B        |L1.450|
                  |L1.446|
0001be  f04f0b00          MOV      r11,#0
                  |L1.450|
0001c2  f8dda000          LDR      r10,[sp,#0]
0001c6  ea2a0a0b          BIC      r10,r10,r11
0001ca  f8c0a01c          STR      r10,[r0,#0x1c]
;;;136    }
0001ce  e8bd8ffe          POP      {r1-r11,pc}
;;;137    
                          ENDP

                  PORT_StructInit PROC
;;;143      */
;;;144    void PORT_StructInit(PORT_InitTypeDef* PORT_InitStruct)
0001d2  f64f71ff          MOV      r1,#0xffff
;;;145    {
;;;146      /* Reset PORT initialization structure parameters values */
;;;147      PORT_InitStruct->PORT_Pin        = PORT_Pin_All;
0001d6  8001              STRH     r1,[r0,#0]
;;;148      PORT_InitStruct->PORT_OE         = PORT_OE_IN;
0001d8  2100              MOVS     r1,#0
0001da  7081              STRB     r1,[r0,#2]
;;;149      PORT_InitStruct->PORT_PULL_UP    = PORT_PULL_UP_OFF;
0001dc  70c1              STRB     r1,[r0,#3]
;;;150      PORT_InitStruct->PORT_PULL_DOWN  = PORT_PULL_DOWN_OFF;
0001de  7101              STRB     r1,[r0,#4]
;;;151      PORT_InitStruct->PORT_PD_SHM     = PORT_PD_SHM_OFF;
0001e0  7141              STRB     r1,[r0,#5]
;;;152      PORT_InitStruct->PORT_PD         = PORT_PD_DRIVER;
0001e2  7181              STRB     r1,[r0,#6]
;;;153      PORT_InitStruct->PORT_GFEN       = PORT_GFEN_OFF;
0001e4  71c1              STRB     r1,[r0,#7]
;;;154      PORT_InitStruct->PORT_FUNC       = PORT_FUNC_PORT;
0001e6  7201              STRB     r1,[r0,#8]
;;;155      PORT_InitStruct->PORT_SPEED      = PORT_OUTPUT_OFF;
0001e8  7241              STRB     r1,[r0,#9]
;;;156      PORT_InitStruct->PORT_MODE       = PORT_MODE_ANALOG;
0001ea  7281              STRB     r1,[r0,#0xa]
;;;157    }
0001ec  4770              BX       lr
;;;158    
                          ENDP

                  PORT_ReadInputDataBit PROC
;;;165      */
;;;166    uint8_t PORT_ReadInputDataBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
0001ee  4602              MOV      r2,r0
;;;167    {
;;;168      uint8_t bitstatus;
;;;169    
;;;170      /* Check the parameters */
;;;171      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;172      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;173    
;;;174      if ((PORTx->RXTX & PORT_Pin) != Bit_RESET)
0001f0  6813              LDR      r3,[r2,#0]
0001f2  420b              TST      r3,r1
0001f4  d001              BEQ      |L1.506|
;;;175      {
;;;176        bitstatus = (uint8_t)Bit_SET;
0001f6  2001              MOVS     r0,#1
0001f8  e000              B        |L1.508|
                  |L1.506|
;;;177      }
;;;178      else
;;;179      {
;;;180        bitstatus = (uint8_t)Bit_RESET;
0001fa  2000              MOVS     r0,#0
                  |L1.508|
;;;181      }
;;;182      return bitstatus;
;;;183    }
0001fc  4770              BX       lr
;;;184    
                          ENDP

                  PORT_ReadInputData PROC
;;;189      */
;;;190    uint32_t PORT_ReadInputData(MDR_PORT_TypeDef* PORTx)
0001fe  4601              MOV      r1,r0
;;;191    {
;;;192      /* Check the parameters */
;;;193      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;194    
;;;195      return (PORTx->RXTX);
000200  6808              LDR      r0,[r1,#0]
;;;196    }
000202  4770              BX       lr
;;;197    
                          ENDP

                  PORT_SetBits PROC
;;;204      */
;;;205    void PORT_SetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
000204  6802              LDR      r2,[r0,#0]
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;209      assert_param(IS_PORT_PIN(PORT_Pin));
;;;210      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;211    
;;;212      PORTx->RXTX = PORT_Pin | (PORTx->RXTX & (~JTAG_PINS(PORTx)));
000206  4b19              LDR      r3,|L1.620|
000208  4298              CMP      r0,r3
00020a  d101              BNE      |L1.528|
00020c  231f              MOVS     r3,#0x1f
00020e  e000              B        |L1.530|
                  |L1.528|
000210  2300              MOVS     r3,#0
                  |L1.530|
000212  439a              BICS     r2,r2,r3
000214  430a              ORRS     r2,r2,r1
000216  6002              STR      r2,[r0,#0]
;;;213    }
000218  4770              BX       lr
;;;214    
                          ENDP

                  PORT_ResetBits PROC
;;;221      */
;;;222    void PORT_ResetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
00021a  6802              LDR      r2,[r0,#0]
;;;223    {
;;;224      /* Check the parameters */
;;;225      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;226      assert_param(IS_PORT_PIN(PORT_Pin));
;;;227      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;228    
;;;229      PORTx->RXTX &= ~(PORT_Pin | JTAG_PINS(PORTx));
00021c  4b13              LDR      r3,|L1.620|
00021e  4298              CMP      r0,r3
000220  d101              BNE      |L1.550|
000222  231f              MOVS     r3,#0x1f
000224  e000              B        |L1.552|
                  |L1.550|
000226  2300              MOVS     r3,#0
                  |L1.552|
000228  430b              ORRS     r3,r3,r1
00022a  439a              BICS     r2,r2,r3
00022c  6002              STR      r2,[r0,#0]
;;;230    }
00022e  4770              BX       lr
;;;231    
                          ENDP

                  PORT_WriteBit PROC
;;;242      */
;;;243    void PORT_WriteBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin, BitAction BitVal)
000230  b530              PUSH     {r4,r5,lr}
;;;244    {
000232  4613              MOV      r3,r2
;;;245      uint32_t portdata;
;;;246      /* Check the parameters */
;;;247      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;248      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;249      assert_param(IS_PORT_BIT_ACTION(BitVal));
;;;250      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;251    
;;;252      portdata = PORTx->RXTX & (~JTAG_PINS(PORTx));
000234  6804              LDR      r4,[r0,#0]
000236  4d0d              LDR      r5,|L1.620|
000238  42a8              CMP      r0,r5
00023a  d101              BNE      |L1.576|
00023c  251f              MOVS     r5,#0x1f
00023e  e000              B        |L1.578|
                  |L1.576|
000240  2500              MOVS     r5,#0
                  |L1.578|
000242  ea240205          BIC      r2,r4,r5
;;;253      if (BitVal != Bit_RESET)
000246  b11b              CBZ      r3,|L1.592|
;;;254      {
;;;255        PORTx->RXTX = portdata | PORT_Pin;
000248  ea420401          ORR      r4,r2,r1
00024c  6004              STR      r4,[r0,#0]
00024e  e002              B        |L1.598|
                  |L1.592|
;;;256      }
;;;257      else
;;;258      {
;;;259        PORTx->RXTX = portdata & (~PORT_Pin);
000250  ea220401          BIC      r4,r2,r1
000254  6004              STR      r4,[r0,#0]
                  |L1.598|
;;;260      }
;;;261    }
000256  bd30              POP      {r4,r5,pc}
;;;262    
                          ENDP

                  PORT_Write PROC
;;;269      */
;;;270    void PORT_Write(MDR_PORT_TypeDef* PORTx, uint32_t PortVal)
000258  4a04              LDR      r2,|L1.620|
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;274      assert_param(IS_NOT_JTAG_PIN(PORTx, PortVal));
;;;275    
;;;276      PORTx->RXTX = PortVal & (~JTAG_PINS(PORTx));
00025a  4290              CMP      r0,r2
00025c  d101              BNE      |L1.610|
00025e  221f              MOVS     r2,#0x1f
000260  e000              B        |L1.612|
                  |L1.610|
000262  2200              MOVS     r2,#0
                  |L1.612|
000264  ea210202          BIC      r2,r1,r2
000268  6002              STR      r2,[r0,#0]
;;;277    }
00026a  4770              BX       lr
;;;278    
                          ENDP

                  |L1.620|
                          DCD      0x400b0000

;*** Start embedded assembler ***

#line 1 "..\\Library\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_port.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_port_c_a6c41966____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH|
#line 130
|__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
