; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\mdr32f9qx_port.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\mdr32f9qx_port.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\mdr32f9qx_port.crf ..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_port.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PORT_DeInit PROC
;;;45       */
;;;46     void PORT_DeInit(MDR_PORT_TypeDef* PORTx)
000000  2100              MOVS     r1,#0
;;;47     {
;;;48       /* Check the parameters */
;;;49       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;50     
;;;51       PORTx->ANALOG = 0;
000002  60c1              STR      r1,[r0,#0xc]
;;;52       PORTx->PULL = 0;
000004  6101              STR      r1,[r0,#0x10]
;;;53       PORTx->OE = 0;
000006  6041              STR      r1,[r0,#4]
;;;54       PORTx->RXTX = 0;
000008  6001              STR      r1,[r0,#0]
;;;55       PORTx->FUNC = 0;
00000a  6081              STR      r1,[r0,#8]
;;;56       PORTx->PD = 0;
00000c  6141              STR      r1,[r0,#0x14]
;;;57       PORTx->PWR = 0;
00000e  6181              STR      r1,[r0,#0x18]
;;;58       PORTx->GFEN = 0;
000010  61c1              STR      r1,[r0,#0x1c]
;;;59     }
000012  4770              BX       lr
;;;60     
                          ENDP

                  PORT_Init PROC
;;;69       */
;;;70     void PORT_Init(MDR_PORT_TypeDef* PORTx, const PORT_InitTypeDef* PORT_InitStruct)
000014  e92d4fff          PUSH     {r0-r11,lr}
;;;71     {
;;;72       uint32_t tmpreg_OE;
;;;73       uint32_t tmpreg_FUNC;
;;;74       uint32_t tmpreg_ANALOG;
;;;75       uint32_t tmpreg_PULL;
;;;76       uint32_t tmpreg_PD;
;;;77       uint32_t tmpreg_PWR;
;;;78       uint32_t tmpreg_GFEN;
;;;79       uint32_t portpin, pos, mask_s, mask_l, mask_d;
;;;80     
;;;81       /* Check the parameters */
;;;82       assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;83       assert_param(IS_PORT_PIN(PORT_InitStruct->PORT_Pin));
;;;84       assert_param(IS_PORT_OE(PORT_InitStruct->PORT_OE));
;;;85       assert_param(IS_PORT_PULL_UP(PORT_InitStruct->PORT_PULL_UP));
;;;86       assert_param(IS_PORT_PULL_DOWN(PORT_InitStruct->PORT_PULL_DOWN));
;;;87       assert_param(IS_PORT_PD_SHM(PORT_InitStruct->PORT_PD_SHM));
;;;88       assert_param(IS_PORT_PD(PORT_InitStruct->PORT_PD));
;;;89       assert_param(IS_PORT_GFEN(PORT_InitStruct->PORT_GFEN));
;;;90       assert_param(IS_PORT_FUNC(PORT_InitStruct->PORT_FUNC));
;;;91       assert_param(IS_PORT_SPEED(PORT_InitStruct->PORT_SPEED));
;;;92       assert_param(IS_PORT_MODE(PORT_InitStruct->PORT_MODE));
;;;93     
;;;94       /* Get current PORT register values */
;;;95       tmpreg_OE     = PORTx->OE;
000018  f8d08004          LDR      r8,[r0,#4]
;;;96       tmpreg_FUNC   = PORTx->FUNC;
00001c  6882              LDR      r2,[r0,#8]
00001e  9201              STR      r2,[sp,#4]
;;;97       tmpreg_ANALOG = PORTx->ANALOG;
000020  f8d0900c          LDR      r9,[r0,#0xc]
;;;98       tmpreg_PULL   = PORTx->PULL;
000024  6907              LDR      r7,[r0,#0x10]
;;;99       tmpreg_PD     = PORTx->PD;
000026  f8d0c014          LDR      r12,[r0,#0x14]
;;;100      tmpreg_PWR    = PORTx->PWR;
00002a  6982              LDR      r2,[r0,#0x18]
00002c  9200              STR      r2,[sp,#0]
;;;101      tmpreg_GFEN   = PORTx->GFEN;
00002e  f8d0a01c          LDR      r10,[r0,#0x1c]
;;;102    
;;;103      /* Form new values */
;;;104      pos = 0;
000032  2200              MOVS     r2,#0
;;;105      mask_s = 0x0001;
000034  2301              MOVS     r3,#1
;;;106      mask_l = 0x00000003;
000036  2503              MOVS     r5,#3
;;;107      mask_d = 0x00010001;
000038  f04f1601          MOV      r6,#0x10001
;;;108      for (portpin = PORT_InitStruct->PORT_Pin; portpin; portpin >>= 1)
00003c  880c              LDRH     r4,[r1,#0]
00003e  e05e              B        |L1.254|
                  |L1.64|
;;;109      {
;;;110        if (portpin & 0x1)
000040  ea5f7bc4          LSLS     r11,r4,#31
000044  d056              BEQ      |L1.244|
;;;111        {
;;;112          tmpreg_OE     = (tmpreg_OE     & ~mask_s) | (PORT_InitStruct->PORT_OE        <<  pos);
000046  f891b002          LDRB     r11,[r1,#2]
00004a  ea280803          BIC      r8,r8,r3
00004e  fa0bfb02          LSL      r11,r11,r2
000052  ea48080b          ORR      r8,r8,r11
;;;113          tmpreg_FUNC   = (tmpreg_FUNC   & ~mask_l) | (PORT_InitStruct->PORT_FUNC      << (pos*2));
000056  f891e008          LDRB     lr,[r1,#8]
00005a  ea4f0b42          LSL      r11,r2,#1
00005e  fa0efe0b          LSL      lr,lr,r11
000062  f8cdb00c          STR      r11,[sp,#0xc]
000066  f8ddb004          LDR      r11,[sp,#4]
00006a  ea2b0b05          BIC      r11,r11,r5
00006e  ea4e0e0b          ORR      lr,lr,r11
000072  f8cde004          STR      lr,[sp,#4]
;;;114          tmpreg_ANALOG = (tmpreg_ANALOG & ~mask_s) | (PORT_InitStruct->PORT_MODE      <<  pos);
000076  f891b00a          LDRB     r11,[r1,#0xa]
00007a  ea290903          BIC      r9,r9,r3
00007e  fa0bfb02          LSL      r11,r11,r2
000082  ea49090b          ORR      r9,r9,r11
;;;115          tmpreg_PULL   = (tmpreg_PULL   & ~mask_d) | (PORT_InitStruct->PORT_PULL_UP   << (pos + 16))
000086  f891e003          LDRB     lr,[r1,#3]
00008a  f1020b10          ADD      r11,r2,#0x10
00008e  fa0efe0b          LSL      lr,lr,r11
000092  f8cdb008          STR      r11,[sp,#8]
000096  f891b004          LDRB     r11,[r1,#4]
00009a  43b7              BICS     r7,r7,r6
00009c  ea47070e          ORR      r7,r7,lr
0000a0  fa0bfb02          LSL      r11,r11,r2
0000a4  ea47070b          ORR      r7,r7,r11
;;;116                                                    | (PORT_InitStruct->PORT_PULL_DOWN <<  pos);
;;;117          tmpreg_PD     = (tmpreg_PD     & ~mask_d) | (PORT_InitStruct->PORT_PD_SHM    << (pos + 16))
0000a8  f891e005          LDRB     lr,[r1,#5]
0000ac  f8ddb008          LDR      r11,[sp,#8]
0000b0  ea2c0c06          BIC      r12,r12,r6
0000b4  fa0efe0b          LSL      lr,lr,r11
0000b8  f891b006          LDRB     r11,[r1,#6]
0000bc  ea4c0c0e          ORR      r12,r12,lr
0000c0  fa0bfb02          LSL      r11,r11,r2
0000c4  ea4c0c0b          ORR      r12,r12,r11
;;;118                                                    | (PORT_InitStruct->PORT_PD        <<  pos);
;;;119          tmpreg_PWR    = (tmpreg_PWR    & ~mask_l) | (PORT_InitStruct->PORT_SPEED     << (pos*2));
0000c8  f891e009          LDRB     lr,[r1,#9]
0000cc  f8ddb00c          LDR      r11,[sp,#0xc]
0000d0  fa0efe0b          LSL      lr,lr,r11
0000d4  f8ddb000          LDR      r11,[sp,#0]
0000d8  ea2b0b05          BIC      r11,r11,r5
0000dc  ea4e0e0b          ORR      lr,lr,r11
0000e0  f8cde000          STR      lr,[sp,#0]
;;;120          tmpreg_GFEN   = (tmpreg_GFEN   & ~mask_s) | (PORT_InitStruct->PORT_GFEN      <<  pos);
0000e4  f891b007          LDRB     r11,[r1,#7]
0000e8  ea2a0a03          BIC      r10,r10,r3
0000ec  fa0bfb02          LSL      r11,r11,r2
0000f0  ea4a0a0b          ORR      r10,r10,r11
                  |L1.244|
;;;121        }
;;;122        mask_s <<= 1;
0000f4  005b              LSLS     r3,r3,#1
;;;123        mask_l <<= 2;
0000f6  00ad              LSLS     r5,r5,#2
;;;124        mask_d <<= 1;
0000f8  0076              LSLS     r6,r6,#1
;;;125        pos++;
0000fa  1c52              ADDS     r2,r2,#1
0000fc  0864              LSRS     r4,r4,#1              ;108
                  |L1.254|
0000fe  2c00              CMP      r4,#0                 ;108
000100  d19e              BNE      |L1.64|
;;;126      }
;;;127    
;;;128      /* Configure PORT registers with new values */
;;;129      PORTx->OE     = tmpreg_OE & (~JTAG_PINS(PORTx));
000102  4a47              LDR      r2,|L1.544|
000104  4290              CMP      r0,r2
000106  d102              BNE      |L1.270|
000108  f04f011f          MOV      r1,#0x1f
00010c  e001              B        |L1.274|
                  |L1.270|
00010e  f04f0100          MOV      r1,#0
                  |L1.274|
000112  ea280801          BIC      r8,r8,r1
000116  f8c08004          STR      r8,[r0,#4]
;;;130      PORTx->FUNC   = tmpreg_FUNC & (~JTAG_PINS(PORTx));
00011a  d102              BNE      |L1.290|
00011c  f04f011f          MOV      r1,#0x1f
000120  e001              B        |L1.294|
                  |L1.290|
000122  f04f0100          MOV      r1,#0
                  |L1.294|
000126  9b01              LDR      r3,[sp,#4]
000128  ea230301          BIC      r3,r3,r1
00012c  6083              STR      r3,[r0,#8]
;;;131      PORTx->ANALOG = tmpreg_ANALOG & (~JTAG_PINS(PORTx));
00012e  d102              BNE      |L1.310|
000130  f04f011f          MOV      r1,#0x1f
000134  e001              B        |L1.314|
                  |L1.310|
000136  f04f0100          MOV      r1,#0
                  |L1.314|
00013a  ea290901          BIC      r9,r9,r1
00013e  f8c0900c          STR      r9,[r0,#0xc]
;;;132      PORTx->PULL   = tmpreg_PULL & (~JTAG_PINS(PORTx));
000142  d102              BNE      |L1.330|
000144  f04f011f          MOV      r1,#0x1f
000148  e001              B        |L1.334|
                  |L1.330|
00014a  f04f0100          MOV      r1,#0
                  |L1.334|
00014e  ea270701          BIC      r7,r7,r1
000152  6107              STR      r7,[r0,#0x10]
;;;133      PORTx->PD     = tmpreg_PD & (~JTAG_PINS(PORTx));
000154  d102              BNE      |L1.348|
000156  f04f011f          MOV      r1,#0x1f
00015a  e001              B        |L1.352|
                  |L1.348|
00015c  f04f0100          MOV      r1,#0
                  |L1.352|
000160  ea2c0c01          BIC      r12,r12,r1
000164  f8c0c014          STR      r12,[r0,#0x14]
;;;134      PORTx->PWR    = tmpreg_PWR & (~JTAG_PINS(PORTx));
000168  d102              BNE      |L1.368|
00016a  f04f011f          MOV      r1,#0x1f
00016e  e001              B        |L1.372|
                  |L1.368|
000170  f04f0100          MOV      r1,#0
                  |L1.372|
000174  9a00              LDR      r2,[sp,#0]
000176  ea220201          BIC      r2,r2,r1
00017a  6182              STR      r2,[r0,#0x18]
;;;135      PORTx->GFEN   = tmpreg_GFEN & (~JTAG_PINS(PORTx));
00017c  d102              BNE      |L1.388|
00017e  f04f011f          MOV      r1,#0x1f
000182  e001              B        |L1.392|
                  |L1.388|
000184  f04f0100          MOV      r1,#0
                  |L1.392|
000188  ea2a0a01          BIC      r10,r10,r1
00018c  f8c0a01c          STR      r10,[r0,#0x1c]
;;;136    }
000190  e8bd8fff          POP      {r0-r11,pc}
;;;137    
                          ENDP

                  PORT_StructInit PROC
;;;143      */
;;;144    void PORT_StructInit(PORT_InitTypeDef* PORT_InitStruct)
000194  f64f71ff          MOV      r1,#0xffff
;;;145    {
;;;146      /* Reset PORT initialization structure parameters values */
;;;147      PORT_InitStruct->PORT_Pin        = PORT_Pin_All;
000198  8001              STRH     r1,[r0,#0]
;;;148      PORT_InitStruct->PORT_OE         = PORT_OE_IN;
00019a  2100              MOVS     r1,#0
00019c  7081              STRB     r1,[r0,#2]
;;;149      PORT_InitStruct->PORT_PULL_UP    = PORT_PULL_UP_OFF;
00019e  70c1              STRB     r1,[r0,#3]
;;;150      PORT_InitStruct->PORT_PULL_DOWN  = PORT_PULL_DOWN_OFF;
0001a0  7101              STRB     r1,[r0,#4]
;;;151      PORT_InitStruct->PORT_PD_SHM     = PORT_PD_SHM_OFF;
0001a2  7141              STRB     r1,[r0,#5]
;;;152      PORT_InitStruct->PORT_PD         = PORT_PD_DRIVER;
0001a4  7181              STRB     r1,[r0,#6]
;;;153      PORT_InitStruct->PORT_GFEN       = PORT_GFEN_OFF;
0001a6  71c1              STRB     r1,[r0,#7]
;;;154      PORT_InitStruct->PORT_FUNC       = PORT_FUNC_PORT;
0001a8  7201              STRB     r1,[r0,#8]
;;;155      PORT_InitStruct->PORT_SPEED      = PORT_OUTPUT_OFF;
0001aa  7241              STRB     r1,[r0,#9]
;;;156      PORT_InitStruct->PORT_MODE       = PORT_MODE_ANALOG;
0001ac  7281              STRB     r1,[r0,#0xa]
;;;157    }
0001ae  4770              BX       lr
;;;158    
                          ENDP

                  PORT_ReadInputDataBit PROC
;;;165      */
;;;166    uint8_t PORT_ReadInputDataBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
0001b0  6800              LDR      r0,[r0,#0]
;;;167    {
;;;168      uint8_t bitstatus;
;;;169    
;;;170      /* Check the parameters */
;;;171      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;172      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;173    
;;;174      if ((PORTx->RXTX & PORT_Pin) != Bit_RESET)
0001b2  4208              TST      r0,r1
0001b4  d001              BEQ      |L1.442|
;;;175      {
;;;176        bitstatus = (uint8_t)Bit_SET;
0001b6  2001              MOVS     r0,#1
;;;177      }
;;;178      else
;;;179      {
;;;180        bitstatus = (uint8_t)Bit_RESET;
;;;181      }
;;;182      return bitstatus;
;;;183    }
0001b8  4770              BX       lr
                  |L1.442|
0001ba  2000              MOVS     r0,#0                 ;180
0001bc  4770              BX       lr
;;;184    
                          ENDP

                  PORT_ReadInputData PROC
;;;189      */
;;;190    uint32_t PORT_ReadInputData(MDR_PORT_TypeDef* PORTx)
0001be  6800              LDR      r0,[r0,#0]
;;;191    {
;;;192      /* Check the parameters */
;;;193      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;194    
;;;195      return (PORTx->RXTX);
;;;196    }
0001c0  4770              BX       lr
;;;197    
                          ENDP

                  PORT_SetBits PROC
;;;204      */
;;;205    void PORT_SetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
0001c2  6803              LDR      r3,[r0,#0]
;;;206    {
;;;207      /* Check the parameters */
;;;208      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;209      assert_param(IS_PORT_PIN(PORT_Pin));
;;;210      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;211    
;;;212      PORTx->RXTX = PORT_Pin | (PORTx->RXTX & (~JTAG_PINS(PORTx)));
0001c4  4a16              LDR      r2,|L1.544|
0001c6  4290              CMP      r0,r2
0001c8  d101              BNE      |L1.462|
0001ca  221f              MOVS     r2,#0x1f
0001cc  e000              B        |L1.464|
                  |L1.462|
0001ce  2200              MOVS     r2,#0
                  |L1.464|
0001d0  4393              BICS     r3,r3,r2
0001d2  430b              ORRS     r3,r3,r1
0001d4  6003              STR      r3,[r0,#0]
;;;213    }
0001d6  4770              BX       lr
;;;214    
                          ENDP

                  PORT_ResetBits PROC
;;;221      */
;;;222    void PORT_ResetBits(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin)
0001d8  6803              LDR      r3,[r0,#0]
;;;223    {
;;;224      /* Check the parameters */
;;;225      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;226      assert_param(IS_PORT_PIN(PORT_Pin));
;;;227      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;228    
;;;229      PORTx->RXTX &= ~(PORT_Pin | JTAG_PINS(PORTx));
0001da  4a11              LDR      r2,|L1.544|
0001dc  4290              CMP      r0,r2
0001de  d101              BNE      |L1.484|
0001e0  221f              MOVS     r2,#0x1f
0001e2  e000              B        |L1.486|
                  |L1.484|
0001e4  2200              MOVS     r2,#0
                  |L1.486|
0001e6  430a              ORRS     r2,r2,r1
0001e8  4393              BICS     r3,r3,r2
0001ea  6003              STR      r3,[r0,#0]
;;;230    }
0001ec  4770              BX       lr
;;;231    
                          ENDP

                  PORT_WriteBit PROC
;;;242      */
;;;243    void PORT_WriteBit(MDR_PORT_TypeDef* PORTx, uint32_t PORT_Pin, BitAction BitVal)
0001ee  b510              PUSH     {r4,lr}
;;;244    {
;;;245      uint32_t portdata;
;;;246      /* Check the parameters */
;;;247      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;248      assert_param(IS_GET_PORT_PIN(PORT_Pin));
;;;249      assert_param(IS_PORT_BIT_ACTION(BitVal));
;;;250      assert_param(IS_NOT_JTAG_PIN(PORTx, PORT_Pin));
;;;251    
;;;252      portdata = PORTx->RXTX & (~JTAG_PINS(PORTx));
0001f0  6803              LDR      r3,[r0,#0]
0001f2  4c0b              LDR      r4,|L1.544|
0001f4  42a0              CMP      r0,r4
0001f6  d101              BNE      |L1.508|
0001f8  241f              MOVS     r4,#0x1f
0001fa  e000              B        |L1.510|
                  |L1.508|
0001fc  2400              MOVS     r4,#0
                  |L1.510|
0001fe  43a3              BICS     r3,r3,r4
;;;253      if (BitVal != Bit_RESET)
000200  b112              CBZ      r2,|L1.520|
;;;254      {
;;;255        PORTx->RXTX = portdata | PORT_Pin;
000202  430b              ORRS     r3,r3,r1
000204  6003              STR      r3,[r0,#0]
;;;256      }
;;;257      else
;;;258      {
;;;259        PORTx->RXTX = portdata & (~PORT_Pin);
;;;260      }
;;;261    }
000206  bd10              POP      {r4,pc}
                  |L1.520|
000208  438b              BICS     r3,r3,r1              ;259
00020a  6003              STR      r3,[r0,#0]            ;259
00020c  bd10              POP      {r4,pc}
;;;262    
                          ENDP

                  PORT_Write PROC
;;;269      */
;;;270    void PORT_Write(MDR_PORT_TypeDef* PORTx, uint32_t PortVal)
00020e  4a04              LDR      r2,|L1.544|
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_PORT_ALL_PERIPH(PORTx));
;;;274      assert_param(IS_NOT_JTAG_PIN(PORTx, PortVal));
;;;275    
;;;276      PORTx->RXTX = PortVal & (~JTAG_PINS(PORTx));
000210  4290              CMP      r0,r2
000212  d101              BNE      |L1.536|
000214  221f              MOVS     r2,#0x1f
000216  e000              B        |L1.538|
                  |L1.536|
000218  2200              MOVS     r2,#0
                  |L1.538|
00021a  4391              BICS     r1,r1,r2
00021c  6001              STR      r1,[r0,#0]
;;;277    }
00021e  4770              BX       lr
;;;278    
                          ENDP

                  |L1.544|
                          DCD      0x400b0000

;*** Start embedded assembler ***

#line 1 "..\\Library\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_port.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_port_c_a6c41966____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH|
#line 130
|__asm___16_MDR32F9Qx_port_c_a6c41966____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
