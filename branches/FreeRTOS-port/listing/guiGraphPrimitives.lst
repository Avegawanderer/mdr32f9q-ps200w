L 1 "src\gui\guiGraphics\guiGraphPrimitives.c"
N/**********************************************************
N  Module guiGraphPrimitives contains low-level LCD routines.
N
N  LCD functions description:
N    - Pixel output mode specifies how data in the buffer is updated.
N        Can be PIXEL_MODE_REWRITE - old pixel value is rewrited with new one.
N               PIXEL_MODE_AND - old pixel value is ANDed with new value
N               PIXEL_MODE_OR - old pixel value is ORed with new value
N               PIXEL_MODE_XOR - old pixel value is XORed with new value
N        Every function that modiifes LCD buffer data uses these modes.
N    - pixelValue is an argument
N    - LCD_currentFont specifies font that is used for text
N      Can be set directly
N    - LCD_lineStyle specifies how lines are drawed
N
N**********************************************************/
N
N#include <stdint.h>
L 1 "C:\Keil\ARM\RV31\Inc\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 19 "src\gui\guiGraphics\guiGraphPrimitives.c" 2
N#include "guiGraphPrimitives.h"
L 1 "src\gui\guiGraphics\guiGraphPrimitives.h" 1
N#ifndef __GUI_GRAPH_PRIMITIVES_H_
N#define __GUI_GRAPH_PRIMITIVES_H_
N
N#include <stdint.h>
N#include "guiGraphHAL.h"
L 1 "src\gui\guiGraphics\guiGraphHAL.h" 1
N#ifndef __GUI_GRAPH_HAL_
N#define __GUI_GRAPH_HAL_
N
N#include <stdint.h>
N
N
N// Size definitions in points for Nokia 1202 LCD
N#define LCD_XSIZE (2*96)
N#define LCD_YSIZE 68
N
N// Buffer size in bytes
N#define LCD_BUFFER_SIZE (2*96*9)
N
N/*
N// Size definitions in points
N#define LCD_XSIZE (2*128)
N#define LCD_YSIZE 128
N
N// Buffer size in bytes
N#define LCD_BUFFER_SIZE (LCD_XSIZE * 16)
N*/
N
N// LCD functions settings
N//#define SOFT_HORIZ_REVERSED
N
N// counter increments from 0 to LCD_xxx_PERIOD-1
N// if counter < LCD_xxx_COMPARE, pixel is put unchaged
N// if counter >= LCD_xxx_COMPARE, pixel is put inversed
N#define LCD_DOT_PERIOD      4
N#define LCD_DOT_COMPARE     2
N#define LCD_DASH_PERIOD     7
N#define LCD_DASH_COMPARE    5
N
N
N
N
N// Pixel output modes
N#define PIXEL_MODE_REWRITE  0x00
N#define PIXEL_MODE_AND      0x01
N#define PIXEL_MODE_OR       0x02
N#define PIXEL_MODE_XOR      0x03
N
N// Image output modes
N#define IMAGE_MODE_NORMAL    0x01
N#define IMAGE_MODE_INVERSE   0x00
N// Aliases for fill rect
N#define FILL_WITH_BLACK      0x01
N#define FILL_WITH_WHITE      0x00
N
N#define LCD_FillRect(x_pos, y_pos, width, height, mode) \
N    LCD_DrawImage(0, x_pos, y_pos, width, height, mode)
X#define LCD_FillRect(x_pos, y_pos, width, height, mode)     LCD_DrawImage(0, x_pos, y_pos, width, height, mode)
N
N
N// Line drawing mode (not for all functions)
N#define LINE_STYLE_SOLID      0x10
N#define LINE_STYLE_DASHED     0x20
N#define LINE_STYLE_DOTTED     0x30
N
N
N
N
N
Nextern uint8_t lcdBuffer[LCD_BUFFER_SIZE];
Xextern uint8_t lcdBuffer[(2*96*9)];
Nextern uint8_t LCD_lineStyle;
N
Nvoid LCD_SetPixelOutputMode(uint8_t newMode);
Nvoid LCD_SetLineStyle(uint8_t newStyle);
N
Nvoid LCD_FillWholeBuffer(uint8_t pixelValue);
Nvoid LCD_PutPixel (uint8_t x_pos, uint8_t y_pos, uint8_t pixelValue);
Nvoid LCD_DrawHorLine(uint8_t x_pos, uint8_t y_pos, uint8_t length, uint8_t pixelValue);
Nvoid LCD_DrawVertLine(uint8_t x_pos, uint8_t y_pos, uint8_t length, uint8_t pixelValue);
N
Nvoid LCD_DrawImage(const uint8_t* img, uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, uint8_t mode);
N
N
N#endif
L 6 "src\gui\guiGraphics\guiGraphPrimitives.h" 2
N#include "guiFonts.h"
L 1 "src\gui\guiGraphics\guiFonts.h" 1
N#ifndef __GUI_FONTS_H_
N#define __GUI_FONTS_H_
N
N#include <stdint.h>
N
N/*
N    A font may have all chars present, or only some subset of chars.
N    If a font has contiguous set of chars, starting with some char code,
N    it is indicated by setting charTable to 0 and defining firstCharCode value.
N    Field charCount tells how many chars the font has.
N    Accessing some char with char code c in this case is trivial and looks like this:
N        c -= font.firstCharCode;
N        char_data = font.data[c * font.bytesPerChar];
N    If a font has non-contiguous set of chars, their char codes are specified in codeTable,
N    and offset relative to font.data is specified in offsetTable.
N
N    A font may be monospaced or variable-spaced.
N    If a font is monospaced, widthTable must be set to 0. All chars will have the same width = font.width.
N    If font is variable-spaced, widthTable is used - it contains width for every char.
N
N    If font has non-contiguous set of chars, or font is variable-spaced, font processing routines need to know,
N    where particular char image is located. This information provides offsetTable.
N
N    So, a font can be one of the following:
N        - monospaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     -
N            offsetTable:    -
N        - monospaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     -
N            offsetTable:    present
N        - variable-spaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     present
N            offsetTable:    present
N        - variable-spaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     present
N            offsetTable:    present
N
N        Font MUST have valid offsetTable when codeTable or widthTable are used.
N*/
N
N
N//---------------------------------------------//
N// Fonts typedefs
N
Ntypedef struct 
N{
N    uint8_t height;                     // font chars height
N    uint8_t width;                      // actual for monospaced, ignored for variable-width fonts
N    uint8_t charCount;                  // Total number of chars in the font
N    uint8_t spacing;                    // Additional space between chars
N    uint8_t bytesPerChar;               // Actual for monospaced, ignored for variable-length fonts
N    uint8_t firstCharCode;              // Used if there is no charTable - specifies first avaliable char code in the font.
N    const uint8_t *codeTable;           // Used if not all symbols are prensent in the font. Otherwise must be 0.
N    const uint8_t *widthTable;          // Used if font is not monospaced. Otherwise must be 0.
N    const uint16_t *offsetTable;        // Used with codeTable or widthTable
N    const uint8_t *data;                // Font data - contiguous byte array
N} tFont;
N
N
Nextern const tFont font_h11;
Nextern const tFont font_h32;
Nextern const tFont font_h10;
Nextern const tFont font_h10_bold;
Nextern const tFont font_6x8_mono;
Nextern const tFont font_h16;
N
N
N#endif
L 7 "src\gui\guiGraphics\guiGraphPrimitives.h" 2
N
N// Align modes - required alignment mode is selected by
N// combining these flags
N#define ALIGN_CENTER    0x00
N#define ALIGN_LEFT      0x01
N#define ALIGN_RIGHT     0x02
N#define ALIGN_TOP       0x04
N#define ALIGN_BOTTOM    0x08
N// Aliases
N#define ALIGN_TOP_LEFT      (ALIGN_TOP | ALIGN_LEFT)
N#define ALIGN_BOTTOM_LEFT   (ALIGN_BOTTOM | ALIGN_LEFT)
N#define ALIGN_TOP_RIGHT     (ALIGN_TOP | ALIGN_RIGHT)
N#define ALIGN_BOTTOM_RIGHT   (ALIGN_BOTTOM | ALIGN_RIGHT)
N
N
Ntypedef struct {
N    uint8_t x1;
N    uint8_t y1;
N    uint8_t x2;
N    uint8_t y2;
N} rect_t;
N
N
Nextern const tFont* LCD_currentFont;
N
Nvoid LCD_SetFont(const tFont *newFont);
N
Nvoid LCD_DrawRect(uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, uint8_t pixelValue);
Nuint8_t LCD_GetFontItem(const tFont *font, uint8_t code, uint8_t *width, uint16_t *offset);
Nvoid LCD_PrintString(char *str, uint8_t x, uint8_t y, uint8_t mode);
Nvoid LCD_PrintStringAligned(char *str, rect_t *rect, uint8_t alignment, uint8_t mode);
Nvoid LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t mode);
N
N
N#endif
L 20 "src\gui\guiGraphics\guiGraphPrimitives.c" 2
N#include "guiGraphHAL.h"
N#include "guiFonts.h"
N
N
Nconst tFont* LCD_currentFont;
N
N
N//-------------------------------------------------------//
N// Sets current font for text printing
N//
N//-------------------------------------------------------//
Nvoid LCD_SetFont(const tFont *newFont)
N{
N    if (newFont != LCD_currentFont)
N        LCD_currentFont = newFont;
N}
N
N
N//-------------------------------------------------------//
N// Draws a rectangle using LCD_lineStyle
N//	Parameters:
N//		uint8_t x_pos	- pixel x coordinate
N//		uint8_t y_pos	- pixel y coordinate
N//      uint8_t width
N//      uint8_t height
N//      pixelValue  	- new pixel value, 1 or 0
N// Pixel output mode is set by calling LCD_setPixelOutputMode()
N//-------------------------------------------------------//
Nvoid LCD_DrawRect(uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, uint8_t pixelValue)
N{
N    LCD_DrawHorLine(x_pos,y_pos,width,pixelValue);
N    LCD_DrawHorLine(x_pos,y_pos + height - 1,width,pixelValue);
N    LCD_DrawVertLine(x_pos,y_pos,height - 1,pixelValue);
N    LCD_DrawVertLine(x_pos + width - 1,y_pos, height - 1,pixelValue);
N}
N
N
N
N//-------------------------------------------------------//
N// Rerurns width and offset of a font item
N// Font array MUST be sorted by code.
N// If no item with such code is found, 0 is returned.
N// Using binary search, http://kvodo.ru/dvoichnyiy-poisk.html
N//-------------------------------------------------------//
Nuint8_t LCD_GetFontItem(const tFont *font, uint8_t code, uint8_t *width, uint16_t *offset)
N{
N    uint8_t itemCode;
N    uint8_t start_index = 0;
N    uint8_t end_index;
N    uint8_t i;
N
N    if (font->codeTable == 0)
N    {
N        // Font char set is a contiguous array
N        start_index = font->firstCharCode;
N        end_index = start_index + (font->charCount - 1);
N        if ((code < start_index) || (code > end_index))
N            return 0;
N        else
N        {
N            i = code-start_index;
N            if (offset != 0)
N            {
N                if (font->offsetTable == 0)
N                    *offset = (uint16_t)i * font->bytesPerChar;
N                else
N                    *offset = font->offsetTable[i];
N            }
N            if (font->widthTable == 0)
N                *width = font->width;
N            else
N                *width = font->widthTable[i];
N            return 1;
N        }
N    }
N    else
N    {
N        end_index = font->charCount;
N        // Font char set is defined by charTable
N        while (start_index < end_index)
N        {
N            i = start_index + (end_index - start_index) / 2;
N            itemCode = font->codeTable[i];
N            if (code < itemCode)
N                end_index = i;
N            else if (code > itemCode)
N                start_index = i+1;
N            else
N            {
N                // Found
N                if (offset != 0)
N                    // Font must have valid offsetTable when codeTable is used
N                    *offset = font->offsetTable[i];
N                if (font->widthTable == 0)
N                    *width = font->width;
N                else
N                    *width = font->widthTable[i];
N                return 1;
N            }
N        }
N    }
N    return 0;
N}
N
N//-------------------------------------------------------//
N// Rerurns length of a string in pixels
N//
N//-------------------------------------------------------//
Nuint8_t LCD_GetStringWidth(const tFont *font, char *string)
N{
N    uint8_t length = 0;
N    uint8_t index = 0;
N    uint8_t charWidth;
N    char c;
N
W "src\gui\guiGraphics\guiGraphPrimitives.c" 135 11 assignment in condition
N    while((c = string[index++]))
N    {
N        if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, 0))
N            length += charWidth + font->spacing;
N    }
N
N    length -= font->spacing;
N    return length;
N}
N
N
N//-------------------------------------------------------//
N// Prints a string with LCD_currentFont at current position
N// mode:
N//     IMAGE_MODE_NORMAL - normal images
N//     IMAGE_MODE_INVERSE - inversed images
N//-------------------------------------------------------//
Nvoid LCD_PrintString(char *str, uint8_t x, uint8_t y, uint8_t mode)
N{
N    uint8_t index = 0;
N    uint8_t charWidth;
N    uint16_t charOffset;
N    char c;
N
W "src\gui\guiGraphics\guiGraphPrimitives.c" 159 11 assignment in condition
N    while((c = str[index++]))
N    {
N
N        if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, &charOffset))
N        {
N            LCD_DrawImage(&LCD_currentFont->data[charOffset], x, y, charWidth, LCD_currentFont->height, mode);
N            x += charWidth + LCD_currentFont->spacing;
N        }
N    }
N}
N
N
N
N//-------------------------------------------------------//
N// Prints a string with LCD_currentFont inside rectangle using
N//  alignment
N// mode:
N//     IMAGE_MODE_NORMAL - normal images
N//     IMAGE_MODE_INVERSE - inversed images
N//-------------------------------------------------------//
Nvoid LCD_PrintStringAligned(char *str, rect_t *rect, uint8_t alignment, uint8_t mode)
N{
N    uint8_t index = 0;
N    uint8_t charWidth;
N    uint16_t charOffset;
N    char c;
N    int16_t x_aligned, y_aligned;
N    int16_t strWidthPx;
N
N    // Find horizontal position
N    if (alignment & ALIGN_LEFT)
X    if (alignment & 0x01)
N    {
N        x_aligned = rect->x1;       // pretty simple - take left rect border as starting point
N    }
N    else
N    {
N        // We need to compute length of whole string in pixels
N        strWidthPx = LCD_GetStringWidth(LCD_currentFont,str);
N        if (alignment & ALIGN_RIGHT)
X        if (alignment & 0x02)
N            x_aligned = (int16_t)rect->x2 + 1 - strWidthPx;
N        else
N            x_aligned = rect->x1 + ((int16_t)(rect->x2 - rect->x1 + 1) - strWidthPx) / 2;
N    }
N
N    // Find vertical position
N    if (alignment & ALIGN_TOP)
X    if (alignment & 0x04)
N    {
N        y_aligned = rect->y1;
N    }
N    else if (alignment & ALIGN_BOTTOM)
X    else if (alignment & 0x08)
N    {
N        y_aligned = (int16_t)rect->y2 + 1 - LCD_currentFont->height;
N    }
N    else
N    {
N        y_aligned = rect->y1 + ((int16_t)(rect->y2 - rect->y1 + 1) - LCD_currentFont->height) / 2;
N    }
N
N    // Now print string
W "src\gui\guiGraphics\guiGraphPrimitives.c" 218 11 assignment in condition
N    while((c = str[index++]))
N    {
N        if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, &charOffset))
N        {
N            LCD_DrawImage(&LCD_currentFont->data[charOffset], x_aligned, y_aligned, charWidth, LCD_currentFont->height, mode);
N            x_aligned += charWidth + LCD_currentFont->spacing;
N        }
N    }
N}
N
N
Nvoid LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t mode)
N{
N    int16_t dy = 0;
N    int16_t dx = 0;
N    int16_t stepx = 0;
N    int16_t stepy = 0;
N    int16_t fraction = 0;
N
N//       if (x1>LCD_X_RES || x2>LCD_X_RES || y1>LCD_Y_RES || y2>LCD_Y_RES) return;
N
N    dy = y2 - y1;
N    dx = x2 - x1;
N    if (dy < 0)
N    {
N        dy = -dy;
N        stepy = -1;
N    }
N    else stepy = 1;
N    if (dx < 0)
N    {
N        dx = -dx;
N        stepx = -1;
N    }
N    else stepx = 1;
N    dy <<= 1;
N    dx <<= 1;
N    LCD_PutPixel(x1,y1,mode);
N    if (dx > dy)
N    {
N        fraction = dy - (dx >> 1);
N        while (x1 != x2)
N        {
N            if (fraction >= 0)
N            {
N                y1 += stepy;
N                fraction -= dx;
N            }
N            x1 += stepx;
N            fraction += dy;
N            LCD_PutPixel(x1,y1,mode);
N        }
N    }
N    else
N    {
N        fraction = dx - (dy >> 1);
N        while (y1 != y2)
N        {
N            if (fraction >= 0)
N            {
N                x1 += stepx;
N                fraction -= dy;
N            }
N            y1 += stepy;
N            fraction += dx;
N            LCD_PutPixel(x1,y1,mode);
N        }
N    }
N}
N
N
