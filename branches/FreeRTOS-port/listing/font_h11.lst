L 1 "src\gui\guiGraphics\font_h11.c"
N/*****************************************************
N	Font generation template
N*****************************************************/
N
N#include <stdint.h>
L 1 "C:\Keil\ARM\RV31\Inc\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 6 "src\gui\guiGraphics\font_h11.c" 2
N#include "guiFonts.h"
L 1 "src\gui\guiGraphics\guiFonts.h" 1
N#ifndef __GUI_FONTS_H_
N#define __GUI_FONTS_H_
N
N#include <stdint.h>
N
N/*
N    A font may have all chars present, or only some subset of chars.
N    If a font has contiguous set of chars, starting with some char code,
N    it is indicated by setting charTable to 0 and defining firstCharCode value.
N    Field charCount tells how many chars the font has.
N    Accessing some char with char code c in this case is trivial and looks like this:
N        c -= font.firstCharCode;
N        char_data = font.data[c * font.bytesPerChar];
N    If a font has non-contiguous set of chars, their char codes are specified in codeTable,
N    and offset relative to font.data is specified in offsetTable.
N
N    A font may be monospaced or variable-spaced.
N    If a font is monospaced, widthTable must be set to 0. All chars will have the same width = font.width.
N    If font is variable-spaced, widthTable is used - it contains width for every char.
N
N    If font has non-contiguous set of chars, or font is variable-spaced, font processing routines need to know,
N    where particular char image is located. This information provides offsetTable.
N
N    So, a font can be one of the following:
N        - monospaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     -
N            offsetTable:    -
N        - monospaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     -
N            offsetTable:    present
N        - variable-spaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     present
N            offsetTable:    present
N        - variable-spaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     present
N            offsetTable:    present
N
N        Font MUST have valid offsetTable when codeTable or widthTable are used.
N*/
N
N
N//---------------------------------------------//
N// Fonts typedefs
N
Ntypedef struct 
N{
N    uint8_t height;                     // font chars height
N    uint8_t width;                      // actual for monospaced, ignored for variable-width fonts
N    uint8_t charCount;                  // Total number of chars in the font
N    uint8_t spacing;                    // Additional space between chars
N    uint8_t bytesPerChar;               // Actual for monospaced, ignored for variable-length fonts
N    uint8_t firstCharCode;              // Used if there is no charTable - specifies first avaliable char code in the font.
N    const uint8_t *codeTable;           // Used if not all symbols are prensent in the font. Otherwise must be 0.
N    const uint8_t *widthTable;          // Used if font is not monospaced. Otherwise must be 0.
N    const uint16_t *offsetTable;        // Used with codeTable or widthTable
N    const uint8_t *data;                // Font data - contiguous byte array
N} tFont;
N
N
Nextern const tFont font_h11;
Nextern const tFont font_h32;
Nextern const tFont font_h10;
Nextern const tFont font_h10_bold;
Nextern const tFont font_6x8_mono;
Nextern const tFont font_h16;
N
N
N#endif
L 7 "src\gui\guiGraphics\font_h11.c" 2
N
Nstatic const uint8_t font_h11_data [] = 
N{
N	// symbol 0x20 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x21 
N	0x7F, 0x7F, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x22 
N	0x0B, 0x07, 0x00, 0x0B, 0x07, 0x00, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x23 
N	0xCC, 0xFF, 0xFF, 0xCC, 0xFF, 0xFF, 0xCC, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x00,
N
N	// symbol 0x24 
N	0x9E, 0xBF, 0x33, 0xFF, 0x33, 0xF7, 0xE6, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x25 
N	0x87, 0xC5, 0x67, 0x30, 0x98, 0x8C, 0x86, 0x00, 
N	0x01, 0x00, 0x00, 0x00, 0x03, 0x02, 0x03, 0x00,
N
N	// symbol 0x26 
N	0xEE, 0xFF, 0x33, 0x7F, 0xEE, 0xC0, 0x40, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x03, 0x00,
N
N	// symbol 0x27 
N	0x0B, 0x07, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x28 
N	0xFE, 0xFF, 0x03, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0x29 
N	0x03, 0xFF, 0xFE, 0x00, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x2A 
N	0x30, 0xB6, 0xFE, 0xFC, 0xFE, 0xB6, 0x30, 0x00, 
N	0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00,
N
N	// symbol 0x2B 
N	0x30, 0x30, 0xFC, 0xFC, 0x30, 0x30, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x2C 
N	0x80, 0x80, 0x00, 0x05, 0x03, 0x00,
N
N	// symbol 0x2D 
N	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x2E 
N	0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x2F 
N	0x00, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x30 
N	0xFE, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x31 
N	0x18, 0x1C, 0x0E, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x32 
N	0x06, 0x87, 0xC3, 0xE3, 0x73, 0x3F, 0x1E, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x33 
N	0x86, 0x87, 0x33, 0x33, 0x33, 0xFF, 0xEE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x34 
N	0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
N
N	// symbol 0x35 
N	0xBF, 0xBF, 0x33, 0x33, 0x33, 0xF3, 0xE3, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x36 
N	0xFE, 0xFF, 0x33, 0x33, 0x33, 0xF7, 0xE6, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x37 
N	0x03, 0x03, 0x83, 0xE3, 0xFB, 0x3F, 0x0F, 0x00, 
N	0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x38 
N	0xEE, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xEE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x39 
N	0x9E, 0xBF, 0x33, 0x33, 0x33, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x3A 
N	0x0C, 0x0C, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x3B 
N	0x86, 0x86, 0x00, 0x05, 0x03, 0x00,
N
N	// symbol 0x3C 
N	0x30, 0x78, 0xFC, 0xCE, 0x87, 0x03, 0x00, 0x00, 
N	0x00, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0x3D 
N	0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x3E 
N	0x03, 0x87, 0xCE, 0xFC, 0x78, 0x30, 0x00, 0x03, 
N	0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x3F 
N	0x06, 0x07, 0x63, 0x73, 0x3F, 0x1E, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x40 
N	0xFE, 0xFF, 0x03, 0x73, 0x4B, 0x7F, 0x7E, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x41 
N	0xF8, 0xFC, 0xCE, 0xC7, 0xC3, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x42 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xEE, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x43 
N	0xFE, 0xFF, 0x03, 0x03, 0x03, 0x87, 0x86, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x44 
N	0xFF, 0xFF, 0x03, 0x03, 0x87, 0xFE, 0xFC, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00,
N
N	// symbol 0x45 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0x03, 0x03, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x46 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0x03, 0x03, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x47 
N	0xFE, 0xFF, 0x03, 0x33, 0x33, 0xF7, 0xF6, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x48 
N	0xFF, 0xFF, 0x30, 0x30, 0x30, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x49 
N	0x03, 0xFF, 0xFF, 0x03, 0x00, 0x03, 0x03, 0x03, 
N	0x03, 0x00,
N
N	// symbol 0x4A 
N	0x80, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x4B 
N	0xFF, 0xFF, 0x78, 0xFC, 0xCE, 0x87, 0x03, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0x4C 
N	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x4D 
N	0xFF, 0xFF, 0x0E, 0x1C, 0x1C, 0x0E, 0xFF, 0xFF, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
N
N	// symbol 0x4E 
N	0xFF, 0xFF, 0x1C, 0x38, 0x70, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x4F 
N	0xFE, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x50 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0x3F, 0x1E, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x51 
N	0xFE, 0xFF, 0x03, 0xC3, 0xC3, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x01, 0x00,
N
N	// symbol 0x52 
N	0xFF, 0xFF, 0x73, 0xF3, 0xF3, 0xBF, 0x1E, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0x53 
N	0x9E, 0xBF, 0x33, 0x33, 0x33, 0xF7, 0xE6, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x54 
N	0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x55 
N	0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x56 
N	0x3F, 0xFF, 0xE0, 0xC0, 0xE0, 0xFF, 0x3F, 0x00, 
N	0x00, 0x00, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x57 
N	0xFF, 0xFF, 0x80, 0xF0, 0xF0, 0x80, 0xFF, 0xFF, 
N	0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x01,
N
N	// symbol 0x58 
N	0x87, 0xCF, 0xFC, 0x78, 0xFC, 0xCF, 0x87, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x59 
N	0x0F, 0x1F, 0xF8, 0xF8, 0x1F, 0x0F, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x5A 
N	0xC3, 0xE3, 0x73, 0x3B, 0x1F, 0x0F, 0x07, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x5B 
N	0xFF, 0xFF, 0x03, 0x03, 0x00, 0x03, 0x03, 0x03, 
N	0x03, 0x00,
N
N	// symbol 0x5C 
N	0x03, 0x0F, 0x3C, 0xF0, 0xC0, 0x00, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x5D 
N	0x03, 0x03, 0xFF, 0xFF, 0x00, 0x03, 0x03, 0x03, 
N	0x03, 0x00,
N
N	// symbol 0x5E 
N	0x0C, 0x0E, 0x07, 0x07, 0x0E, 0x0C, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x5F 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x60 
N	0x03, 0x07, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 
N	0x00, 0x00,
N
N	// symbol 0x61 
N	0xC0, 0xEC, 0x6C, 0x6C, 0xFC, 0xF8, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x01, 0x03, 0x00,
N
N	// symbol 0x62 
N	0xFF, 0xFF, 0x18, 0x18, 0xF8, 0xF0, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x63 
N	0xF8, 0xFC, 0x0C, 0x0C, 0x9C, 0x98, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x64 
N	0xF0, 0xF8, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x65 
N	0xF8, 0xFC, 0x6C, 0x6C, 0x7C, 0x78, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x00, 0x00,
N
N	// symbol 0x66 
N	0x18, 0xFE, 0xFF, 0x1B, 0x1B, 0x00, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x67 
N	0x78, 0xFC, 0xCC, 0xC8, 0xFC, 0xFC, 0x00, 0x00, 
N	0x06, 0x06, 0x06, 0x07, 0x03, 0x00,
N
N	// symbol 0x68 
N	0xFF, 0xFF, 0x18, 0x18, 0xF8, 0xF0, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x69 
N	0xFB, 0xFB, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x6A 
N	0x00, 0x00, 0x00, 0xFB, 0xFB, 0x00, 0x03, 0x07, 
N	0x06, 0x07, 0x03, 0x00,
N
N	// symbol 0x6B 
N	0xFF, 0xFF, 0xF0, 0xF8, 0x9C, 0x0C, 0x00, 0x03, 
N	0x03, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0x6C 
N	0xFF, 0xFF, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x6D 
N	0xFC, 0xFC, 0x1C, 0x78, 0x1C, 0xFC, 0xF8, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x6E 
N	0xFC, 0xFC, 0x18, 0x0C, 0xFC, 0xF8, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x6F 
N	0xF8, 0xFC, 0x0C, 0x0C, 0xFC, 0xF8, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x70 
N	0xFC, 0xFC, 0xCC, 0xCC, 0xFC, 0x78, 0x00, 0x07, 
N	0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x71 
N	0x3C, 0x7E, 0x66, 0x66, 0xFE, 0xFE, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x72 
N	0xFC, 0xFC, 0x18, 0x0C, 0x1C, 0x18, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x73 
N	0x78, 0x7C, 0x6C, 0x6C, 0xEC, 0xEC, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x74 
N	0x0C, 0x0C, 0xFC, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0x75 
N	0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x76 
N	0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x00, 
N	0x01, 0x03, 0x03, 0x01, 0x00, 0x00,
N
N	// symbol 0x77 
N	0xFC, 0xFC, 0x00, 0xC0, 0x00, 0xFC, 0xFC, 0x00, 
N	0x01, 0x03, 0x03, 0x01, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0x78 
N	0x9C, 0xFC, 0x60, 0x60, 0xFC, 0x9C, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x79 
N	0x3C, 0x7C, 0x60, 0x60, 0xFC, 0xFC, 0x00, 0x03, 
N	0x07, 0x06, 0x06, 0x07, 0x03, 0x00,
N
N	// symbol 0x7A 
N	0x8C, 0xCC, 0xEC, 0x7C, 0x3C, 0x1C, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0x7B 
N	0x30, 0xFE, 0xFF, 0x03, 0x00, 0x00, 0x01, 0x03, 
N	0x03, 0x00,
N
N	// symbol 0x7C 
N	0xFF, 0xFF, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0x7D 
N	0x03, 0xFF, 0xFE, 0x30, 0x00, 0x03, 0x03, 0x01, 
N	0x00, 0x00,
N
N	// symbol 0x7E 
N	0x06, 0x03, 0x07, 0x07, 0x06, 0x03, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0x80 
N	0xFF, 0x01, 0x89, 0xFD, 0x81, 0x01, 0xFF, 0x00, 
N	0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x00,
N
N	// symbol 0x81 
N	0xFF, 0x01, 0xC5, 0xA5, 0x9D, 0x01, 0xFF, 0x00, 
N	0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x00,
N
N	// symbol 0x82 
N	0xC0, 0xC0, 0x00, 0xF0, 0xF0, 0xC0, 0xF0, 0xF0, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
N
N	// symbol 0xA8 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0x03, 0x03, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0xA9 
N	0xFE, 0x07, 0x73, 0x8B, 0x8B, 0x53, 0x07, 0xFE, 
N	0x03, 0x07, 0x06, 0x06, 0x06, 0x06, 0x07, 0x03,
N
N	// symbol 0xB0 
N	0x0E, 0x1F, 0x1B, 0x1F, 0x0E, 0x00, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0xB8 
N	0xF8, 0xFD, 0x6C, 0x6C, 0x7D, 0x38, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x00, 0x00,
N
N	// symbol 0xC0 
N	0xF8, 0xFC, 0xCE, 0xC7, 0xC3, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xC1 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0xF3, 0xE3, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xC2 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0xFF, 0xEE, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xC3 
N	0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0xC4 
N	0x00, 0xFE, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x00, 
N	0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07,
N
N	// symbol 0xC5 
N	0xFF, 0xFF, 0x33, 0x33, 0x33, 0x33, 0x03, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
N
N	// symbol 0xC6 
N	0x03, 0xCF, 0xFC, 0xFF, 0xFF, 0xFC, 0xCF, 0x03, 
N	0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x03, 0x03,
N
N	// symbol 0xC7 
N	0x86, 0x87, 0x33, 0x33, 0x33, 0xFF, 0xCE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xC8 
N	0xFF, 0xFF, 0x70, 0x38, 0x1C, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xC9 
N	0xFF, 0xFF, 0x70, 0x3B, 0x1C, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xCA 
N	0xFF, 0xFF, 0x78, 0xFC, 0xCE, 0x87, 0x03, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0xCB 
N	0x00, 0xFE, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x01, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xCC 
N	0xFF, 0xFF, 0x0E, 0x3C, 0x3C, 0x0E, 0xFF, 0xFF, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03,
N
N	// symbol 0xCD 
N	0xFF, 0xFF, 0x30, 0x30, 0x30, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xCE 
N	0xFE, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xCF 
N	0xFF, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xD0 
N	0xFF, 0xFF, 0x63, 0x63, 0x63, 0x7F, 0x3E, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0xD1 
N	0xFE, 0xFF, 0x03, 0x03, 0x03, 0x87, 0x86, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xD2 
N	0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0xD3 
N	0x9F, 0xBF, 0x30, 0x30, 0xB0, 0xFF, 0xFF, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00,
N
N	// symbol 0xD4 
N	0x3E, 0x7F, 0x63, 0xFF, 0xFF, 0x63, 0x7F, 0x3E, 
N	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0xD5 
N	0x87, 0xCF, 0xFC, 0x30, 0xFC, 0xCF, 0x87, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xD6 
N	0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x06,
N
N	// symbol 0xD7 
N	0x1F, 0x3F, 0x30, 0x30, 0x30, 0xFF, 0xFF, 0x00, 
N	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xD8 
N	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
N
N	// symbol 0xD9 
N	0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07,
N
N	// symbol 0xDA 
N	0x03, 0xFF, 0xFF, 0x18, 0x18, 0xF8, 0xF0, 0x00, 
N	0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xDB 
N	0xFF, 0xFF, 0x18, 0xF8, 0xF0, 0x00, 0xFF, 0xFF, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x03, 0x03,
N
N	// symbol 0xDC 
N	0xFF, 0xFF, 0x18, 0x18, 0xF8, 0xF0, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xDD 
N	0x86, 0x87, 0x33, 0x33, 0x33, 0xFF, 0xFE, 0x00, 
N	0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xDE 
N	0xFF, 0xFF, 0x30, 0xFE, 0xFF, 0x03, 0xFF, 0xFE, 
N	0x03, 0x03, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01,
N
N	// symbol 0xDF 
N	0x1E, 0xBF, 0xF3, 0xF3, 0x73, 0xFF, 0xFF, 0x00, 
N	0x03, 0x03, 0x01, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xE0 
N	0xC0, 0xE8, 0x6C, 0x6C, 0xFC, 0xF8, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x01, 0x03, 0x00,
N
N	// symbol 0xE1 
N	0xF8, 0xFC, 0x6C, 0x6C, 0xEE, 0xC6, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xE2 
N	0xFC, 0xFC, 0x6C, 0x6C, 0xFC, 0xD8, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xE3 
N	0xFC, 0xFC, 0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0xE4 
N	0x00, 0xFC, 0xFC, 0x0C, 0xFC, 0xFC, 0x00, 0x00, 
N	0x07, 0x07, 0x03, 0x03, 0x03, 0x07, 0x07, 0x00,
N
N	// symbol 0xE5 
N	0xF8, 0xFC, 0x6C, 0x6C, 0x7C, 0x38, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x00, 0x00,
N
N	// symbol 0xE6 
N	0x9C, 0xFC, 0x60, 0xFC, 0xFC, 0x60, 0xFC, 0x9C, 
N	0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x03, 0x03,
N
N	// symbol 0xE7 
N	0x08, 0x0C, 0x6C, 0x6C, 0xFC, 0x98, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xE8 
N	0xFC, 0xFC, 0xE0, 0x70, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xE9 
N	0xFC, 0xFC, 0xE3, 0x71, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xEA 
N	0xFC, 0xFC, 0xF0, 0xF8, 0x9C, 0x0C, 0x00, 0x03, 
N	0x03, 0x00, 0x01, 0x03, 0x03, 0x00,
N
N	// symbol 0xEB 
N	0x80, 0xE0, 0x78, 0x1C, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xEC 
N	0xFC, 0xFC, 0x38, 0x70, 0x38, 0xFC, 0xFC, 0x00, 
N	0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xED 
N	0xFC, 0xFC, 0x60, 0x60, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xEE 
N	0xF8, 0xFC, 0x0C, 0x0C, 0xFC, 0xF8, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xEF 
N	0xFC, 0xFC, 0x0C, 0x0C, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xF0 
N	0xFC, 0xFC, 0xCC, 0xCC, 0xFC, 0x78, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N	// symbol 0xF1 
N	0xF8, 0xFC, 0x0C, 0x0C, 0x9C, 0x98, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xF2 
N	0x0C, 0x0C, 0xFC, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 
N	0x00, 0x03, 0x03, 0x00, 0x00, 0x00,
N
N	// symbol 0xF3 
N	0x3C, 0x7C, 0x60, 0x60, 0xFC, 0xFC, 0x00, 0x03, 
N	0x07, 0x06, 0x06, 0x07, 0x03, 0x00,
N
N	// symbol 0xF4 
N	0xF0, 0xF8, 0x98, 0xFC, 0xFC, 0x98, 0xF8, 0xF0, 
N	0x00, 0x01, 0x01, 0x07, 0x07, 0x01, 0x01, 0x00,
N
N	// symbol 0xF5 
N	0x9C, 0xFC, 0x60, 0x60, 0xFC, 0x9C, 0x00, 0x03, 
N	0x03, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xF6 
N	0xFC, 0xFC, 0x00, 0x00, 0xFC, 0xFC, 0x00, 0x00, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x06, 0x00,
N
N	// symbol 0xF7 
N	0x3C, 0x7C, 0x60, 0x60, 0xFC, 0xFC, 0x00, 0x00, 
N	0x00, 0x00, 0x00, 0x03, 0x03, 0x00,
N
N	// symbol 0xF8 
N	0xFC, 0xFC, 0x00, 0xF0, 0xF0, 0x00, 0xFC, 0xFC, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
N
N	// symbol 0xF9 
N	0xFC, 0xFC, 0x00, 0xFC, 0xFC, 0x00, 0xFC, 0xFC, 
N	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07,
N
N	// symbol 0xFA 
N	0x0C, 0xFC, 0xFC, 0x30, 0x30, 0xF0, 0xE0, 0x00, 
N	0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xFB 
N	0xFC, 0xFC, 0x30, 0xF0, 0xE0, 0x00, 0xFC, 0xFC, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x03, 0x03,
N
N	// symbol 0xFC 
N	0xFC, 0xFC, 0x30, 0x30, 0xF0, 0xE0, 0x00, 0x03, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xFD 
N	0x08, 0x0C, 0x6C, 0x6C, 0xFC, 0xF8, 0x00, 0x01, 
N	0x03, 0x03, 0x03, 0x03, 0x01, 0x00,
N
N	// symbol 0xFE 
N	0xFC, 0xFC, 0x60, 0xF8, 0xFC, 0x0C, 0xFC, 0xF8, 
N	0x03, 0x03, 0x00, 0x01, 0x03, 0x03, 0x03, 0x01,
N
N	// symbol 0xFF 
N	0x38, 0xFC, 0xEC, 0xEC, 0xFC, 0xFC, 0x00, 0x03, 
N	0x03, 0x01, 0x00, 0x03, 0x03, 0x00,
N
N};
N
N
N
Nstatic const uint8_t font_h11_code_table[166] = 
N{	
N	0x20,
N	0x21,
N	0x22,
N	0x23,
N	0x24,
N	0x25,
N	0x26,
N	0x27,
N	0x28,
N	0x29,
N	0x2A,
N	0x2B,
N	0x2C,
N	0x2D,
N	0x2E,
N	0x2F,
N	0x30,
N	0x31,
N	0x32,
N	0x33,
N	0x34,
N	0x35,
N	0x36,
N	0x37,
N	0x38,
N	0x39,
N	0x3A,
N	0x3B,
N	0x3C,
N	0x3D,
N	0x3E,
N	0x3F,
N	0x40,
N	0x41,
N	0x42,
N	0x43,
N	0x44,
N	0x45,
N	0x46,
N	0x47,
N	0x48,
N	0x49,
N	0x4A,
N	0x4B,
N	0x4C,
N	0x4D,
N	0x4E,
N	0x4F,
N	0x50,
N	0x51,
N	0x52,
N	0x53,
N	0x54,
N	0x55,
N	0x56,
N	0x57,
N	0x58,
N	0x59,
N	0x5A,
N	0x5B,
N	0x5C,
N	0x5D,
N	0x5E,
N	0x5F,
N	0x60,
N	0x61,
N	0x62,
N	0x63,
N	0x64,
N	0x65,
N	0x66,
N	0x67,
N	0x68,
N	0x69,
N	0x6A,
N	0x6B,
N	0x6C,
N	0x6D,
N	0x6E,
N	0x6F,
N	0x70,
N	0x71,
N	0x72,
N	0x73,
N	0x74,
N	0x75,
N	0x76,
N	0x77,
N	0x78,
N	0x79,
N	0x7A,
N	0x7B,
N	0x7C,
N	0x7D,
N	0x7E,
N	0x80,
N	0x81,
N	0x82,
N	0xA8,
N	0xA9,
N	0xB0,
N	0xB8,
N	0xC0,
N	0xC1,
N	0xC2,
N	0xC3,
N	0xC4,
N	0xC5,
N	0xC6,
N	0xC7,
N	0xC8,
N	0xC9,
N	0xCA,
N	0xCB,
N	0xCC,
N	0xCD,
N	0xCE,
N	0xCF,
N	0xD0,
N	0xD1,
N	0xD2,
N	0xD3,
N	0xD4,
N	0xD5,
N	0xD6,
N	0xD7,
N	0xD8,
N	0xD9,
N	0xDA,
N	0xDB,
N	0xDC,
N	0xDD,
N	0xDE,
N	0xDF,
N	0xE0,
N	0xE1,
N	0xE2,
N	0xE3,
N	0xE4,
N	0xE5,
N	0xE6,
N	0xE7,
N	0xE8,
N	0xE9,
N	0xEA,
N	0xEB,
N	0xEC,
N	0xED,
N	0xEE,
N	0xEF,
N	0xF0,
N	0xF1,
N	0xF2,
N	0xF3,
N	0xF4,
N	0xF5,
N	0xF6,
N	0xF7,
N	0xF8,
N	0xF9,
N	0xFA,
N	0xFB,
N	0xFC,
N	0xFD,
N	0xFE,
N	0xFF,
N};
N
Nstatic const uint8_t font_h11_width_table[166] = 
N{	
N	8,
N	3,
N	6,
N	8,
N	8,
N	8,
N	8,
N	3,
N	4,
N	4,
N	8,
N	7,
N	3,
N	7,
N	3,
N	7,
N	8,
N	6,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	3,
N	3,
N	7,
N	8,
N	7,
N	7,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	5,
N	7,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	7,
N	8,
N	8,
N	8,
N	8,
N	7,
N	8,
N	5,
N	7,
N	5,
N	7,
N	8,
N	5,
N	7,
N	7,
N	7,
N	7,
N	7,
N	6,
N	7,
N	7,
N	3,
N	6,
N	7,
N	3,
N	8,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	8,
N	7,
N	7,
N	7,
N	5,
N	3,
N	5,
N	7,
N	8,
N	8,
N	8,
N	8,
N	8,
N	6,
N	7,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	7,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	8,
N	7,
N	8,
N	8,
N	8,
N	7,
N	7,
N	7,
N	7,
N	8,
N	7,
N	8,
N	7,
N	7,
N	7,
N	7,
N	7,
N	8,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	7,
N	8,
N	7,
N	8,
N	7,
N	8,
N	8,
N	8,
N	8,
N	7,
N	7,
N	8,
N	7,
N};
N
Nstatic const uint16_t font_h11_offset_table[166] = 
N{	
N	0,
N	16,
N	22,
N	34,
N	50,
N	66,
N	82,
N	98,
N	104,
N	112,
N	120,
N	136,
N	150,
N	156,
N	170,
N	176,
N	190,
N	206,
N	218,
N	234,
N	250,
N	266,
N	282,
N	298,
N	314,
N	330,
N	346,
N	352,
N	358,
N	372,
N	388,
N	402,
N	416,
N	432,
N	448,
N	464,
N	480,
N	496,
N	512,
N	528,
N	544,
N	560,
N	570,
N	584,
N	600,
N	616,
N	632,
N	648,
N	664,
N	680,
N	696,
N	712,
N	728,
N	742,
N	758,
N	774,
N	790,
N	806,
N	820,
N	836,
N	846,
N	860,
N	870,
N	884,
N	900,
N	910,
N	924,
N	938,
N	952,
N	966,
N	980,
N	992,
N	1006,
N	1020,
N	1026,
N	1038,
N	1052,
N	1058,
N	1074,
N	1088,
N	1102,
N	1116,
N	1130,
N	1144,
N	1158,
N	1172,
N	1186,
N	1200,
N	1216,
N	1230,
N	1244,
N	1258,
N	1268,
N	1274,
N	1284,
N	1298,
N	1314,
N	1330,
N	1346,
N	1362,
N	1378,
N	1390,
N	1404,
N	1420,
N	1436,
N	1452,
N	1468,
N	1484,
N	1500,
N	1516,
N	1532,
N	1548,
N	1564,
N	1580,
N	1596,
N	1612,
N	1628,
N	1644,
N	1660,
N	1676,
N	1692,
N	1706,
N	1722,
N	1738,
N	1754,
N	1770,
N	1786,
N	1802,
N	1818,
N	1834,
N	1850,
N	1864,
N	1880,
N	1896,
N	1912,
N	1926,
N	1940,
N	1954,
N	1968,
N	1984,
N	1998,
N	2014,
N	2028,
N	2042,
N	2056,
N	2070,
N	2084,
N	2100,
N	2114,
N	2128,
N	2142,
N	2156,
N	2170,
N	2184,
N	2198,
N	2214,
N	2228,
N	2244,
N	2258,
N	2274,
N	2290,
N	2306,
N	2322,
N	2336,
N	2350,
N	2366,
N};
N
N
N/*
N    uint8_t height;                     // font chars height
N    uint8_t width;                      // actual for monospaced, ignored for variable-width fonts
N    uint8_t charCount;                  // Total number of chars in the font
N    uint8_t spacing;                    // Additional space between chars
N    uint8_t bytesPerChar;               // Actual for monospaced, ignored for variable-length fonts
N    uint8_t firstCharCode;              // Used if there is no charTable - specifies first avaliable char code in the font.
N    const uint8_t *codeTable;           // Used if not all symbols are prensent in the font. Otherwise must be 0.
N    const uint8_t *widthTable;          // Used if font is not monospaced. Otherwise must be 0.
N    const uint16_t *offsetTable;        // 
N    const uint8_t *data;                // Font data - contiguous byte array
N	*/
N	
Nconst tFont font_h11 = 
N{
N	11,          // font height
N	0,                      // font width - not used with variable width
N	166,          // total chars count
N	0,                      // spacing
N	0,                      // bytesPerChar - not used with variable width
N	0,                      // firstCharCode - not used with char table
N	font_h11_code_table,    // character description table
N	font_h11_width_table,	// character width table
N	font_h11_offset_table,	// offset table
N	font_h11_data           // font data
N};
N
N
