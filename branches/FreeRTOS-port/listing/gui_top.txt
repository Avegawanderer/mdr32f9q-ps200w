; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\gui_top.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\gui_top.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\gui_top.crf src\gui_top.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  gui_process_buttons PROC
;;;71     
;;;72     static void gui_process_buttons(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;73     {
;;;74     	conveter_message_t msg;
;;;75     	msg.type = 0;
000002  2200              MOVS     r2,#0
000004  9200              STR      r2,[sp,#0]
;;;76     	
;;;77     	//-------------------------------------------//
;;;78     	// Switch regulation parameter
;;;79     	
;;;80     	if (buttons.action_down & BTN_ENCODER)
000006  48c0              LDR      r0,|L1.776|
;;;81     	{
;;;82     		(param==2) ? param=0 : param++;
000008  49c0              LDR      r1,|L1.780|
00000a  8840              LDRH     r0,[r0,#2]            ;80  ; buttons
00000c  06c0              LSLS     r0,r0,#27             ;80
00000e  d504              BPL      |L1.26|
000010  7808              LDRB     r0,[r1,#0]  ; param
000012  2802              CMP      r0,#2
000014  d015              BEQ      |L1.66|
000016  1c40              ADDS     r0,r0,#1
000018  7008              STRB     r0,[r1,#0]
                  |L1.26|
;;;83     		
;;;84     	}
;;;85     		
;;;86     		
;;;87     	//-------------------------------------------//
;;;88     	// Apply regulation
;;;89     		
;;;90     	if (encoder_delta)
00001a  48bd              LDR      r0,|L1.784|
00001c  f9b03000          LDRSH    r3,[r0,#0]  ; encoder_delta
000020  b31b              CBZ      r3,|L1.106|
;;;91     	switch (param)
000022  7808              LDRB     r0,[r1,#0]  ; param
;;;92     	{
;;;93     		case 0:
;;;94     			msg.type = CONVERTER_SET_VOLTAGE;
;;;95     			msg.data_a = regulation_setting_p->set_voltage + encoder_delta*500;
000024  49bb              LDR      r1,|L1.788|
000026  680a              LDR      r2,[r1,#0]            ;90
000028  49b9              LDR      r1,|L1.784|
00002a  f9b11000          LDRSH    r1,[r1,#0]            ;90
00002e  eb010441          ADD      r4,r1,r1,LSL #1
000032  ebc411c1          RSB      r1,r4,r1,LSL #7
000036  b130              CBZ      r0,|L1.70|
000038  2801              CMP      r0,#1                 ;91
00003a  d00b              BEQ      |L1.84|
00003c  2802              CMP      r0,#2                 ;91
00003e  d117              BNE      |L1.112|
000040  e00f              B        |L1.98|
                  |L1.66|
000042  700a              STRB     r2,[r1,#0]            ;82
000044  e7e9              B        |L1.26|
                  |L1.70|
000046  2007              MOVS     r0,#7                 ;94
000048  9000              STR      r0,[sp,#0]            ;94
00004a  8850              LDRH     r0,[r2,#2]
00004c  eb000081          ADD      r0,r0,r1,LSL #2
000050  9001              STR      r0,[sp,#4]
;;;96     			break;
000052  e00d              B        |L1.112|
                  |L1.84|
;;;97     		case 1:
;;;98     			msg.type = CONVERTER_SET_CURRENT;
000054  2008              MOVS     r0,#8
000056  9000              STR      r0,[sp,#0]
;;;99     			msg.data_a = regulation_setting_p->set_current + encoder_delta*500;
000058  8a50              LDRH     r0,[r2,#0x12]
00005a  eb000081          ADD      r0,r0,r1,LSL #2
00005e  9001              STR      r0,[sp,#4]
;;;100    			break;
000060  e006              B        |L1.112|
                  |L1.98|
;;;101    		case 2:
;;;102    			if (encoder_delta>0)
000062  2b00              CMP      r3,#0
000064  dd02              BLE      |L1.108|
;;;103    				msg.type = SET_CURRENT_LIMIT_40A;
000066  2006              MOVS     r0,#6
000068  9000              STR      r0,[sp,#0]
                  |L1.106|
00006a  e001              B        |L1.112|
                  |L1.108|
;;;104    			else
;;;105    				msg.type = SET_CURRENT_LIMIT_20A;
00006c  2005              MOVS     r0,#5
00006e  9000              STR      r0,[sp,#0]
                  |L1.112|
;;;106    			break;
;;;107    	}
;;;108    	if (msg.type)
000070  9800              LDR      r0,[sp,#0]
000072  2800              CMP      r0,#0
000074  d006              BEQ      |L1.132|
;;;109    		xQueueSendToBack(xQueueConverter, &msg, 0);
000076  48a8              LDR      r0,|L1.792|
000078  2300              MOVS     r3,#0
00007a  461a              MOV      r2,r3
00007c  4669              MOV      r1,sp
00007e  6800              LDR      r0,[r0,#0]  ; xQueueConverter
000080  f7fffffe          BL       xQueueGenericSend
                  |L1.132|
;;;110    	
;;;111    }
000084  bd3e              POP      {r1-r5,pc}
;;;112    
                          ENDP

                  gui_update_all PROC
;;;113    
;;;114    static void gui_update_all(void)
000086  b5f0              PUSH     {r4-r7,lr}
;;;115    {
000088  b08d              SUB      sp,sp,#0x34
;;;116    	char str1[20] =	"----------";
00008a  2214              MOVS     r2,#0x14
00008c  49a3              LDR      r1,|L1.796|
00008e  a808              ADD      r0,sp,#0x20
000090  f7fffffe          BL       __aeabi_memcpy4
;;;117    	char str2[20] =	"----------";
000094  2214              MOVS     r2,#0x14
000096  49a1              LDR      r1,|L1.796|
000098  3114              ADDS     r1,r1,#0x14
00009a  a803              ADD      r0,sp,#0xc
00009c  f7fffffe          BL       __aeabi_memcpy4
;;;118    		//---------------------------------------------------//
;;;119    		// Graphical representation
;;;120    		//---------------------------------------------------//
;;;121    			
;;;122    		
;;;123    		// Clear LCD buffers
;;;124    		LcdFillBuffer(lcd0_buffer,0x00);
0000a0  2100              MOVS     r1,#0
0000a2  489f              LDR      r0,|L1.800|
0000a4  f7fffffe          BL       LcdFillBuffer
;;;125    		LcdFillBuffer(lcd1_buffer,0x00);
0000a8  2100              MOVS     r1,#0
0000aa  489e              LDR      r0,|L1.804|
0000ac  f7fffffe          BL       LcdFillBuffer
;;;126    			
;;;127    		
;;;128    		//------------------------//
;;;129    		// Voltage section
;;;130    		//------------------------//
;;;131    	  
;;;132    	    // Measured 
;;;133    		sprintf(str1,"%5.2fV",(float)(voltage_adc)/1000 );
0000b0  489d              LDR      r0,|L1.808|
0000b2  8800              LDRH     r0,[r0,#0]  ; voltage_adc
0000b4  f7fffffe          BL       __aeabi_ui2f
0000b8  4f9c              LDR      r7,|L1.812|
0000ba  4639              MOV      r1,r7
0000bc  f7fffffe          BL       __aeabi_fdiv
0000c0  f7fffffe          BL       __aeabi_f2d
0000c4  4602              MOV      r2,r0
0000c6  460b              MOV      r3,r1
0000c8  a199              ADR      r1,|L1.816|
0000ca  a808              ADD      r0,sp,#0x20
0000cc  f7fffffe          BL       __2sprintf
;;;134    		LcdPutSpecialStr(0,0,(uint8_t*)str1,(tSpecialFont*)&font_32x19,lcd0_buffer);
0000d0  4c93              LDR      r4,|L1.800|
0000d2  2100              MOVS     r1,#0
0000d4  4b98              LDR      r3,|L1.824|
0000d6  aa08              ADD      r2,sp,#0x20
0000d8  4608              MOV      r0,r1
0000da  9400              STR      r4,[sp,#0]
0000dc  f7fffffe          BL       LcdPutSpecialStr
;;;135    	  
;;;136    		// Set
;;;137    		sprintf(str2,"%5.2fV",(float)(regulation_setting_p->set_voltage)/1000 );
0000e0  4d8c              LDR      r5,|L1.788|
0000e2  6828              LDR      r0,[r5,#0]  ; regulation_setting_p
0000e4  8840              LDRH     r0,[r0,#2]
0000e6  f7fffffe          BL       __aeabi_ui2f
0000ea  4639              MOV      r1,r7
0000ec  f7fffffe          BL       __aeabi_fdiv
0000f0  f7fffffe          BL       __aeabi_f2d
0000f4  4602              MOV      r2,r0
0000f6  460b              MOV      r3,r1
0000f8  a18d              ADR      r1,|L1.816|
0000fa  a803              ADD      r0,sp,#0xc
0000fc  f7fffffe          BL       __2sprintf
;;;138    		LcdPutNormalStr(0,38,"SET:",(tNormalFont*)&font_8x12,lcd0_buffer);
000100  4b8e              LDR      r3,|L1.828|
000102  a28f              ADR      r2,|L1.832|
000104  2126              MOVS     r1,#0x26
000106  2000              MOVS     r0,#0
000108  9400              STR      r4,[sp,#0]
00010a  f7fffffe          BL       LcdPutNormalStr
;;;139    		LcdPutSpecialStr(32,33,(uint8_t*)str2,(tSpecialFont*)&font_16x10,lcd0_buffer);
00010e  4b8e              LDR      r3,|L1.840|
000110  aa03              ADD      r2,sp,#0xc
000112  2121              MOVS     r1,#0x21
000114  2020              MOVS     r0,#0x20
000116  9400              STR      r4,[sp,#0]
000118  f7fffffe          BL       LcdPutSpecialStr
;;;140    			
;;;141    			
;;;142    			
;;;143    		//------------------------//
;;;144    		// Current section
;;;145    		//------------------------//
;;;146    		
;;;147    		
;;;148    		// Measured 
;;;149    		sprintf(str1,"%5.2fA",(float)(current_adc)/1000 );
00011c  488b              LDR      r0,|L1.844|
00011e  8800              LDRH     r0,[r0,#0]  ; current_adc
000120  f7fffffe          BL       __aeabi_ui2f
000124  4639              MOV      r1,r7
000126  f7fffffe          BL       __aeabi_fdiv
00012a  f7fffffe          BL       __aeabi_f2d
00012e  4602              MOV      r2,r0
000130  460b              MOV      r3,r1
000132  a187              ADR      r1,|L1.848|
000134  a808              ADD      r0,sp,#0x20
000136  f7fffffe          BL       __2sprintf
;;;150    		LcdPutSpecialStr(0,0,(uint8_t*)str1,(tSpecialFont*)&font_32x19,lcd1_buffer);
00013a  4e7a              LDR      r6,|L1.804|
00013c  2100              MOVS     r1,#0
00013e  4b7e              LDR      r3,|L1.824|
000140  aa08              ADD      r2,sp,#0x20
000142  4608              MOV      r0,r1
000144  9600              STR      r6,[sp,#0]
000146  f7fffffe          BL       LcdPutSpecialStr
;;;151    		
;;;152    		// Set
;;;153    		sprintf(str2,"%5.2fA",(float)(regulation_setting_p->set_current)/1000 );
00014a  6828              LDR      r0,[r5,#0]  ; regulation_setting_p
00014c  8a40              LDRH     r0,[r0,#0x12]
00014e  f7fffffe          BL       __aeabi_ui2f
000152  4639              MOV      r1,r7
000154  f7fffffe          BL       __aeabi_fdiv
000158  f7fffffe          BL       __aeabi_f2d
00015c  4602              MOV      r2,r0
00015e  460b              MOV      r3,r1
000160  a17b              ADR      r1,|L1.848|
000162  a803              ADD      r0,sp,#0xc
000164  f7fffffe          BL       __2sprintf
;;;154    		LcdPutNormalStr(0,38,"SET:",(tNormalFont*)&font_8x12,lcd1_buffer);
000168  4b74              LDR      r3,|L1.828|
00016a  a275              ADR      r2,|L1.832|
00016c  2126              MOVS     r1,#0x26
00016e  2000              MOVS     r0,#0
000170  9600              STR      r6,[sp,#0]
000172  f7fffffe          BL       LcdPutNormalStr
;;;155    		LcdPutSpecialStr(32,33,(uint8_t*)str2,(tSpecialFont*)&font_16x10,lcd1_buffer);
000176  4b74              LDR      r3,|L1.840|
000178  aa03              ADD      r2,sp,#0xc
00017a  2121              MOVS     r1,#0x21
00017c  2020              MOVS     r0,#0x20
00017e  9600              STR      r6,[sp,#0]
000180  f7fffffe          BL       LcdPutSpecialStr
;;;156    
;;;157    		
;;;158    			
;;;159    		
;;;160    		//------------------------//
;;;161    		// Frames LCD0
;;;162    		//------------------------//
;;;163    	
;;;164    		LcdPutHorLine(0,55,LCD_XSIZE,PIXEL_ON,lcd0_buffer);
000184  2301              MOVS     r3,#1
000186  2260              MOVS     r2,#0x60
000188  2137              MOVS     r1,#0x37
00018a  2000              MOVS     r0,#0
00018c  9400              STR      r4,[sp,#0]
00018e  f7fffffe          BL       LcdPutHorLine
;;;165    		LcdPutVertLine(48,56,13,PIXEL_ON,lcd0_buffer);
000192  2301              MOVS     r3,#1
000194  220d              MOVS     r2,#0xd
000196  2138              MOVS     r1,#0x38
000198  2030              MOVS     r0,#0x30
00019a  9400              STR      r4,[sp,#0]
00019c  f7fffffe          BL       LcdPutVertLine
;;;166    		
;;;167    		sprintf(str1,"%2.0f%cC",(float)converter_temp_celsius,0xb0); //0xb7 );
0001a0  486d              LDR      r0,|L1.856|
0001a2  f9b00000          LDRSH    r0,[r0,#0]  ; converter_temp_celsius
0001a6  f7fffffe          BL       __aeabi_i2d
0001aa  22b0              MOVS     r2,#0xb0
0001ac  9200              STR      r2,[sp,#0]
0001ae  4602              MOV      r2,r0
0001b0  460b              MOV      r3,r1
0001b2  a16a              ADR      r1,|L1.860|
0001b4  a808              ADD      r0,sp,#0x20
0001b6  f7fffffe          BL       __2sprintf
;;;168    		LcdPutNormalStr(63,57,(uint8_t*)str1,(tNormalFont*)&font_8x12,lcd0_buffer);
0001ba  4b60              LDR      r3,|L1.828|
0001bc  aa08              ADD      r2,sp,#0x20
0001be  2139              MOVS     r1,#0x39
0001c0  203f              MOVS     r0,#0x3f
0001c2  9400              STR      r4,[sp,#0]
0001c4  f7fffffe          BL       LcdPutNormalStr
;;;169    		
;;;170    		if (regulation_setting_p->CHANNEL == CHANNEL_5V)
0001c8  6828              LDR      r0,[r5,#0]  ; regulation_setting_p
0001ca  7800              LDRB     r0,[r0,#0]
0001cc  2801              CMP      r0,#1
0001ce  d044              BEQ      |L1.602|
;;;171    			LcdPutNormalStr(0,57,"Ch. 5V",(tNormalFont*)&font_8x12,lcd0_buffer);
;;;172    		else
;;;173    			LcdPutNormalStr(0,57,"Ch.12V",(tNormalFont*)&font_8x12,lcd0_buffer);
0001d0  4b5a              LDR      r3,|L1.828|
0001d2  a265              ADR      r2,|L1.872|
0001d4  2139              MOVS     r1,#0x39
0001d6  2000              MOVS     r0,#0
0001d8  9400              STR      r4,[sp,#0]
0001da  f7fffffe          BL       LcdPutNormalStr
                  |L1.478|
;;;174    		
;;;175    		
;;;176    		
;;;177    		
;;;178    		
;;;179    		//------------------------//
;;;180    		// Frames LCD1
;;;181    		//------------------------//
;;;182    
;;;183    		LcdPutHorLine(0,55,LCD_XSIZE,PIXEL_ON,lcd1_buffer);
0001de  2301              MOVS     r3,#1
0001e0  2260              MOVS     r2,#0x60
0001e2  2137              MOVS     r1,#0x37
0001e4  2000              MOVS     r0,#0
0001e6  9600              STR      r6,[sp,#0]
0001e8  f7fffffe          BL       LcdPutHorLine
;;;184    		LcdPutVertLine(42,56,13,PIXEL_ON,lcd1_buffer);
0001ec  2301              MOVS     r3,#1
0001ee  220d              MOVS     r2,#0xd
0001f0  2138              MOVS     r1,#0x38
0001f2  202a              MOVS     r0,#0x2a
0001f4  9600              STR      r6,[sp,#0]
0001f6  f7fffffe          BL       LcdPutVertLine
;;;185    		
;;;186    		
;;;187    		if (regulation_setting_p -> current_limit == CURRENT_LIM_HIGH)
0001fa  6828              LDR      r0,[r5,#0]  ; regulation_setting_p
0001fc  7c40              LDRB     r0,[r0,#0x11]
0001fe  2801              CMP      r0,#1
000200  d033              BEQ      |L1.618|
;;;188    			LcdPutNormalStr(2,57,"40A",(tNormalFont*)&font_8x12,lcd1_buffer);
;;;189    		else
;;;190    			LcdPutNormalStr(2,57,"20A",(tNormalFont*)&font_8x12,lcd1_buffer);
000202  4b4e              LDR      r3,|L1.828|
000204  a25a              ADR      r2,|L1.880|
000206  2139              MOVS     r1,#0x39
000208  2002              MOVS     r0,#2
00020a  9600              STR      r6,[sp,#0]
00020c  f7fffffe          BL       LcdPutNormalStr
                  |L1.528|
;;;191    		
;;;192    		sprintf(str1,"%5.1fW",(float)(power_adc)/1000 );
000210  4858              LDR      r0,|L1.884|
000212  6800              LDR      r0,[r0,#0]  ; power_adc
000214  f7fffffe          BL       __aeabi_ui2f
000218  4639              MOV      r1,r7
00021a  f7fffffe          BL       __aeabi_fdiv
00021e  f7fffffe          BL       __aeabi_f2d
000222  4602              MOV      r2,r0
000224  460b              MOV      r3,r1
000226  a154              ADR      r1,|L1.888|
000228  a808              ADD      r0,sp,#0x20
00022a  f7fffffe          BL       __2sprintf
;;;193    		LcdPutNormalStr(47,57,(uint8_t*)str1,(tNormalFont*)&font_8x12,lcd1_buffer);
00022e  4b43              LDR      r3,|L1.828|
000230  aa08              ADD      r2,sp,#0x20
000232  2139              MOVS     r1,#0x39
000234  202f              MOVS     r0,#0x2f
000236  9600              STR      r6,[sp,#0]
000238  f7fffffe          BL       LcdPutNormalStr
;;;194    		
;;;195    		
;;;196    	
;;;197    		//------------------------//
;;;198    		// Current or voltage regulation
;;;199    		//	selection
;;;200    		//------------------------//
;;;201    		str1[0] = '<';
00023c  203c              MOVS     r0,#0x3c
00023e  f88d0020          STRB     r0,[sp,#0x20]
;;;202    		str1[1] = '\0';
000242  2000              MOVS     r0,#0
000244  f88d0021          STRB     r0,[sp,#0x21]
;;;203    		switch(param)
000248  4830              LDR      r0,|L1.780|
;;;204    			{
;;;205    				case 0:
;;;206    				  //LcdPutNormalStr(88,38,(uint8_t*)str1,(tNormalFont*)&font_8x12,lcd0_buffer);
;;;207    				  LcdPutImage((uint8_t*)imgSelect0.data,89,38,imgSelect0.width,imgSelect0.height,lcd0_buffer);
00024a  494d              LDR      r1,|L1.896|
00024c  7800              LDRB     r0,[r0,#0]            ;203  ; param
00024e  b1a0              CBZ      r0,|L1.634|
000250  2801              CMP      r0,#1                 ;203
000252  d01c              BEQ      |L1.654|
000254  2802              CMP      r0,#2                 ;203
000256  d12d              BNE      |L1.692|
000258  e023              B        |L1.674|
                  |L1.602|
00025a  4b38              LDR      r3,|L1.828|
00025c  a249              ADR      r2,|L1.900|
00025e  2139              MOVS     r1,#0x39              ;171
000260  2000              MOVS     r0,#0                 ;171
000262  9400              STR      r4,[sp,#0]            ;171
000264  f7fffffe          BL       LcdPutNormalStr
000268  e7b9              B        |L1.478|
                  |L1.618|
00026a  4b34              LDR      r3,|L1.828|
00026c  a247              ADR      r2,|L1.908|
00026e  2139              MOVS     r1,#0x39              ;188
000270  2002              MOVS     r0,#2                 ;188
000272  9600              STR      r6,[sp,#0]            ;188
000274  f7fffffe          BL       LcdPutNormalStr
000278  e7ca              B        |L1.528|
                  |L1.634|
00027a  7848              LDRB     r0,[r1,#1]  ; imgSelect0
00027c  e9cd0400          STRD     r0,r4,[sp,#0]
000280  780b              LDRB     r3,[r1,#0]  ; imgSelect0
000282  6848              LDR      r0,[r1,#4]  ; imgSelect0
000284  2226              MOVS     r2,#0x26
000286  2159              MOVS     r1,#0x59
000288  f7fffffe          BL       LcdPutImage
;;;208    				  break;
00028c  e012              B        |L1.692|
                  |L1.654|
;;;209    				case 1:
;;;210    				  //LcdPutNormalStr(88,38,(uint8_t*)str1,(tNormalFont*)&font_8x12,lcd1_buffer);
;;;211    				  LcdPutImage((uint8_t*)imgSelect0.data,89,38,imgSelect0.width,imgSelect0.height,lcd1_buffer);
00028e  7848              LDRB     r0,[r1,#1]  ; imgSelect0
000290  e9cd0600          STRD     r0,r6,[sp,#0]
000294  780b              LDRB     r3,[r1,#0]  ; imgSelect0
000296  6848              LDR      r0,[r1,#4]  ; imgSelect0
000298  2226              MOVS     r2,#0x26
00029a  2159              MOVS     r1,#0x59
00029c  f7fffffe          BL       LcdPutImage
;;;212    				  break;
0002a0  e008              B        |L1.692|
                  |L1.674|
;;;213    				case 2:
;;;214    					//LcdPutNormalStr(33,57,(uint8_t*)str1,(tNormalFont*)&font_8x12,lcd1_buffer);
;;;215    				  LcdPutImage((uint8_t*)imgSelect0.data,35,56,imgSelect0.width,imgSelect0.height,lcd1_buffer);
0002a2  7848              LDRB     r0,[r1,#1]  ; imgSelect0
0002a4  e9cd0600          STRD     r0,r6,[sp,#0]
0002a8  780b              LDRB     r3,[r1,#0]  ; imgSelect0
0002aa  6848              LDR      r0,[r1,#4]  ; imgSelect0
0002ac  2238              MOVS     r2,#0x38
0002ae  2123              MOVS     r1,#0x23
0002b0  f7fffffe          BL       LcdPutImage
                  |L1.692|
;;;216    			}		
;;;217    			
;;;218    			
;;;219    		LcdUpdateByCore(LCD0,lcd0_buffer);
0002b4  491a              LDR      r1,|L1.800|
0002b6  2001              MOVS     r0,#1
0002b8  f7fffffe          BL       LcdUpdateByCore
;;;220    		//vTaskDelay(1);
;;;221    		LcdUpdateByCore(LCD1,lcd1_buffer);
0002bc  4919              LDR      r1,|L1.804|
0002be  2002              MOVS     r0,#2
0002c0  f7fffffe          BL       LcdUpdateByCore
;;;222    }
0002c4  b00d              ADD      sp,sp,#0x34
0002c6  bdf0              POP      {r4-r7,pc}
;;;223    
                          ENDP

                  vTaskGUI PROC
;;;35     
;;;36     void vTaskGUI(void *pvParameters) 
0002c8  b508              PUSH     {r3,lr}
;;;37     {
;;;38     	
;;;39     	
;;;40     	uint32_t msg;
;;;41     	
;;;42     	// Initialize
;;;43     	xQueueGUI = xQueueCreate( 5, sizeof( uint32_t ) );		// GUI queue can contain 5 elements of type uint32_t
0002ca  2200              MOVS     r2,#0
0002cc  2104              MOVS     r1,#4
0002ce  2005              MOVS     r0,#5
0002d0  f7fffffe          BL       xQueueGenericCreate
0002d4  4c0d              LDR      r4,|L1.780|
0002d6  6060              STR      r0,[r4,#4]  ; xQueueGUI
;;;44     	if( xQueueGUI == 0 )
0002d8  b110              CBZ      r0,|L1.736|
;;;45     	{
;;;46     		// Queue was not created and must not be used.
;;;47     		while(1);
;;;48     	}
;;;49     	
;;;50     	
;;;51     	
;;;52     	while(1)
;;;53     	{
;;;54     		xQueueReceive(xQueueGUI, &msg, portMAX_DELAY);
0002da  f04f35ff          MOV      r5,#0xffffffff
;;;55     		switch (msg)
;;;56     		{
;;;57     			case GUI_UPDATE_ALL:
;;;58     				gui_update_all();
;;;59     			
;;;60     				break;
0002de  e008              B        |L1.754|
                  |L1.736|
0002e0  e7fe              B        |L1.736|
                  |L1.738|
0002e2  2801              CMP      r0,#1                 ;55
0002e4  d105              BNE      |L1.754|
0002e6  e002              B        |L1.750|
                  |L1.744|
0002e8  f7fffffe          BL       gui_update_all
0002ec  e001              B        |L1.754|
                  |L1.750|
;;;61     			case GUI_PROCESS_BUTTONS:
;;;62     				gui_process_buttons();
0002ee  f7fffffe          BL       gui_process_buttons
                  |L1.754|
0002f2  2300              MOVS     r3,#0                 ;54
0002f4  462a              MOV      r2,r5                 ;54
0002f6  4669              MOV      r1,sp                 ;54
0002f8  6860              LDR      r0,[r4,#4]            ;54  ; xQueueGUI
0002fa  f7fffffe          BL       xQueueGenericReceive
0002fe  9800              LDR      r0,[sp,#0]            ;55
000300  2800              CMP      r0,#0                 ;55
000302  d0f1              BEQ      |L1.744|
000304  e7ed              B        |L1.738|
;;;63     				
;;;64     				break;
;;;65     		}
;;;66     		
;;;67     	}
;;;68     	
;;;69     }
;;;70     
                          ENDP

000306  0000              DCW      0x0000
                  |L1.776|
                          DCD      buttons
                  |L1.780|
                          DCD      ||.data||
                  |L1.784|
                          DCD      encoder_delta
                  |L1.788|
                          DCD      regulation_setting_p
                  |L1.792|
                          DCD      xQueueConverter
                  |L1.796|
                          DCD      ||.constdata||
                  |L1.800|
                          DCD      lcd0_buffer
                  |L1.804|
                          DCD      lcd1_buffer
                  |L1.808|
                          DCD      voltage_adc
                  |L1.812|
                          DCD      0x447a0000
                  |L1.816|
000330  25352e32          DCB      "%5.2fV",0
000334  665600  
000337  00                DCB      0
                  |L1.824|
                          DCD      font_32x19
                  |L1.828|
                          DCD      font_8x12
                  |L1.832|
000340  5345543a          DCB      "SET:",0
000344  00      
000345  00                DCB      0
000346  00                DCB      0
000347  00                DCB      0
                  |L1.840|
                          DCD      font_16x10
                  |L1.844|
                          DCD      current_adc
                  |L1.848|
000350  25352e32          DCB      "%5.2fA",0
000354  664100  
000357  00                DCB      0
                  |L1.856|
                          DCD      converter_temp_celsius
                  |L1.860|
00035c  25322e30          DCB      "%2.0f%cC",0
000360  66256343
000364  00      
000365  00                DCB      0
000366  00                DCB      0
000367  00                DCB      0
                  |L1.872|
000368  43682e31          DCB      "Ch.12V",0
00036c  325600  
00036f  00                DCB      0
                  |L1.880|
000370  32304100          DCB      "20A",0
                  |L1.884|
                          DCD      power_adc
                  |L1.888|
000378  25352e31          DCB      "%5.1fW",0
00037c  665700  
00037f  00                DCB      0
                  |L1.896|
                          DCD      imgSelect0
                  |L1.900|
000384  43682e20          DCB      "Ch. 5V",0
000388  355600  
00038b  00                DCB      0
                  |L1.908|
00038c  34304100          DCB      "40A",0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000004  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000008  2d2d0000          DCB      0x2d,0x2d,0x00,0x00
                          %        8
000014  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
000018  2d2d2d2d          DCB      0x2d,0x2d,0x2d,0x2d
00001c  2d2d0000          DCB      0x2d,0x2d,0x00,0x00
                          %        8

                          AREA ||.data||, DATA, ALIGN=2

                  param
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  xQueueGUI
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\gui_top.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_gui_top_c_param____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_gui_top_c_param____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_gui_top_c_param____REVSH|
#line 130
|__asm___9_gui_top_c_param____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
