; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\systick.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\systick.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\systick.crf src\systick.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vApplicationTickHook PROC
;;;35     //-----------------------------------------------------------------//
;;;36     void vApplicationTickHook( void )
000000  b57c              PUSH     {r2-r6,lr}
;;;37     {
;;;38     	static uint32_t tmr_gui_update = GUI_UPDATE_INTERVAL;
;;;39     	static uint32_t tmr_converter_tick = CONVERTER_TICK_INTERVAL;
;;;40     	static uint32_t tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
;;;41     	portBASE_TYPE xHigherPriorityTaskWokenByPost;
;;;42     	uint32_t msg;
;;;43     	// Time profiling
;;;44     	uint32_t time_mark = DWT_Get();
000002  f7fffffe          BL       DWT_Get
000006  4605              MOV      r5,r0
;;;45     	uint32_t ticks_count;
;;;46     		
;;;47     	// We have not woken a task at the start of the ISR.
;;;48     	xHigherPriorityTaskWokenByPost = pdFALSE;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;49     	
;;;50     	if (--tmr_gui_update == 0)
00000c  484b              LDR      r0,|L1.316|
00000e  6800              LDR      r0,[r0,#0]  ; tmr_gui_update
000010  1e40              SUBS     r0,r0,#1
000012  494a              LDR      r1,|L1.316|
000014  6008              STR      r0,[r1,#0]  ; tmr_gui_update
000016  d10a              BNE      |L1.46|
;;;51     	{
;;;52     		msg = GUI_UPDATE_ALL;
000018  9000              STR      r0,[sp,#0]
;;;53     		xQueueSendToBackFromISR(xQueueGUI, &msg, &xHigherPriorityTaskWokenByPost);
00001a  2300              MOVS     r3,#0
00001c  aa01              ADD      r2,sp,#4
00001e  4669              MOV      r1,sp
000020  4847              LDR      r0,|L1.320|
000022  6800              LDR      r0,[r0,#0]  ; xQueueGUI
000024  f7fffffe          BL       xQueueGenericSendFromISR
;;;54     		tmr_gui_update = GUI_UPDATE_INTERVAL;
000028  2019              MOVS     r0,#0x19
00002a  4944              LDR      r1,|L1.316|
00002c  6008              STR      r0,[r1,#0]  ; tmr_gui_update
                  |L1.46|
;;;55     	}
;;;56     	
;;;57     	if (--tmr_converter_tick == 0)
00002e  4845              LDR      r0,|L1.324|
000030  6800              LDR      r0,[r0,#0]  ; tmr_converter_tick
000032  1e40              SUBS     r0,r0,#1
000034  4943              LDR      r1,|L1.324|
000036  6008              STR      r0,[r1,#0]  ; tmr_converter_tick
000038  d109              BNE      |L1.78|
;;;58     	{
;;;59     		//msg = CONVERTER_TICK;
;;;60     		xQueueSendToBackFromISR(xQueueConverter, &converter_tick_message, &xHigherPriorityTaskWokenByPost);
00003a  2300              MOVS     r3,#0
00003c  aa01              ADD      r2,sp,#4
00003e  4942              LDR      r1,|L1.328|
000040  4842              LDR      r0,|L1.332|
000042  6800              LDR      r0,[r0,#0]  ; xQueueConverter
000044  f7fffffe          BL       xQueueGenericSendFromISR
;;;61     		tmr_converter_tick = CONVERTER_TICK_INTERVAL;
000048  2032              MOVS     r0,#0x32
00004a  493e              LDR      r1,|L1.324|
00004c  6008              STR      r0,[r1,#0]  ; tmr_converter_tick
                  |L1.78|
;;;62     	}
;;;63     	
;;;64     	if (--tmr_dispatcher_tick == 0)
00004e  4840              LDR      r0,|L1.336|
000050  6800              LDR      r0,[r0,#0]  ; tmr_dispatcher_tick
000052  1e40              SUBS     r0,r0,#1
000054  493e              LDR      r1,|L1.336|
000056  6008              STR      r0,[r1,#0]  ; tmr_dispatcher_tick
000058  d109              BNE      |L1.110|
;;;65     	{
;;;66     		xQueueSendToBackFromISR(xQueueDispatcher, &dispatcher_tick_msg, &xHigherPriorityTaskWokenByPost);
00005a  2300              MOVS     r3,#0
00005c  aa01              ADD      r2,sp,#4
00005e  493d              LDR      r1,|L1.340|
000060  483d              LDR      r0,|L1.344|
000062  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
000064  f7fffffe          BL       xQueueGenericSendFromISR
;;;67     		tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
000068  200a              MOVS     r0,#0xa
00006a  4939              LDR      r1,|L1.336|
00006c  6008              STR      r0,[r1,#0]  ; tmr_dispatcher_tick
                  |L1.110|
;;;68     	}
;;;69     	
;;;70     	// Force context switching if required
;;;71     	// CHECKME
;;;72     	portEND_SWITCHING_ISR(xHigherPriorityTaskWokenByPost);
00006e  9801              LDR      r0,[sp,#4]
000070  b118              CBZ      r0,|L1.122|
000072  f04f5080          MOV      r0,#0x10000000
000076  4939              LDR      r1,|L1.348|
000078  6008              STR      r0,[r1,#0]
                  |L1.122|
;;;73     	
;;;74     	// Update time
;;;75     	ticks_count = DWT_GetDeltaForNow(time_mark);
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       DWT_GetDeltaForNow
000080  4604              MOV      r4,r0
;;;76     	if (ticks_count > time_profile.max_ticks_in_Systick_hook)
000082  4837              LDR      r0,|L1.352|
000084  6800              LDR      r0,[r0,#0]  ; time_profile
000086  42a0              CMP      r0,r4
000088  d201              BCS      |L1.142|
;;;77     		time_profile.max_ticks_in_Systick_hook = ticks_count;
00008a  4835              LDR      r0,|L1.352|
00008c  6004              STR      r4,[r0,#0]  ; time_profile
                  |L1.142|
;;;78     }
00008e  bd7c              POP      {r2-r6,pc}
;;;79     
                          ENDP

                  Timer2_IRQHandler PROC
;;;132    //---------------------------------------------//
;;;133    void Timer2_IRQHandler(void) 
000090  e92d41f0          PUSH     {r4-r8,lr}
;;;134    {
;;;135    	static uint16_t hw_adc_counter = HW_ADC_CALL_PERIOD;
;;;136    	static uint16_t hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD - 1;
;;;137    	static uint16_t hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD - 2;
;;;138    	uint16_t temp;
;;;139    	// Time profiling
;;;140    	uint32_t time_mark1 = 0;
000094  2600              MOVS     r6,#0
;;;141    	uint32_t time_mark2 = 0;
000096  2700              MOVS     r7,#0
;;;142    	uint32_t ticks_count;
;;;143    /*	
;;;144    	// Debug
;;;145    	if (MDR_PORTA->RXTX & (1<<TXD1))
;;;146    		PORT_ResetBits(MDR_PORTA, 1<<TXD1);
;;;147    	else
;;;148    		PORT_SetBits(MDR_PORTA, 1<<TXD1);
;;;149    */	
;;;150    	ProcessPowerOff();				// Check AC line disconnection
000098  f7fffffe          BL       ProcessPowerOff
;;;151    	if (--hw_adc_counter == 0)
00009c  4831              LDR      r0,|L1.356|
00009e  8800              LDRH     r0,[r0,#0]  ; hw_adc_counter
0000a0  1e40              SUBS     r0,r0,#1
0000a2  0400              LSLS     r0,r0,#16
0000a4  0c00              LSRS     r0,r0,#16
0000a6  492f              LDR      r1,|L1.356|
0000a8  8008              STRH     r0,[r1,#0]
0000aa  d103              BNE      |L1.180|
;;;152    	{
;;;153    		hw_adc_counter = HW_ADC_CALL_PERIOD;
0000ac  2005              MOVS     r0,#5
0000ae  8008              STRH     r0,[r1,#0]
;;;154    		//-------------------------------//
;;;155    		// 286
;;;156    		Converter_HW_ADCProcess();	// Converter low-level ADC control
0000b0  f7fffffe          BL       Converter_HW_ADCProcess
                  |L1.180|
;;;157    		//-------------------------------//
;;;158    	}
;;;159    	
;;;160    	//-------------------------------//
;;;161    	// 2369
;;;162    	if (--hw_uart2_rx_counter == 0)
0000b4  482c              LDR      r0,|L1.360|
0000b6  8800              LDRH     r0,[r0,#0]  ; hw_uart2_rx_counter
0000b8  1e40              SUBS     r0,r0,#1
0000ba  0400              LSLS     r0,r0,#16
0000bc  0c00              LSRS     r0,r0,#16
0000be  492a              LDR      r1,|L1.360|
0000c0  8008              STRH     r0,[r1,#0]
0000c2  d103              BNE      |L1.204|
;;;163    	{
;;;164    		hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD;
0000c4  2005              MOVS     r0,#5
0000c6  8008              STRH     r0,[r1,#0]
;;;165    		//-------------------------------//
;;;166    		// 373
;;;167    		processUartRX();			// UART2 receiver service
0000c8  f7fffffe          BL       processUartRX
                  |L1.204|
;;;168    		//-------------------------------//
;;;169    	}
;;;170    	if (--hw_uart2_tx_counter == 0)
0000cc  4827              LDR      r0,|L1.364|
0000ce  8800              LDRH     r0,[r0,#0]  ; hw_uart2_tx_counter
0000d0  1e40              SUBS     r0,r0,#1
0000d2  0400              LSLS     r0,r0,#16
0000d4  0c00              LSRS     r0,r0,#16
0000d6  4925              LDR      r1,|L1.364|
0000d8  8008              STRH     r0,[r1,#0]
0000da  d109              BNE      |L1.240|
;;;171    	{
;;;172    		hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD;
0000dc  2005              MOVS     r0,#5
0000de  8008              STRH     r0,[r1,#0]
;;;173    		time_mark1 = DWT_Get();
0000e0  f7fffffe          BL       DWT_Get
0000e4  4606              MOV      r6,r0
;;;174    		//-------------------------------//
;;;175    		// 2320
;;;176    		processUartTX();			// UART2 transmitter service
0000e6  f7fffffe          BL       processUartTX
;;;177    		//-------------------------------//
;;;178    		time_mark2 = DWT_Get();
0000ea  f7fffffe          BL       DWT_Get
0000ee  4607              MOV      r7,r0
                  |L1.240|
;;;179    	}
;;;180    	//-------------------------------//
;;;181    	
;;;182    	
;;;183    	//-------------------------------//
;;;184    	// 608
;;;185    	Converter_HWProcess();			// Converter low-level ON/OFF control and overload handling
0000f0  f7fffffe          BL       Converter_HWProcess
;;;186    	//-------------------------------//
;;;187    	
;;;188    	
;;;189    	
;;;190    	//-------------------------------//
;;;191    	// 198
;;;192    	ProcessEncoder();				// Poll encoder				
0000f4  f7fffffe          BL       ProcessEncoder
;;;193    
;;;194    	// Reinit timer2 CCR
;;;195    	temp = MDR_TIMER2->CCR2 + HW_IRQ_PERIOD;	
0000f8  481d              LDR      r0,|L1.368|
0000fa  6940              LDR      r0,[r0,#0x14]
0000fc  f5006048          ADD      r0,r0,#0xc80
000100  b285              UXTH     r5,r0
;;;196    	MDR_TIMER2->CCR2 = (temp > MDR_TIMER2->ARR) ? temp - MDR_TIMER2->ARR : temp;
000102  481b              LDR      r0,|L1.368|
000104  6880              LDR      r0,[r0,#8]
000106  42a8              CMP      r0,r5
000108  d203              BCS      |L1.274|
00010a  4819              LDR      r0,|L1.368|
00010c  6880              LDR      r0,[r0,#8]
00010e  1a28              SUBS     r0,r5,r0
000110  e000              B        |L1.276|
                  |L1.274|
000112  4628              MOV      r0,r5
                  |L1.276|
000114  4916              LDR      r1,|L1.368|
000116  6148              STR      r0,[r1,#0x14]
;;;197    	TIMER_ClearFlag(MDR_TIMER2, TIMER_STATUS_CCR_REF_CH2);
000118  1509              ASRS     r1,r1,#20
00011a  4815              LDR      r0,|L1.368|
00011c  f7fffffe          BL       TIMER_ClearFlag
;;;198    	//-------------------------------//
;;;199    	
;;;200    	
;;;201    	
;;;202    	// Update time
;;;203    	ticks_count = DWT_GetDelta(time_mark1, time_mark2);
000120  4639              MOV      r1,r7
000122  4630              MOV      r0,r6
000124  f7fffffe          BL       DWT_GetDelta
000128  4604              MOV      r4,r0
;;;204    	if (ticks_count > time_profile.max_ticks_in_Timer2_ISR)
00012a  480d              LDR      r0,|L1.352|
00012c  6840              LDR      r0,[r0,#4]  ; time_profile
00012e  42a0              CMP      r0,r4
000130  d201              BCS      |L1.310|
;;;205    		time_profile.max_ticks_in_Timer2_ISR = ticks_count;
000132  480b              LDR      r0,|L1.352|
000134  6044              STR      r4,[r0,#4]  ; time_profile
                  |L1.310|
;;;206    }
000136  e8bd81f0          POP      {r4-r8,pc}
;;;207    
                          ENDP

00013a  0000              DCW      0x0000
                  |L1.316|
                          DCD      tmr_gui_update
                  |L1.320|
                          DCD      xQueueGUI
                  |L1.324|
                          DCD      tmr_converter_tick
                  |L1.328|
                          DCD      converter_tick_message
                  |L1.332|
                          DCD      xQueueConverter
                  |L1.336|
                          DCD      tmr_dispatcher_tick
                  |L1.340|
                          DCD      dispatcher_tick_msg
                  |L1.344|
                          DCD      xQueueDispatcher
                  |L1.348|
                          DCD      0xe000ed04
                  |L1.352|
                          DCD      time_profile
                  |L1.356|
                          DCD      hw_adc_counter
                  |L1.360|
                          DCD      hw_uart2_rx_counter
                  |L1.364|
                          DCD      hw_uart2_tx_counter
                  |L1.368|
                          DCD      0x40078000

                          AREA ||.data||, DATA, ALIGN=2

                  tmr_gui_update
                          DCD      0x00000019
                  tmr_converter_tick
                          DCD      0x00000032
                  tmr_dispatcher_tick
                          DCD      0x0000000a
                  hw_adc_counter
00000c  0005              DCW      0x0005
                  hw_uart2_rx_counter
00000e  0004              DCW      0x0004
                  hw_uart2_tx_counter
000010  0003              DCW      0x0003
000012  0000              DCB      0x00,0x00
                  time_profile
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\systick.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_systick_c_c88225e9____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REVSH|
#line 130
|__asm___9_systick_c_c88225e9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
