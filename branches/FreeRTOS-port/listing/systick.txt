; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list -c --asm --interleave -o.\FLASH\systick.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\systick.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\systick.crf src\systick.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vApplicationTickHook PROC
;;;37     //-----------------------------------------------------------------//
;;;38     void vApplicationTickHook( void )
000000  b57c              PUSH     {r2-r6,lr}
;;;39     {
;;;40     	static uint32_t tmr_gui_update = GUI_UPDATE_INTERVAL;
;;;41     	static uint32_t tmr_converter_tick = CONVERTER_TICK_INTERVAL;
;;;42     	static uint32_t tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
;;;43     	static uint32_t tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
;;;44     	portBASE_TYPE xHigherPriorityTaskWokenByPost;
;;;45     	uint32_t msg;
;;;46     	// Time profiling
;;;47     	uint32_t time_mark = DWT_Get();
000002  f7fffffe          BL       DWT_Get
000006  4605              MOV      r5,r0
;;;48     	uint32_t ticks_count;
;;;49     		
;;;50     	// We have not woken a task at the start of the ISR.
;;;51     	xHigherPriorityTaskWokenByPost = pdFALSE;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;52     	
;;;53     	if (--tmr_gui_update == 0)
00000c  4c3b              LDR      r4,|L1.252|
00000e  6861              LDR      r1,[r4,#4]  ; tmr_gui_update
000010  1e49              SUBS     r1,r1,#1
000012  6061              STR      r1,[r4,#4]  ; tmr_gui_update
000014  d109              BNE      |L1.42|
;;;54     	{
;;;55     		msg = GUI_TASK_REDRAW;
000016  9000              STR      r0,[sp,#0]
;;;56     		xQueueSendToBackFromISR(xQueueGUI, &msg, &xHigherPriorityTaskWokenByPost);
000018  4839              LDR      r0,|L1.256|
00001a  2300              MOVS     r3,#0
00001c  aa01              ADD      r2,sp,#4
00001e  4669              MOV      r1,sp
000020  6800              LDR      r0,[r0,#0]  ; xQueueGUI
000022  f7fffffe          BL       xQueueGenericSendFromISR
;;;57     		tmr_gui_update = GUI_UPDATE_INTERVAL;
000026  2019              MOVS     r0,#0x19
000028  6060              STR      r0,[r4,#4]  ; tmr_gui_update
                  |L1.42|
;;;58     	}
;;;59     	
;;;60     	if (--tmr_converter_tick == 0)
00002a  68a1              LDR      r1,[r4,#8]  ; tmr_converter_tick
00002c  1e49              SUBS     r1,r1,#1
00002e  60a1              STR      r1,[r4,#8]  ; tmr_converter_tick
000030  d108              BNE      |L1.68|
;;;61     	{
;;;62     		//msg = CONVERTER_TICK;
;;;63     		xQueueSendToBackFromISR(xQueueConverter, &converter_tick_message, &xHigherPriorityTaskWokenByPost);
000032  4835              LDR      r0,|L1.264|
000034  2300              MOVS     r3,#0
000036  aa01              ADD      r2,sp,#4
000038  4932              LDR      r1,|L1.260|
00003a  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00003c  f7fffffe          BL       xQueueGenericSendFromISR
;;;64     		tmr_converter_tick = CONVERTER_TICK_INTERVAL;
000040  2032              MOVS     r0,#0x32
000042  60a0              STR      r0,[r4,#8]  ; tmr_converter_tick
                  |L1.68|
;;;65     	}
;;;66     	
;;;67     	if (--tmr_dispatcher_tick == 0)
000044  68e1              LDR      r1,[r4,#0xc]  ; tmr_dispatcher_tick
000046  1e49              SUBS     r1,r1,#1
000048  60e1              STR      r1,[r4,#0xc]  ; tmr_dispatcher_tick
00004a  d108              BNE      |L1.94|
;;;68     	{
;;;69     		xQueueSendToBackFromISR(xQueueDispatcher, &dispatcher_tick_msg, &xHigherPriorityTaskWokenByPost);
00004c  4830              LDR      r0,|L1.272|
00004e  2300              MOVS     r3,#0
000050  aa01              ADD      r2,sp,#4
000052  492e              LDR      r1,|L1.268|
000054  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
000056  f7fffffe          BL       xQueueGenericSendFromISR
;;;70     		tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
00005a  200a              MOVS     r0,#0xa
00005c  60e0              STR      r0,[r4,#0xc]  ; tmr_dispatcher_tick
                  |L1.94|
;;;71     	}
;;;72     	
;;;73     	if (--tmr_sound_driver_tick == 0)
00005e  6921              LDR      r1,[r4,#0x10]  ; tmr_sound_driver_tick
000060  1e49              SUBS     r1,r1,#1
000062  6121              STR      r1,[r4,#0x10]  ; tmr_sound_driver_tick
000064  d108              BNE      |L1.120|
;;;74     	{
;;;75     		xQueueSendToBackFromISR(xQueueSound, &sound_driver_sync_msg, &xHigherPriorityTaskWokenByPost);
000066  482c              LDR      r0,|L1.280|
000068  2300              MOVS     r3,#0
00006a  aa01              ADD      r2,sp,#4
00006c  4929              LDR      r1,|L1.276|
00006e  6800              LDR      r0,[r0,#0]  ; xQueueSound
000070  f7fffffe          BL       xQueueGenericSendFromISR
;;;76     		tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
000074  2005              MOVS     r0,#5
000076  6120              STR      r0,[r4,#0x10]  ; tmr_sound_driver_tick
                  |L1.120|
;;;77     	}
;;;78     	
;;;79     	// Force context switching if required
;;;80     	// CHECKME
;;;81     	portEND_SWITCHING_ISR(xHigherPriorityTaskWokenByPost);
000078  9801              LDR      r0,[sp,#4]
00007a  b118              CBZ      r0,|L1.132|
00007c  4927              LDR      r1,|L1.284|
00007e  f04f5080          MOV      r0,#0x10000000
000082  6008              STR      r0,[r1,#0]
                  |L1.132|
;;;82     	
;;;83     	// Update time
;;;84     	ticks_count = DWT_GetDeltaForNow(time_mark);
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       DWT_GetDeltaForNow
;;;85     	if (ticks_count > time_profile.max_ticks_in_Systick_hook)
00008a  491c              LDR      r1,|L1.252|
00008c  3114              ADDS     r1,r1,#0x14
00008e  680a              LDR      r2,[r1,#0]  ; time_profile
000090  4282              CMP      r2,r0
000092  d200              BCS      |L1.150|
;;;86     		time_profile.max_ticks_in_Systick_hook = ticks_count;
000094  6008              STR      r0,[r1,#0]  ; time_profile
                  |L1.150|
;;;87     }
000096  bd7c              POP      {r2-r6,pc}
;;;88     
                          ENDP

                  Timer2_IRQHandler PROC
;;;141    //---------------------------------------------//
;;;142    void Timer2_IRQHandler(void) 
000098  b510              PUSH     {r4,lr}
;;;143    {
;;;144    	static uint16_t hw_adc_counter = HW_ADC_CALL_PERIOD;
;;;145    	static uint16_t hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD - 1;
;;;146    	static uint16_t hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD - 2;
;;;147    	uint16_t temp;
;;;148    	// Time profiling
;;;149    	uint32_t time_mark1 = 0;
;;;150    	uint32_t time_mark2 = 0;
;;;151    	uint32_t ticks_count;
;;;152    	
;;;153    	time_mark1 = DWT_Get();
00009a  f7fffffe          BL       DWT_Get
00009e  4604              MOV      r4,r0
;;;154    /*	
;;;155    	// Debug
;;;156    	if (MDR_PORTA->RXTX & (1<<TXD1))
;;;157    		PORT_ResetBits(MDR_PORTA, 1<<TXD1);
;;;158    	else
;;;159    		PORT_SetBits(MDR_PORTA, 1<<TXD1);
;;;160    */	
;;;161    	ProcessPowerOff();				// Check AC line disconnection
0000a0  f7fffffe          BL       ProcessPowerOff
;;;162    	if (--hw_adc_counter == 0)
0000a4  4915              LDR      r1,|L1.252|
0000a6  8808              LDRH     r0,[r1,#0]  ; hw_adc_counter
0000a8  1e40              SUBS     r0,r0,#1
0000aa  0400              LSLS     r0,r0,#16
0000ac  0c00              LSRS     r0,r0,#16
0000ae  8008              STRH     r0,[r1,#0]
0000b0  d103              BNE      |L1.186|
;;;163    	{
;;;164    		hw_adc_counter = HW_ADC_CALL_PERIOD;
0000b2  2005              MOVS     r0,#5
0000b4  8008              STRH     r0,[r1,#0]
;;;165    		//-------------------------------//
;;;166    		// 286
;;;167    		Converter_HW_ADCProcess();	// Converter low-level ADC control
0000b6  f7fffffe          BL       Converter_HW_ADCProcess
                  |L1.186|
;;;168    		//-------------------------------//
;;;169    	}
;;;170    /*	
;;;171    	//-------------------------------//
;;;172    	// 2369
;;;173    	if (--hw_uart2_rx_counter == 0)
;;;174    	{
;;;175    		hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD;
;;;176    		//-------------------------------//
;;;177    		// 373
;;;178    		processUartRX();			// UART2 receiver service
;;;179    		//-------------------------------//
;;;180    	}
;;;181    	if (--hw_uart2_tx_counter == 0)
;;;182    	{
;;;183    		hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD;
;;;184    		time_mark1 = DWT_Get();
;;;185    		//-------------------------------//
;;;186    		// 2320
;;;187    		processUartTX();			// UART2 transmitter service
;;;188    		//-------------------------------//
;;;189    		time_mark2 = DWT_Get();
;;;190    	}
;;;191    	//-------------------------------//
;;;192    */	
;;;193    	
;;;194    	//-------------------------------//
;;;195    	// 608
;;;196    	Converter_HWProcess();			// Converter low-level ON/OFF control and overload handling
0000ba  f7fffffe          BL       Converter_HWProcess
;;;197    	//-------------------------------//
;;;198    	
;;;199    	
;;;200    	
;;;201    	//-------------------------------//
;;;202    	// 198
;;;203    	ProcessEncoder();				// Poll encoder				
0000be  f7fffffe          BL       ProcessEncoder
;;;204    
;;;205    	// Reinit timer2 CCR
;;;206    	temp = MDR_TIMER2->CCR2 + HW_IRQ_PERIOD;	
0000c2  4a17              LDR      r2,|L1.288|
0000c4  6950              LDR      r0,[r2,#0x14]
0000c6  f5006048          ADD      r0,r0,#0xc80
0000ca  b280              UXTH     r0,r0
;;;207    	MDR_TIMER2->CCR2 = (temp > MDR_TIMER2->ARR) ? temp - MDR_TIMER2->ARR : temp;
0000cc  6891              LDR      r1,[r2,#8]
0000ce  4281              CMP      r1,r0
0000d0  d201              BCS      |L1.214|
0000d2  6891              LDR      r1,[r2,#8]
0000d4  1a40              SUBS     r0,r0,r1
                  |L1.214|
0000d6  6150              STR      r0,[r2,#0x14]
;;;208    	TIMER_ClearFlag(MDR_TIMER2, TIMER_STATUS_CCR_REF_CH2);
0000d8  f44f6180          MOV      r1,#0x400
0000dc  4610              MOV      r0,r2
0000de  f7fffffe          BL       TIMER_ClearFlag
;;;209    	//-------------------------------//
;;;210    	
;;;211    	time_mark2 = DWT_Get();
0000e2  f7fffffe          BL       DWT_Get
0000e6  4601              MOV      r1,r0
;;;212    	
;;;213    	
;;;214    	// Update time
;;;215    	ticks_count = DWT_GetDelta(time_mark1, time_mark2);
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       DWT_GetDelta
;;;216    	if (ticks_count > time_profile.max_ticks_in_Timer2_ISR)
0000ee  4903              LDR      r1,|L1.252|
0000f0  3114              ADDS     r1,r1,#0x14
0000f2  684a              LDR      r2,[r1,#4]  ; time_profile
0000f4  4282              CMP      r2,r0
0000f6  d200              BCS      |L1.250|
;;;217    		time_profile.max_ticks_in_Timer2_ISR = ticks_count;
0000f8  6048              STR      r0,[r1,#4]  ; time_profile
                  |L1.250|
;;;218    }
0000fa  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  |L1.252|
                          DCD      ||.data||
                  |L1.256|
                          DCD      xQueueGUI
                  |L1.260|
                          DCD      converter_tick_message
                  |L1.264|
                          DCD      xQueueConverter
                  |L1.268|
                          DCD      dispatcher_tick_msg
                  |L1.272|
                          DCD      xQueueDispatcher
                  |L1.276|
                          DCD      sound_driver_sync_msg
                  |L1.280|
                          DCD      xQueueSound
                  |L1.284|
                          DCD      0xe000ed04
                  |L1.288|
                          DCD      0x40078000

                          AREA ||.data||, DATA, ALIGN=2

                  hw_adc_counter
000000  0005              DCW      0x0005
000002  0000              DCB      0x00,0x00
                  tmr_gui_update
                          DCD      0x00000019
                  tmr_converter_tick
                          DCD      0x00000032
                  tmr_dispatcher_tick
                          DCD      0x0000000a
                  tmr_sound_driver_tick
                          DCD      0x00000005
                  time_profile
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\systick.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_systick_c_c88225e9____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REVSH|
#line 130
|__asm___9_systick_c_c88225e9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
