; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\heap_2.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\heap_2.crf ..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;275    
;;;276    static void prvHeapInit( void )
000000  483d              LDR      r0,|L1.248|
;;;277    {
;;;278    xBlockLink *pxFirstFreeBlock;
;;;279    unsigned char *pucAlignedHeap;
;;;280    
;;;281    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;282    	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
000002  f0200007          BIC      r0,r0,#7
;;;283    
;;;284    	/* xStart is used to hold a pointer to the first item in the list of free
;;;285    	blocks.  The void cast is used to prevent compiler warnings. */
;;;286    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000006  493d              LDR      r1,|L1.252|
000008  6008              STR      r0,[r1,#0]  ; xStart
;;;287    	xStart.xBlockSize = ( size_t ) 0;
00000a  2300              MOVS     r3,#0
00000c  604b              STR      r3,[r1,#4]  ; xStart
;;;288    
;;;289    	/* xEnd is used to mark the end of the list of free blocks. */
;;;290    	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
00000e  3108              ADDS     r1,r1,#8
000010  f24432f8          MOV      r2,#0x43f8
000014  604a              STR      r2,[r1,#4]  ; xEnd
;;;291    	xEnd.pxNextFreeBlock = NULL;
000016  600b              STR      r3,[r1,#0]  ; xEnd
;;;292    
;;;293    	/* To start with there is a single free block that is sized to take up the
;;;294    	entire heap space. */
;;;295    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
;;;296    	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
000018  6042              STR      r2,[r0,#4]
;;;297    	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
00001a  6001              STR      r1,[r0,#0]
;;;298    }
00001c  4770              BX       lr
;;;299    /*-----------------------------------------------------------*/
                          ENDP

                  pvPortMalloc PROC
;;;144    
;;;145    void *pvPortMalloc( size_t xWantedSize )
00001e  e92d41f0          PUSH     {r4-r8,lr}
;;;146    {
000022  4604              MOV      r4,r0
;;;147    xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;148    static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
;;;149    void *pvReturn = NULL;
000024  2600              MOVS     r6,#0
;;;150    
;;;151    	vTaskSuspendAll();
000026  f7fffffe          BL       vTaskSuspendAll
;;;152    	{
;;;153    		/* If this is the first call to malloc then the heap will require
;;;154    		initialisation to setup the list of free blocks. */
;;;155    		if( xHeapHasBeenInitialised == pdFALSE )
00002a  4d34              LDR      r5,|L1.252|
00002c  3d08              SUBS     r5,r5,#8
00002e  6868              LDR      r0,[r5,#4]  ; xHeapHasBeenInitialised
000030  b918              CBNZ     r0,|L1.58|
;;;156    		{
;;;157    			prvHeapInit();
000032  f7fffffe          BL       prvHeapInit
;;;158    			xHeapHasBeenInitialised = pdTRUE;
000036  2001              MOVS     r0,#1
000038  6068              STR      r0,[r5,#4]  ; xHeapHasBeenInitialised
                  |L1.58|
;;;159    		}
;;;160    
;;;161    		/* The wanted size is increased so it can contain a xBlockLink
;;;162    		structure in addition to the requested amount of bytes. */
;;;163    		if( xWantedSize > 0 )
00003a  b13c              CBZ      r4,|L1.76|
;;;164    		{
;;;165    			xWantedSize += heapSTRUCT_SIZE;
00003c  3408              ADDS     r4,r4,#8
;;;166    
;;;167    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;168    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00003e  0760              LSLS     r0,r4,#29
000040  d004              BEQ      |L1.76|
;;;169    			{
;;;170    				/* Byte alignment required. */
;;;171    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000042  f0040007          AND      r0,r4,#7
000046  f1c00008          RSB      r0,r0,#8
00004a  4404              ADD      r4,r4,r0
                  |L1.76|
;;;172    			}
;;;173    		}
;;;174    
;;;175    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
00004c  1e60              SUBS     r0,r4,#1
00004e  f24431f7          MOV      r1,#0x43f7
000052  4288              CMP      r0,r1
000054  d229              BCS      |L1.170|
;;;176    		{
;;;177    			/* Blocks are stored in byte order - traverse the list from the start
;;;178    			(smallest) block until one of adequate size is found. */
;;;179    			pxPreviousBlock = &xStart;
000056  4a29              LDR      r2,|L1.252|
;;;180    			pxBlock = xStart.pxNextFreeBlock;
000058  4610              MOV      r0,r2
00005a  6801              LDR      r1,[r0,#0]  ; xStart
;;;181    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00005c  e001              B        |L1.98|
                  |L1.94|
;;;182    			{
;;;183    				pxPreviousBlock = pxBlock;
00005e  460a              MOV      r2,r1
;;;184    				pxBlock = pxBlock->pxNextFreeBlock;
000060  4601              MOV      r1,r0
                  |L1.98|
000062  6848              LDR      r0,[r1,#4]            ;181
000064  42a0              CMP      r0,r4                 ;181
000066  d202              BCS      |L1.110|
000068  6808              LDR      r0,[r1,#0]            ;181
00006a  2800              CMP      r0,#0                 ;181
00006c  d1f7              BNE      |L1.94|
                  |L1.110|
;;;185    			}
;;;186    
;;;187    			/* If we found the end marker then a block of adequate size was not found. */
;;;188    			if( pxBlock != &xEnd )
00006e  4823              LDR      r0,|L1.252|
000070  3008              ADDS     r0,r0,#8
000072  4281              CMP      r1,r0
000074  d019              BEQ      |L1.170|
;;;189    			{
;;;190    				/* Return the memory space - jumping over the xBlockLink structure
;;;191    				at its start. */
;;;192    				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
000076  6816              LDR      r6,[r2,#0]
000078  3608              ADDS     r6,r6,#8
;;;193    
;;;194    				/* This block is being returned for use so must be taken out of the
;;;195    				list of free blocks. */
;;;196    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00007a  6808              LDR      r0,[r1,#0]
00007c  6010              STR      r0,[r2,#0]
;;;197    
;;;198    				/* If the block is larger than required it can be split into two. */
;;;199    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
00007e  6848              LDR      r0,[r1,#4]
000080  1b00              SUBS     r0,r0,r4
000082  2810              CMP      r0,#0x10
000084  d90d              BLS      |L1.162|
;;;200    				{
;;;201    					/* This block is to be split into two.  Create a new block
;;;202    					following the number of bytes requested. The void cast is
;;;203    					used to prevent byte alignment warnings from the compiler. */
;;;204    					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
000086  190b              ADDS     r3,r1,r4
;;;205    
;;;206    					/* Calculate the sizes of two blocks split from the single
;;;207    					block. */
;;;208    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
000088  6058              STR      r0,[r3,#4]
;;;209    					pxBlock->xBlockSize = xWantedSize;
00008a  604c              STR      r4,[r1,#4]
;;;210    
;;;211    					/* Insert the new block into the list of free blocks. */
;;;212    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
00008c  685c              LDR      r4,[r3,#4]
00008e  481b              LDR      r0,|L1.252|
000090  e000              B        |L1.148|
                  |L1.146|
000092  4610              MOV      r0,r2
                  |L1.148|
000094  6802              LDR      r2,[r0,#0]
000096  6857              LDR      r7,[r2,#4]
000098  42a7              CMP      r7,r4
00009a  d3fa              BCC      |L1.146|
00009c  6802              LDR      r2,[r0,#0]
00009e  601a              STR      r2,[r3,#0]
0000a0  6003              STR      r3,[r0,#0]
                  |L1.162|
;;;213    				}
;;;214    
;;;215    				xFreeBytesRemaining -= pxBlock->xBlockSize;
0000a2  6848              LDR      r0,[r1,#4]
0000a4  6829              LDR      r1,[r5,#0]  ; xFreeBytesRemaining
0000a6  1a08              SUBS     r0,r1,r0
0000a8  6028              STR      r0,[r5,#0]  ; xFreeBytesRemaining
                  |L1.170|
;;;216    			}
;;;217    		}
;;;218    		
;;;219    		traceMALLOC( pvReturn, xWantedSize );
;;;220    	}
;;;221    	xTaskResumeAll();
0000aa  f7fffffe          BL       xTaskResumeAll
;;;222    
;;;223    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;224    	{
;;;225    		if( pvReturn == NULL )
;;;226    		{
;;;227    			extern void vApplicationMallocFailedHook( void );
;;;228    			vApplicationMallocFailedHook();
;;;229    		}
;;;230    	}
;;;231    	#endif
;;;232    
;;;233    	return pvReturn;
0000ae  4630              MOV      r0,r6
;;;234    }
0000b0  e8bd81f0          POP      {r4-r8,pc}
;;;235    /*-----------------------------------------------------------*/
                          ENDP

                  vPortFree PROC
;;;236    
;;;237    void vPortFree( void *pv )
0000b4  b510              PUSH     {r4,lr}
;;;238    {
;;;239    unsigned char *puc = ( unsigned char * ) pv;
;;;240    xBlockLink *pxLink;
;;;241    
;;;242    	if( pv != NULL )
0000b6  2800              CMP      r0,#0
0000b8  d018              BEQ      |L1.236|
;;;243    	{
;;;244    		/* The memory being freed will have an xBlockLink structure immediately
;;;245    		before it. */
;;;246    		puc -= heapSTRUCT_SIZE;
0000ba  3808              SUBS     r0,r0,#8
;;;247    
;;;248    		/* This unexpected casting is to keep some compilers from issuing 
;;;249    		byte alignment warnings. */
;;;250    		pxLink = ( void * ) puc;
0000bc  4604              MOV      r4,r0
;;;251    
;;;252    		vTaskSuspendAll();
0000be  f7fffffe          BL       vTaskSuspendAll
;;;253    		{
;;;254    			/* Add this block to the list of free blocks. */
;;;255    			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
0000c2  6860              LDR      r0,[r4,#4]
0000c4  490d              LDR      r1,|L1.252|
0000c6  e000              B        |L1.202|
                  |L1.200|
0000c8  4611              MOV      r1,r2
                  |L1.202|
0000ca  680a              LDR      r2,[r1,#0]
0000cc  6853              LDR      r3,[r2,#4]
0000ce  4283              CMP      r3,r0
0000d0  d3fa              BCC      |L1.200|
0000d2  6808              LDR      r0,[r1,#0]
0000d4  6020              STR      r0,[r4,#0]
0000d6  600c              STR      r4,[r1,#0]
;;;256    			xFreeBytesRemaining += pxLink->xBlockSize;
0000d8  4808              LDR      r0,|L1.252|
0000da  6861              LDR      r1,[r4,#4]
0000dc  3808              SUBS     r0,r0,#8
0000de  6802              LDR      r2,[r0,#0]  ; xFreeBytesRemaining
0000e0  4411              ADD      r1,r1,r2
0000e2  6001              STR      r1,[r0,#0]  ; xFreeBytesRemaining
;;;257    			traceFREE( pv, pxLink->xBlockSize );
;;;258    		}
;;;259    		xTaskResumeAll();
0000e4  e8bd4010          POP      {r4,lr}
0000e8  f7ffbffe          B.W      xTaskResumeAll
                  |L1.236|
;;;260    	}
;;;261    }
0000ec  bd10              POP      {r4,pc}
;;;262    /*-----------------------------------------------------------*/
                          ENDP

                  xPortGetFreeHeapSize PROC
;;;263    
;;;264    size_t xPortGetFreeHeapSize( void )
0000ee  4803              LDR      r0,|L1.252|
;;;265    {
;;;266    	return xFreeBytesRemaining;
0000f0  3808              SUBS     r0,r0,#8
0000f2  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;267    }
0000f4  4770              BX       lr
;;;268    /*-----------------------------------------------------------*/
                          ENDP

                  vPortInitialiseBlocks PROC
;;;269    
;;;270    void vPortInitialiseBlocks( void )
0000f6  4770              BX       lr
;;;271    {
;;;272    	/* This just exists to keep the linker quiet. */
;;;273    }
;;;274    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.248|
                          DCD      ||.bss||+0x8
                  |L1.252|
                          DCD      ||.data||+0x8

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x000043f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
