; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\guisetuppanel.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guisetuppanel.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guisetuppanel.crf src\gui\guiSetupPanel.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  onHighVoltageLimitChanged PROC
;;;305    
;;;306    static uint8_t onHighVoltageLimitChanged(void *widget, guiEvent_t *event)
000000  b510              PUSH     {r4,lr}
;;;307    {
;;;308        uint8_t limEnabled = 0;
000002  2100              MOVS     r1,#0
;;;309        if (checkBox_ApplyHighVoltageLimit.isChecked)
000004  48fe              LDR      r0,|L1.1024|
000006  f8900029          LDRB     r0,[r0,#0x29]  ; checkBox_ApplyHighVoltageLimit
00000a  0780              LSLS     r0,r0,#30
00000c  d500              BPL      |L1.16|
;;;310            limEnabled = 1;
00000e  2101              MOVS     r1,#1
                  |L1.16|
;;;311        applyGuiVoltageLimit(1, limEnabled, spinBox_HighVoltageLimit.value * 10);
000010  48fb              LDR      r0,|L1.1024|
000012  3084              ADDS     r0,r0,#0x84
000014  6a80              LDR      r0,[r0,#0x28]  ; spinBox_HighVoltageLimit
000016  eb000080          ADD      r0,r0,r0,LSL #2
00001a  0440              LSLS     r0,r0,#17
00001c  0c02              LSRS     r2,r0,#16
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       applyGuiVoltageLimit
;;;312        return 0;
000024  2000              MOVS     r0,#0
;;;313    }
000026  bd10              POP      {r4,pc}
;;;314    
                          ENDP

                  onLowVoltageLimitChanged PROC
;;;290    
;;;291    static uint8_t onLowVoltageLimitChanged(void *widget, guiEvent_t *event)
000028  b510              PUSH     {r4,lr}
;;;292    {
;;;293        uint8_t limEnabled = 0;
00002a  2100              MOVS     r1,#0
;;;294        if (checkBox_ApplyLowVoltageLimit.isChecked)
00002c  48f4              LDR      r0,|L1.1024|
00002e  382c              SUBS     r0,r0,#0x2c
000030  f8900029          LDRB     r0,[r0,#0x29]  ; checkBox_ApplyLowVoltageLimit
000034  0780              LSLS     r0,r0,#30
000036  d500              BPL      |L1.58|
;;;295            limEnabled = 1;
000038  2101              MOVS     r1,#1
                  |L1.58|
;;;296        applyGuiVoltageLimit(0, limEnabled, spinBox_LowVoltageLimit.value * 10);
00003a  48f1              LDR      r0,|L1.1024|
00003c  303c              ADDS     r0,r0,#0x3c
00003e  6a80              LDR      r0,[r0,#0x28]  ; spinBox_LowVoltageLimit
000040  eb000080          ADD      r0,r0,r0,LSL #2
000044  0440              LSLS     r0,r0,#17
000046  0c02              LSRS     r2,r0,#16
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       applyGuiVoltageLimit
;;;297        return 0;
00004e  2000              MOVS     r0,#0
;;;298    }
000050  bd10              POP      {r4,pc}
;;;299    
                          ENDP

                  guiSetupList_ProcessEvent PROC
;;;257    
;;;258    static uint8_t guiSetupList_ProcessEvent(guiGenericWidget_t *widget, guiEvent_t event)
000052  b537              PUSH     {r0-r2,r4,r5,lr}
;;;259    {
000054  4603              MOV      r3,r0
;;;260        uint8_t processResult = GUI_EVENT_ACCEPTED;
000056  2401              MOVS     r4,#1
;;;261        switch (event.type)
000058  f89d0004          LDRB     r0,[sp,#4]
00005c  280b              CMP      r0,#0xb
00005e  d112              BNE      |L1.134|
;;;262        {
;;;263            case GUI_EVENT_KEY:
;;;264                if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_OK))
000060  f89d2005          LDRB     r2,[sp,#5]
000064  f8bd1006          LDRH     r1,[sp,#6]
000068  2a01              CMP      r2,#1
00006a  d101              BNE      |L1.112|
00006c  2902              CMP      r1,#2
00006e  d002              BEQ      |L1.118|
                  |L1.112|
;;;265                {
;;;266                    guiCore_RequestFocusNextWidget((guiGenericContainer_t *)&guiSetupPanel, 1);
;;;267                    break;
;;;268                }
;;;269                else if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ESC))
000070  2a01              CMP      r2,#1
000072  d006              BEQ      |L1.130|
000074  e007              B        |L1.134|
                  |L1.118|
000076  48e2              LDR      r0,|L1.1024|
000078  2101              MOVS     r1,#1                 ;266
00007a  38c4              SUBS     r0,r0,#0xc4           ;266
00007c  f7fffffe          BL       guiCore_RequestFocusNextWidget
000080  e007              B        |L1.146|
                  |L1.130|
000082  2901              CMP      r1,#1
000084  d005              BEQ      |L1.146|
                  |L1.134|
;;;270                {
;;;271                    // Do nothing
;;;272                    break;
;;;273                }
;;;274                // fall down to default
;;;275            default:
;;;276                processResult = guiStringList_ProcessEvent(widget, event);
000086  e9dd1201          LDRD     r1,r2,[sp,#4]
00008a  4618              MOV      r0,r3
00008c  f7fffffe          BL       guiStringList_ProcessEvent
000090  4604              MOV      r4,r0
                  |L1.146|
;;;277        }
;;;278        return processResult;
000092  4620              MOV      r0,r4
;;;279    }
000094  bd3e              POP      {r1-r5,pc}
;;;280    
                          ENDP

                  guiSetupList_onIndexChanged PROC
;;;281    static uint8_t guiSetupList_onIndexChanged(void *widget, guiEvent_t *event)
000096  b570              PUSH     {r4-r6,lr}
;;;282    {
;;;283        uint8_t minTag = setupList.selectedIndex * 10;
000098  48d9              LDR      r0,|L1.1024|
00009a  3878              SUBS     r0,r0,#0x78
00009c  f8900022          LDRB     r0,[r0,#0x22]  ; setupList
0000a0  eb000080          ADD      r0,r0,r0,LSL #2
0000a4  0640              LSLS     r0,r0,#25
0000a6  0e04              LSRS     r4,r0,#24
;;;284        uint8_t maxTag = minTag + 10 - 1;
0000a8  f1040009          ADD      r0,r4,#9
0000ac  b2c5              UXTB     r5,r0
;;;285        guiCore_SetVisibleByTag(&guiSetupPanel.widgets, 0, 250, ITEMS_IN_RANGE_ARE_INVISIBLE);
0000ae  48d4              LDR      r0,|L1.1024|
0000b0  2302              MOVS     r3,#2
0000b2  38a4              SUBS     r0,r0,#0xa4
0000b4  22fa              MOVS     r2,#0xfa
0000b6  2100              MOVS     r1,#0
0000b8  4606              MOV      r6,r0
0000ba  f7fffffe          BL       guiCore_SetVisibleByTag
;;;286        guiCore_SetVisibleByTag(&guiSetupPanel.widgets, minTag, maxTag, ITEMS_IN_RANGE_ARE_VISIBLE);
0000be  2301              MOVS     r3,#1
0000c0  462a              MOV      r2,r5
0000c2  4621              MOV      r1,r4
0000c4  4630              MOV      r0,r6
0000c6  f7fffffe          BL       guiCore_SetVisibleByTag
;;;287        return 0;
0000ca  2000              MOVS     r0,#0
;;;288    }
0000cc  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

                  guiSetupPanel_ProcessEvents PROC
;;;209    
;;;210    static uint8_t guiSetupPanel_ProcessEvents(struct guiGenericWidget_t *widget, guiEvent_t event)
0000ce  b537              PUSH     {r0-r2,r4,r5,lr}
;;;211    {
;;;212        uint8_t processResult = GUI_EVENT_ACCEPTED;
0000d0  2501              MOVS     r5,#1
;;;213        switch (event.type)
0000d2  f89d1004          LDRB     r1,[sp,#4]
0000d6  2901              CMP      r1,#1
0000d8  d005              BEQ      |L1.230|
;;;214        {
;;;215            case GUI_EVENT_DRAW:
;;;216                guiGraph_DrawPanel(&guiSetupPanel);
;;;217                if (guiSetupPanel.redrawForced)
;;;218                {
;;;219                    // Draw static elements
;;;220                    LCD_SetPixelOutputMode(PIXEL_MODE_REWRITE);
;;;221                    LCD_SetFont(&font_h10_bold);
;;;222                    LCD_PrintString("Settings", 22, 0, IMAGE_MODE_NORMAL);
;;;223                }
;;;224                // Reset flags - redrawForced will be reset by core
;;;225                guiSetupPanel.redrawFocus = 0;
;;;226                guiSetupPanel.redrawRequired = 0;
;;;227                break;
;;;228            case GUI_EVENT_FOCUS:
;;;229                processResult = guiPanel_ProcessEvent(widget, event);
;;;230                if (processResult == GUI_EVENT_ACCEPTED)
;;;231                {
;;;232                    guiCore_RequestFocusChange((guiGenericWidget_t*)&setupList);
;;;233                    event.type = STRINGLIST_EVENT_ACTIVATE;
0000da  2440              MOVS     r4,#0x40
0000dc  2909              CMP      r1,#9                 ;213
0000de  d020              BEQ      |L1.290|
0000e0  290b              CMP      r1,#0xb               ;213
0000e2  d139              BNE      |L1.344|
0000e4  e030              B        |L1.328|
                  |L1.230|
0000e6  48c6              LDR      r0,|L1.1024|
0000e8  38c4              SUBS     r0,r0,#0xc4           ;216
0000ea  f7fffffe          BL       guiGraph_DrawPanel
0000ee  4cc4              LDR      r4,|L1.1024|
0000f0  3cc4              SUBS     r4,r4,#0xc4           ;217
0000f2  7a20              LDRB     r0,[r4,#8]            ;217  ; guiSetupPanel
0000f4  0600              LSLS     r0,r0,#24             ;217
0000f6  d50b              BPL      |L1.272|
0000f8  2000              MOVS     r0,#0                 ;220
0000fa  f7fffffe          BL       LCD_SetPixelOutputMode
0000fe  48c1              LDR      r0,|L1.1028|
000100  f7fffffe          BL       LCD_SetFont
000104  2301              MOVS     r3,#1                 ;222
000106  2200              MOVS     r2,#0                 ;222
000108  2116              MOVS     r1,#0x16              ;222
00010a  a0bf              ADR      r0,|L1.1032|
00010c  f7fffffe          BL       LCD_PrintString
                  |L1.272|
000110  7a60              LDRB     r0,[r4,#9]            ;225  ; guiSetupPanel
000112  f0200001          BIC      r0,r0,#1              ;225
000116  7260              STRB     r0,[r4,#9]            ;225
000118  7a20              LDRB     r0,[r4,#8]            ;226  ; guiSetupPanel
00011a  f0200040          BIC      r0,r0,#0x40           ;226
00011e  7220              STRB     r0,[r4,#8]            ;226
000120  e01f              B        |L1.354|
                  |L1.290|
000122  e9dd1201          LDRD     r1,r2,[sp,#4]         ;229
000126  f7fffffe          BL       guiPanel_ProcessEvent
00012a  4605              MOV      r5,r0                 ;229
00012c  2d01              CMP      r5,#1                 ;230
00012e  d118              BNE      |L1.354|
000130  48b3              LDR      r0,|L1.1024|
000132  3878              SUBS     r0,r0,#0x78           ;232
000134  f7fffffe          BL       guiCore_RequestFocusChange
000138  f88d4004          STRB     r4,[sp,#4]
;;;234                    guiCore_AddMessageToQueue((guiGenericWidget_t*)&setupList, &event);
00013c  48b0              LDR      r0,|L1.1024|
00013e  a901              ADD      r1,sp,#4
000140  3878              SUBS     r0,r0,#0x78
000142  f7fffffe          BL       guiCore_AddMessageToQueue
000146  e00c              B        |L1.354|
                  |L1.328|
;;;235                }
;;;236                break;
;;;237            case GUI_EVENT_KEY:
;;;238                if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ESC))
000148  f89d1005          LDRB     r1,[sp,#5]
00014c  2901              CMP      r1,#1
00014e  d103              BNE      |L1.344|
000150  f8bd1006          LDRH     r1,[sp,#6]
000154  2901              CMP      r1,#1
000156  d006              BEQ      |L1.358|
                  |L1.344|
;;;239                {
;;;240                    guiCore_RequestFocusChange((guiGenericWidget_t*)&setupList);
;;;241                    event.type = STRINGLIST_EVENT_ACTIVATE;
;;;242                    guiCore_AddMessageToQueue((guiGenericWidget_t*)&setupList, &event);
;;;243                    break;
;;;244                }
;;;245                /*if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ENCODER))
;;;246                {
;;;247    
;;;248                }*/
;;;249                // fall down to default
;;;250            default:
;;;251                processResult = guiPanel_ProcessEvent(widget, event);
000158  e9dd1201          LDRD     r1,r2,[sp,#4]
00015c  f7fffffe          BL       guiPanel_ProcessEvent
000160  4605              MOV      r5,r0
                  |L1.354|
;;;252        }
;;;253    
;;;254        return processResult;
000162  4628              MOV      r0,r5
;;;255    }
000164  bd3e              POP      {r1-r5,pc}
                  |L1.358|
000166  48a6              LDR      r0,|L1.1024|
000168  3878              SUBS     r0,r0,#0x78           ;240
00016a  f7fffffe          BL       guiCore_RequestFocusChange
00016e  f88d4004          STRB     r4,[sp,#4]            ;241
000172  48a3              LDR      r0,|L1.1024|
000174  a901              ADD      r1,sp,#4              ;242
000176  3878              SUBS     r0,r0,#0x78           ;242
000178  f7fffffe          BL       guiCore_AddMessageToQueue
00017c  e7f1              B        |L1.354|
;;;256    
                          ENDP

                  guiSetupPanel_Initialize PROC
;;;75     //-------------------------------------------------------//
;;;76     void guiSetupPanel_Initialize(guiGenericWidget_t *parent)
00017e  e92d47f0          PUSH     {r4-r10,lr}
;;;77     {
;;;78         // Initialize
;;;79         guiPanel_Initialize(&guiSetupPanel, parent);
000182  4601              MOV      r1,r0
000184  489e              LDR      r0,|L1.1024|
000186  38c4              SUBS     r0,r0,#0xc4
000188  f7fffffe          BL       guiPanel_Initialize
;;;80         guiSetupPanel.processEvent = guiSetupPanel_ProcessEvents;     // redefine standard panel message processing funtion
00018c  489c              LDR      r0,|L1.1024|
00018e  49a1              LDR      r1,|L1.1044|
000190  38c4              SUBS     r0,r0,#0xc4
000192  6141              STR      r1,[r0,#0x14]  ; guiSetupPanel
;;;81         guiSetupPanel.widgets.count = SETUP_PANEL_ELEMENTS_COUNT;
000194  2108              MOVS     r1,#8
000196  f8801020          STRB     r1,[r0,#0x20]
;;;82         guiSetupPanel.widgets.elements = guiSetupPanelElements;
00019a  f100012c          ADD      r1,r0,#0x2c
00019e  6241              STR      r1,[r0,#0x24]  ; guiSetupPanel
;;;83         guiSetupPanel.widgets.elements[0] = &setupList;
0001a0  f100054c          ADD      r5,r0,#0x4c
0001a4  600d              STR      r5,[r1,#0]
;;;84         guiSetupPanel.widgets.elements[1] = &checkBox_ApplyLowVoltageLimit;
0001a6  f1000798          ADD      r7,r0,#0x98
0001aa  604f              STR      r7,[r1,#4]
;;;85         guiSetupPanel.widgets.elements[2] = &checkBox_ApplyHighVoltageLimit;
0001ac  f8df8250          LDR      r8,|L1.1024|
0001b0  f8c18008          STR      r8,[r1,#8]
;;;86         guiSetupPanel.widgets.elements[3] = &spinBox_LowVoltageLimit;
0001b4  f5007480          ADD      r4,r0,#0x100
0001b8  60cc              STR      r4,[r1,#0xc]
;;;87         guiSetupPanel.widgets.elements[4] = &spinBox_HighVoltageLimit;
0001ba  f50072a4          ADD      r2,r0,#0x148
0001be  610a              STR      r2,[r1,#0x10]
;;;88         guiSetupPanel.widgets.elements[5] = 0;
0001c0  2600              MOVS     r6,#0
0001c2  614e              STR      r6,[r1,#0x14]
;;;89         guiSetupPanel.widgets.elements[6] = 0;
0001c4  618e              STR      r6,[r1,#0x18]
;;;90         guiSetupPanel.widgets.elements[7] = 0;
0001c6  61ce              STR      r6,[r1,#0x1c]
;;;91         guiSetupPanel.x = 0;
0001c8  8186              STRH     r6,[r0,#0xc]
;;;92         guiSetupPanel.y = 0;
0001ca  81c6              STRH     r6,[r0,#0xe]
;;;93         guiSetupPanel.width = 96 * 2;
0001cc  21c0              MOVS     r1,#0xc0
0001ce  8201              STRH     r1,[r0,#0x10]
;;;94         guiSetupPanel.height = 68;
0001d0  2144              MOVS     r1,#0x44
0001d2  8241              STRH     r1,[r0,#0x12]
;;;95         guiSetupPanel.showFocus = 1;
0001d4  7a41              LDRB     r1,[r0,#9]  ; guiSetupPanel
0001d6  f0410102          ORR      r1,r1,#2
0001da  7241              STRB     r1,[r0,#9]
;;;96         guiSetupPanel.focusFallsThrough = 0;
0001dc  f8901028          LDRB     r1,[r0,#0x28]  ; guiSetupPanel
0001e0  f0210101          BIC      r1,r1,#1
0001e4  f8801028          STRB     r1,[r0,#0x28]
;;;97     
;;;98         // Main list
;;;99         guiStringList_Initialize(&setupList, (guiGenericWidget_t *)&guiSetupPanel );
0001e8  4601              MOV      r1,r0
0001ea  304c              ADDS     r0,r0,#0x4c
0001ec  f7fffffe          BL       guiStringList_Initialize
;;;100        setupList.font = &font_h10;
0001f0  f1050508          ADD      r5,r5,#8
0001f4  f8dfa220          LDR      r10,|L1.1048|
0001f8  f8c5a024          STR      r10,[r5,#0x24]  ; setupList
;;;101        setupList.textAlignment = ALIGN_LEFT;
0001fc  f04f0901          MOV      r9,#1
000200  f8859028          STRB     r9,[r5,#0x28]
;;;102        setupList.hasFrame = 1;
000204  7e28              LDRB     r0,[r5,#0x18]  ; setupList
000206  f0400001          ORR      r0,r0,#1
;;;103        setupList.showFocus = 1;
00020a  7869              LDRB     r1,[r5,#1]  ; setupList
00020c  f0410102          ORR      r1,r1,#2
000210  7069              STRB     r1,[r5,#1]
;;;104        setupList.showStringFocus = 1;
000212  f0400008          ORR      r0,r0,#8
;;;105        setupList.canWrap = 0;
000216  f0200004          BIC      r0,r0,#4
;;;106        setupList.restoreIndexOnEscape = 1;
00021a  f0400010          ORR      r0,r0,#0x10
00021e  7628              STRB     r0,[r5,#0x18]
;;;107        setupList.x = 0;
000220  80ae              STRH     r6,[r5,#4]
;;;108        setupList.y = 11;
000222  f04f000b          MOV      r0,#0xb
000226  80e8              STRH     r0,[r5,#6]
;;;109        setupList.width = 96;
000228  f04f0060          MOV      r0,#0x60
00022c  8128              STRH     r0,[r5,#8]
;;;110        setupList.height = 68 - 13;
00022e  f04f0037          MOV      r0,#0x37
000232  8168              STRH     r0,[r5,#0xa]
;;;111        setupList.stringCount = SETUP_LIST_ELEMENTS_COUNT;
000234  f04f0006          MOV      r0,#6
000238  7668              STRB     r0,[r5,#0x19]
;;;112        setupList.strings = setupListElements;
00023a  f1a40080          SUB      r0,r4,#0x80
00023e  6228              STR      r0,[r5,#0x20]  ; setupList
;;;113        setupList.strings[0] = " Voltage limit";
000240  a176              ADR      r1,|L1.1052|
000242  6001              STR      r1,[r0,#0]
;;;114        setupList.strings[1] = " Current limit";
000244  a179              ADR      r1,|L1.1068|
000246  6041              STR      r1,[r0,#4]
;;;115        setupList.strings[2] = " Overload time";
000248  a17c              ADR      r1,|L1.1084|
00024a  6081              STR      r1,[r0,#8]
;;;116        setupList.strings[3] = " 3333";
00024c  a17f              ADR      r1,|L1.1100|
00024e  60c1              STR      r1,[r0,#0xc]
;;;117        setupList.strings[4] = " 4444";
000250  a180              ADR      r1,|L1.1108|
000252  6101              STR      r1,[r0,#0x10]
;;;118        setupList.strings[5] = "  ---- Exit ---- ";
000254  a181              ADR      r1,|L1.1116|
000256  6141              STR      r1,[r0,#0x14]
;;;119        setupList.handlers.count = 1;
000258  f8859010          STRB     r9,[r5,#0x10]
;;;120        setupList.handlers.elements = setupListHandlers;
00025c  4884              LDR      r0,|L1.1136|
00025e  6168              STR      r0,[r5,#0x14]  ; setupList
;;;121        setupList.handlers.elements[0].eventType = STRINGLIST_INDEX_CHANGED;
000260  f04f01c1          MOV      r1,#0xc1
000264  7001              STRB     r1,[r0,#0]
;;;122        setupList.handlers.elements[0].handler = &guiSetupList_onIndexChanged;
000266  4983              LDR      r1,|L1.1140|
000268  6041              STR      r1,[r0,#4]
;;;123        setupList.acceptFocusByTab = 0;
00026a  7828              LDRB     r0,[r5,#0]  ; setupList
00026c  f0200001          BIC      r0,r0,#1
000270  7028              STRB     r0,[r5,#0]
;;;124        setupList.tag = 255;
000272  f04f00ff          MOV      r0,#0xff
000276  70a8              STRB     r0,[r5,#2]
;;;125        setupList.processEvent = &guiSetupList_ProcessEvent;
000278  487f              LDR      r0,|L1.1144|
00027a  60e8              STR      r0,[r5,#0xc]  ; setupList
;;;126    
;;;127        // Voltage limit section
;;;128        guiCheckBox_Initialize(&checkBox_ApplyLowVoltageLimit, (guiGenericWidget_t *)&guiSetupPanel);
00027c  f5a47180          SUB      r1,r4,#0x100
000280  4638              MOV      r0,r7
000282  f7fffffe          BL       guiCheckBox_Initialize
;;;129        checkBox_ApplyLowVoltageLimit.font = &font_h10;
000286  f8c7a024          STR      r10,[r7,#0x24]  ; checkBox_ApplyLowVoltageLimit
;;;130        checkBox_ApplyLowVoltageLimit.x = 96 + 4;
00028a  2064              MOVS     r0,#0x64
00028c  81b8              STRH     r0,[r7,#0xc]
;;;131        checkBox_ApplyLowVoltageLimit.y = 0;
00028e  81fe              STRH     r6,[r7,#0xe]
;;;132        checkBox_ApplyLowVoltageLimit.width = 66;
000290  2042              MOVS     r0,#0x42
000292  8238              STRH     r0,[r7,#0x10]
;;;133        checkBox_ApplyLowVoltageLimit.height = 14;
000294  250e              MOVS     r5,#0xe
000296  827d              STRH     r5,[r7,#0x12]
;;;134        checkBox_ApplyLowVoltageLimit.text = "Low: [V]";
000298  a078              ADR      r0,|L1.1148|
00029a  6238              STR      r0,[r7,#0x20]  ; checkBox_ApplyLowVoltageLimit
;;;135        checkBox_ApplyLowVoltageLimit.tag = VOLTAGE_LIMIT_SECTION_TAG;
00029c  72be              STRB     r6,[r7,#0xa]
;;;136        checkBox_ApplyLowVoltageLimit.tabIndex = 1;
00029e  f887900b          STRB     r9,[r7,#0xb]
;;;137        checkBox_ApplyLowVoltageLimit.handlers.elements = &checkBoxHandlers_VoltageLimit[0];
0002a2  f1a40010          SUB      r0,r4,#0x10
0002a6  61f8              STR      r0,[r7,#0x1c]  ; checkBox_ApplyLowVoltageLimit
;;;138        checkBox_ApplyLowVoltageLimit.handlers.count = 1;
0002a8  f8879018          STRB     r9,[r7,#0x18]
;;;139        checkBox_ApplyLowVoltageLimit.handlers.elements[0].eventType = CHECKBOX_CHECKED_CHANGED;
0002ac  21c0              MOVS     r1,#0xc0
0002ae  7001              STRB     r1,[r0,#0]
;;;140        checkBox_ApplyLowVoltageLimit.handlers.elements[0].handler = onLowVoltageLimitChanged;
0002b0  4975              LDR      r1,|L1.1160|
0002b2  6041              STR      r1,[r0,#4]
;;;141    
;;;142    
;;;143        guiCheckBox_Initialize(&checkBox_ApplyHighVoltageLimit, (guiGenericWidget_t *)&guiSetupPanel);
0002b4  f1a001f0          SUB      r1,r0,#0xf0
0002b8  382c              SUBS     r0,r0,#0x2c
0002ba  f7fffffe          BL       guiCheckBox_Initialize
;;;144        checkBox_ApplyHighVoltageLimit.font = &font_h10;
0002be  f8c8a024          STR      r10,[r8,#0x24]  ; checkBox_ApplyHighVoltageLimit
;;;145        checkBox_ApplyHighVoltageLimit.x = 96 + 4;
0002c2  2064              MOVS     r0,#0x64
0002c4  f8a8000c          STRH     r0,[r8,#0xc]
;;;146        checkBox_ApplyHighVoltageLimit.y = 36;
0002c8  2024              MOVS     r0,#0x24
0002ca  f8a8000e          STRH     r0,[r8,#0xe]
;;;147        checkBox_ApplyHighVoltageLimit.width = 66;
0002ce  2042              MOVS     r0,#0x42
0002d0  f8a80010          STRH     r0,[r8,#0x10]
;;;148        checkBox_ApplyHighVoltageLimit.height = 14;
0002d4  f8a85012          STRH     r5,[r8,#0x12]
;;;149        checkBox_ApplyHighVoltageLimit.text = "High: [V]";
0002d8  a06c              ADR      r0,|L1.1164|
0002da  f8c80020          STR      r0,[r8,#0x20]  ; checkBox_ApplyHighVoltageLimit
;;;150        checkBox_ApplyHighVoltageLimit.tag = VOLTAGE_LIMIT_SECTION_TAG;
0002de  f888600a          STRB     r6,[r8,#0xa]
;;;151        checkBox_ApplyHighVoltageLimit.tabIndex = 3;
0002e2  2703              MOVS     r7,#3
0002e4  f888700b          STRB     r7,[r8,#0xb]
;;;152        checkBox_ApplyHighVoltageLimit.handlers.elements = &checkBoxHandlers_VoltageLimit[1];
0002e8  f1a40008          SUB      r0,r4,#8
0002ec  f8c8001c          STR      r0,[r8,#0x1c]  ; checkBox_ApplyHighVoltageLimit
;;;153        checkBox_ApplyHighVoltageLimit.handlers.count = 1;
0002f0  f8889018          STRB     r9,[r8,#0x18]
;;;154        checkBox_ApplyHighVoltageLimit.handlers.elements[0].eventType = CHECKBOX_CHECKED_CHANGED;
0002f4  21c0              MOVS     r1,#0xc0
0002f6  7001              STRB     r1,[r0,#0]
;;;155        checkBox_ApplyHighVoltageLimit.handlers.elements[0].handler = onHighVoltageLimitChanged;
0002f8  4967              LDR      r1,|L1.1176|
0002fa  6041              STR      r1,[r0,#4]
;;;156    
;;;157        guiSpinBox_Initialize(&spinBox_LowVoltageLimit, (guiGenericWidget_t *)&guiSetupPanel);
0002fc  f1a001f8          SUB      r1,r0,#0xf8
000300  3008              ADDS     r0,r0,#8
000302  f7fffffe          BL       guiSpinBox_Initialize
;;;158        spinBox_LowVoltageLimit.x = 96+10;
000306  f1040408          ADD      r4,r4,#8
00030a  206a              MOVS     r0,#0x6a
00030c  80a0              STRH     r0,[r4,#4]
;;;159        spinBox_LowVoltageLimit.y = 14;
00030e  80e5              STRH     r5,[r4,#6]
;;;160        spinBox_LowVoltageLimit.width = 60;
000310  f04f003c          MOV      r0,#0x3c
000314  8120              STRH     r0,[r4,#8]
;;;161        spinBox_LowVoltageLimit.height = 18;
000316  f04f0012          MOV      r0,#0x12
00031a  8160              STRH     r0,[r4,#0xa]
;;;162        spinBox_LowVoltageLimit.textRightOffset = -2;
00031c  f04f00fe          MOV      r0,#0xfe
000320  f884003d          STRB     r0,[r4,#0x3d]
;;;163        spinBox_LowVoltageLimit.textTopOffset = 2;
000324  f04f0502          MOV      r5,#2
000328  f884503e          STRB     r5,[r4,#0x3e]
;;;164        spinBox_LowVoltageLimit.tabIndex = 2;
00032c  70e5              STRB     r5,[r4,#3]
;;;165        spinBox_LowVoltageLimit.tag = VOLTAGE_LIMIT_SECTION_TAG;
00032e  70a6              STRB     r6,[r4,#2]
;;;166        spinBox_LowVoltageLimit.font = &font_h11;
000330  485a              LDR      r0,|L1.1180|
000332  61a0              STR      r0,[r4,#0x18]  ; spinBox_LowVoltageLimit
;;;167        spinBox_LowVoltageLimit.dotPosition = 2;
000334  77e5              STRB     r5,[r4,#0x1f]
;;;168        spinBox_LowVoltageLimit.activeDigit = 2;
000336  77a5              STRB     r5,[r4,#0x1e]
;;;169        spinBox_LowVoltageLimit.minDigitsToDisplay = 3;
000338  7767              STRB     r7,[r4,#0x1d]
;;;170        spinBox_LowVoltageLimit.restoreValueOnEscape = 1;
00033a  7f20              LDRB     r0,[r4,#0x1c]  ; spinBox_LowVoltageLimit
00033c  f0400010          ORR      r0,r0,#0x10
000340  7720              STRB     r0,[r4,#0x1c]
;;;171        spinBox_LowVoltageLimit.maxValue = 4100;
000342  f2410004          MOV      r0,#0x1004
000346  62a0              STR      r0,[r4,#0x28]  ; spinBox_LowVoltageLimit
;;;172        spinBox_LowVoltageLimit.minValue = 0;
000348  62e6              STR      r6,[r4,#0x2c]  ; spinBox_LowVoltageLimit
;;;173        spinBox_LowVoltageLimit.showFocus = 1;
00034a  7860              LDRB     r0,[r4,#1]  ; spinBox_LowVoltageLimit
00034c  f0400002          ORR      r0,r0,#2
000350  7060              STRB     r0,[r4,#1]
;;;174        spinBox_LowVoltageLimit.value = 1;
000352  f8c49020          STR      r9,[r4,#0x20]  ; spinBox_LowVoltageLimit
;;;175        guiSpinBox_SetValue(&spinBox_LowVoltageLimit, 0, 0);
000356  f04f0200          MOV      r2,#0
00035a  4611              MOV      r1,r2
00035c  f108003c          ADD      r0,r8,#0x3c
000360  f7fffffe          BL       guiSpinBox_SetValue
;;;176        spinBox_LowVoltageLimit.handlers.elements = &spinBoxHandlers_VoltageLimit[0];
000364  f10800cc          ADD      r0,r8,#0xcc
000368  6160              STR      r0,[r4,#0x14]  ; spinBox_LowVoltageLimit
;;;177        spinBox_LowVoltageLimit.handlers.count = 1;
00036a  f8849010          STRB     r9,[r4,#0x10]
;;;178        spinBox_LowVoltageLimit.handlers.elements[0].eventType = SPINBOX_VALUE_CHANGED;
00036e  21c1              MOVS     r1,#0xc1
000370  7001              STRB     r1,[r0,#0]
;;;179        spinBox_LowVoltageLimit.handlers.elements[0].handler = onLowVoltageLimitChanged;
000372  4945              LDR      r1,|L1.1160|
000374  6041              STR      r1,[r0,#4]
;;;180    
;;;181        guiSpinBox_Initialize(&spinBox_HighVoltageLimit, (guiGenericWidget_t *)&guiSetupPanel);
000376  f5a071c8          SUB      r1,r0,#0x190
00037a  3848              SUBS     r0,r0,#0x48
00037c  f7fffffe          BL       guiSpinBox_Initialize
;;;182        spinBox_HighVoltageLimit.x = 96+10;
000380  f1080184          ADD      r1,r8,#0x84
000384  206a              MOVS     r0,#0x6a
000386  8188              STRH     r0,[r1,#0xc]
;;;183        spinBox_HighVoltageLimit.y = 50;
000388  2032              MOVS     r0,#0x32
00038a  81c8              STRH     r0,[r1,#0xe]
;;;184        spinBox_HighVoltageLimit.width = 60;
00038c  203c              MOVS     r0,#0x3c
00038e  8208              STRH     r0,[r1,#0x10]
;;;185        spinBox_HighVoltageLimit.height = 18;
000390  2012              MOVS     r0,#0x12
000392  8248              STRH     r0,[r1,#0x12]
;;;186        spinBox_HighVoltageLimit.textRightOffset = -2;
000394  20fe              MOVS     r0,#0xfe
000396  f8810045          STRB     r0,[r1,#0x45]
;;;187        spinBox_HighVoltageLimit.textTopOffset = 2;
00039a  4608              MOV      r0,r1
00039c  f8805046          STRB     r5,[r0,#0x46]
;;;188        spinBox_HighVoltageLimit.tabIndex = 4;
0003a0  2004              MOVS     r0,#4
0003a2  72c8              STRB     r0,[r1,#0xb]
;;;189        spinBox_HighVoltageLimit.tag = VOLTAGE_LIMIT_SECTION_TAG;
0003a4  4608              MOV      r0,r1
0003a6  7286              STRB     r6,[r0,#0xa]
;;;190        spinBox_HighVoltageLimit.font = &font_h11;
0003a8  483c              LDR      r0,|L1.1180|
0003aa  6208              STR      r0,[r1,#0x20]  ; spinBox_HighVoltageLimit
;;;191        spinBox_HighVoltageLimit.dotPosition = 2;
0003ac  4608              MOV      r0,r1
0003ae  f8805027          STRB     r5,[r0,#0x27]
;;;192        spinBox_HighVoltageLimit.activeDigit = 2;
0003b2  f8805026          STRB     r5,[r0,#0x26]
;;;193        spinBox_HighVoltageLimit.minDigitsToDisplay = 3;
0003b6  f8807025          STRB     r7,[r0,#0x25]
;;;194        spinBox_HighVoltageLimit.restoreValueOnEscape = 1;
0003ba  f8900024          LDRB     r0,[r0,#0x24]  ; spinBox_HighVoltageLimit
0003be  f0400010          ORR      r0,r0,#0x10
0003c2  f8810024          STRB     r0,[r1,#0x24]
;;;195        spinBox_HighVoltageLimit.maxValue = 4100;
0003c6  f2410004          MOV      r0,#0x1004
0003ca  6308              STR      r0,[r1,#0x30]  ; spinBox_HighVoltageLimit
;;;196        spinBox_HighVoltageLimit.minValue = 0;
0003cc  4608              MOV      r0,r1
0003ce  6346              STR      r6,[r0,#0x34]  ; spinBox_HighVoltageLimit
;;;197        spinBox_HighVoltageLimit.showFocus = 1;
0003d0  7a40              LDRB     r0,[r0,#9]  ; spinBox_HighVoltageLimit
0003d2  f0400002          ORR      r0,r0,#2
0003d6  7248              STRB     r0,[r1,#9]
;;;198        spinBox_HighVoltageLimit.value = 1;
0003d8  4608              MOV      r0,r1
0003da  f8c09028          STR      r9,[r0,#0x28]  ; spinBox_HighVoltageLimit
;;;199        guiSpinBox_SetValue(&spinBox_HighVoltageLimit, 0, 0);
0003de  2200              MOVS     r2,#0
0003e0  4611              MOV      r1,r2
0003e2  f7fffffe          BL       guiSpinBox_SetValue
;;;200        spinBox_HighVoltageLimit.handlers.elements = &spinBoxHandlers_VoltageLimit[1];
0003e6  f10800d4          ADD      r0,r8,#0xd4
0003ea  f1a00150          SUB      r1,r0,#0x50
0003ee  61c8              STR      r0,[r1,#0x1c]  ; spinBox_HighVoltageLimit
;;;201        spinBox_HighVoltageLimit.handlers.count = 1;
0003f0  2201              MOVS     r2,#1
0003f2  760a              STRB     r2,[r1,#0x18]
;;;202        spinBox_HighVoltageLimit.handlers.elements[0].eventType = SPINBOX_VALUE_CHANGED;
0003f4  21c1              MOVS     r1,#0xc1
0003f6  7001              STRB     r1,[r0,#0]
;;;203        spinBox_HighVoltageLimit.handlers.elements[0].handler = onHighVoltageLimitChanged;
0003f8  4927              LDR      r1,|L1.1176|
0003fa  6041              STR      r1,[r0,#4]
;;;204    
;;;205    }
0003fc  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1024|
                          DCD      ||.bss||+0xc4
                  |L1.1028|
                          DCD      font_h10_bold
                  |L1.1032|
000408  53657474          DCB      "Settings",0
00040c  696e6773
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
                          DCD      guiSetupPanel_ProcessEvents
                  |L1.1048|
                          DCD      font_h10
                  |L1.1052|
00041c  20566f6c          DCB      " Voltage limit",0
000420  74616765
000424  206c696d
000428  697400  
00042b  00                DCB      0
                  |L1.1068|
00042c  20437572          DCB      " Current limit",0
000430  72656e74
000434  206c696d
000438  697400  
00043b  00                DCB      0
                  |L1.1084|
00043c  204f7665          DCB      " Overload time",0
000440  726c6f61
000444  64207469
000448  6d6500  
00044b  00                DCB      0
                  |L1.1100|
00044c  20333333          DCB      " 3333",0
000450  3300    
000452  00                DCB      0
000453  00                DCB      0
                  |L1.1108|
000454  20343434          DCB      " 4444",0
000458  3400    
00045a  00                DCB      0
00045b  00                DCB      0
                  |L1.1116|
00045c  20202d2d          DCB      "  ---- Exit ---- ",0
000460  2d2d2045
000464  78697420
000468  2d2d2d2d
00046c  2000    
00046e  00                DCB      0
00046f  00                DCB      0
                  |L1.1136|
                          DCD      ||.data||
                  |L1.1140|
                          DCD      guiSetupList_onIndexChanged
                  |L1.1144|
                          DCD      guiSetupList_ProcessEvent
                  |L1.1148|
00047c  4c6f773a          DCB      "Low: [V]",0
000480  205b565d
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
                          DCD      onLowVoltageLimitChanged
                  |L1.1164|
00048c  48696768          DCB      "High: [V]",0
000490  3a205b56
000494  5d00    
000496  00                DCB      0
000497  00                DCB      0
                  |L1.1176|
                          DCD      onHighVoltageLimitChanged
                  |L1.1180|
                          DCD      font_h11
                          ENDP

                  setLowVoltageLimitSetting PROC
;;;299    
;;;300    void setLowVoltageLimitSetting(uint8_t isEnabled, uint16_t value)
0004a0  b510              PUSH     {r4,lr}
;;;301    {
0004a2  460c              MOV      r4,r1
;;;302        guiCheckbox_SetChecked(&checkBox_ApplyLowVoltageLimit, isEnabled);
0004a4  4601              MOV      r1,r0
0004a6  480f              LDR      r0,|L1.1252|
0004a8  f7fffffe          BL       guiCheckbox_SetChecked
;;;303        guiSpinBox_SetValue(&spinBox_LowVoltageLimit, value/10, 0);
0004ac  200a              MOVS     r0,#0xa
0004ae  fbb4f1f0          UDIV     r1,r4,r0
0004b2  480c              LDR      r0,|L1.1252|
0004b4  2200              MOVS     r2,#0
0004b6  e8bd4010          POP      {r4,lr}
0004ba  3068              ADDS     r0,r0,#0x68
0004bc  f7ffbffe          B.W      guiSpinBox_SetValue
;;;304    }
;;;305    
                          ENDP

                  setHighVoltageLimitSetting PROC
;;;314    
;;;315    void setHighVoltageLimitSetting(uint8_t isEnabled, uint16_t value)
0004c0  b510              PUSH     {r4,lr}
;;;316    {
0004c2  460c              MOV      r4,r1
;;;317        guiCheckbox_SetChecked(&checkBox_ApplyHighVoltageLimit, isEnabled);
0004c4  4601              MOV      r1,r0
0004c6  4807              LDR      r0,|L1.1252|
0004c8  302c              ADDS     r0,r0,#0x2c
0004ca  f7fffffe          BL       guiCheckbox_SetChecked
;;;318        guiSpinBox_SetValue(&spinBox_HighVoltageLimit, value/10, 0);
0004ce  200a              MOVS     r0,#0xa
0004d0  fbb4f1f0          UDIV     r1,r4,r0
0004d4  4803              LDR      r0,|L1.1252|
0004d6  2200              MOVS     r2,#0
0004d8  e8bd4010          POP      {r4,lr}
0004dc  30b0              ADDS     r0,r0,#0xb0
0004de  f7ffbffe          B.W      guiSpinBox_SetValue
;;;319    }
;;;320    
                          ENDP

0004e2  0000              DCW      0x0000
                  |L1.1252|
                          DCD      ||.bss||+0x98

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  guiSetupPanel
                          %        44
                  guiSetupPanelElements
                          %        32
                  setupList
                          %        52
                  setupListElements
                          %        24
                  checkBox_ApplyLowVoltageLimit
                          %        44
                  checkBox_ApplyHighVoltageLimit
                          %        44
                  checkBoxHandlers_VoltageLimit
                          %        16
                  spinBox_LowVoltageLimit
                          %        72
                  spinBox_HighVoltageLimit
                          %        72
                  spinBoxHandlers_VoltageLimit
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  setupListHandlers
                          %        8
