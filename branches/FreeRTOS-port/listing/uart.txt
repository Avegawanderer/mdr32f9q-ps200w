; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\uart.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\uart.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\uart.crf src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UARTInit PROC
;;;34     
;;;35     void UARTInit(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37     	initRingBuffer(&uart2_rx_rbuf, uart2_rx_data_buff, RX_RING_BUFFER_SIZE);
000002  49d5              LDR      r1,|L1.856|
000004  22c8              MOVS     r2,#0xc8
000006  f1a100d8          SUB      r0,r1,#0xd8
00000a  f7fffffe          BL       initRingBuffer
;;;38     	initRingBuffer(&uart2_tx_rbuf, uart2_tx_data_buff, TX_RING_BUFFER_SIZE);
00000e  49d2              LDR      r1,|L1.856|
000010  22c8              MOVS     r2,#0xc8
000012  39c8              SUBS     r1,r1,#0xc8
000014  e8bd4010          POP      {r4,lr}
000018  f1a10020          SUB      r0,r1,#0x20
00001c  f7ffbffe          B.W      initRingBuffer
;;;39     }
;;;40     
                          ENDP

                  sendString2 PROC
;;;271    // Simple function to send two 0-terminated strings
;;;272    void sendString2(char *pstr1, char *pstr2)
000020  b570              PUSH     {r4-r6,lr}
;;;273    {
000022  4604              MOV      r4,r0
000024  460d              MOV      r5,r1
;;;274    	char temp_char;
;;;275    	while(temp_char = *pstr1++)
;;;276    	{
;;;277    		while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
000026  e006              B        |L1.54|
                  |L1.40|
000028  48cb              LDR      r0,|L1.856|
00002a  4631              MOV      r1,r6
00002c  38e8              SUBS     r0,r0,#0xe8
00002e  f7fffffe          BL       putIntoRingBuffer
000032  2800              CMP      r0,#0
000034  d0f8              BEQ      |L1.40|
                  |L1.54|
000036  f8146b01          LDRB     r6,[r4],#1            ;275
00003a  2e00              CMP      r6,#0                 ;275
00003c  d1f4              BNE      |L1.40|
00003e  e006              B        |L1.78|
                  |L1.64|
;;;278    	}	
;;;279    	while(temp_char = *pstr2++)
;;;280    	{
;;;281    		while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
000040  48c5              LDR      r0,|L1.856|
000042  4621              MOV      r1,r4
000044  38e8              SUBS     r0,r0,#0xe8
000046  f7fffffe          BL       putIntoRingBuffer
00004a  2800              CMP      r0,#0
00004c  d0f8              BEQ      |L1.64|
                  |L1.78|
00004e  f8154b01          LDRB     r4,[r5],#1            ;279
000052  2c00              CMP      r4,#0                 ;279
000054  d1f4              BNE      |L1.64|
;;;282    	}	
;;;283    }
000056  bd70              POP      {r4-r6,pc}
;;;284    
                          ENDP

                  vTaskUARTReceiver PROC
;;;42     
;;;43     void vTaskUARTReceiver(void *pvParameters) 
000058  b0ba              SUB      sp,sp,#0xe8
;;;44     {
;;;45     	char received_msg[RX_MESSAGE_MAX_LENGTH];
;;;46     	uint16_t msg_length = 0;
00005a  2400              MOVS     r4,#0
;;;47     	char *argv[MAX_WORDS_IN_MESSAGE];		// Array of pointers to separate words
;;;48     	uint16_t argc = 0;						// Count of words in message
00005c  2500              MOVS     r5,#0
;;;49     	char temp_char;
;;;50     	uint16_t search_for_word = 1;
00005e  2601              MOVS     r6,#1
;;;51     	uint8_t cmd_ok;
;;;52     	
;;;53     	
;;;54     	// Debug
;;;55     	uint16_t i;
;;;56     	uint32_t temp32u;
;;;57     	
;;;58     	char temp_str[50];
;;;59     	
;;;60     	portTickType lastExecutionTime = xTaskGetTickCount();
000060  f7fffffe          BL       xTaskGetTickCount
000064  9003              STR      r0,[sp,#0xc]
000066  f10d0898          ADD      r8,sp,#0x98           ;45
00006a  46a1              MOV      r9,r4                 ;46
;;;61     	
;;;62     	dispatch_incoming_msg_t dispatcher_msg;
;;;63     	
;;;64     	
;;;65     	while(1)
;;;66     	{
;;;67     		vTaskDelayUntil(&lastExecutionTime, 5);		// 10ms period
;;;68     
;;;69     		// Read full message from buffer
;;;70     		while(getFromRingBuffer(&uart2_rx_rbuf, &temp_char))
;;;71     		{
;;;72     			if (test_mode)
;;;73     			{
;;;74     				while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
;;;75     				continue;
;;;76     			}
;;;77     			if (temp_char == SPACING_SYMBOL)
;;;78     			{
;;;79     				received_msg[msg_length++] = '\0';
;;;80     				search_for_word = 1;
;;;81     			}
;;;82     			else if ((temp_char == MESSAGE_END_SYMBOL) || (temp_char == MESSAGE_NEW_LINE))
;;;83     			{
;;;84     				received_msg[msg_length++] = '\0';
;;;85     			}
;;;86     			else
;;;87     			{
;;;88     				// Normal char
;;;89     				if (search_for_word == 1)
;;;90     				{
;;;91     					argv[argc++] = &received_msg[msg_length];		// Found start position of a word
;;;92     					search_for_word = 0;
;;;93     				}
;;;94     				received_msg[msg_length++] = temp_char;
;;;95     			}
;;;96     			
;;;97     			
;;;98     			if ((temp_char == MESSAGE_END_SYMBOL) || (temp_char == MESSAGE_NEW_LINE) || (msg_length == RX_MESSAGE_MAX_LENGTH))
;;;99     			{
;;;100    				// Received full message OR maximum allowed message length is reached
;;;101    				// Parse message
;;;102    				if (argc != 0)
;;;103    				{
;;;104    					cmd_ok = 1;
;;;105    					dispatcher_msg.type = 0;
;;;106    					//----- Debug -----//
;;;107    			/*		for (i=0;i<argc;i++)
;;;108    					{
;;;109    						//printf("%s\r",argv[i]);	
;;;110    						sendString2(argv[i], "\r");
;;;111    					} */
;;;112    					//-----------------//
;;;113    					
;;;114    					//---------- Converter control -----------//
;;;115    					if (strcmp(argv[0], "on") == 0)							// Turn converter ON	
;;;116    					{
;;;117    						dispatcher_msg.type = DP_CONVERTER_TURN_ON;
;;;118    					}
;;;119    					else if (strcmp(argv[0], "off") == 0)					// Turn converter OFF
;;;120    					{
;;;121    						dispatcher_msg.type = DP_CONVERTER_TURN_OFF;
;;;122    					}
;;;123    					else if (strcmp(argv[0], "set_voltage") == 0)			// Setting converter voltage
;;;124    					{
;;;125    						if (argc < 2)
;;;126    						{
;;;127    							sendString2(argv[0], " ERR: missing argument [mV]\r");
;;;128    							cmd_ok = 0;
;;;129    						}
;;;130    						else
;;;131    						{
;;;132    							// Second argument is voltage value [mV]
;;;133    							dispatcher_msg.type = DP_CONVERTER_SET_VOLTAGE;
;;;134    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
;;;135    						}
;;;136    					}
;;;137    					else if (strcmp(argv[0], "set_current") == 0)			// Setting converter current
;;;138    					{
;;;139    						if (argc < 2)
;;;140    						{
;;;141    							sendString2(argv[0], " ERR: missing argument [mA]\r");
;;;142    							cmd_ok = 0;
;;;143    						}
;;;144    						else
;;;145    						{
;;;146    							// Second argument is current value [mA]
;;;147    							dispatcher_msg.type = DP_CONVERTER_SET_CURRENT;
;;;148    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
;;;149    						}
;;;150    					}
;;;151    					else if (strcmp(argv[0], "set_current_limit") == 0)			// Setting converter current limit
;;;152    					{
;;;153    						if (argc < 2)
;;;154    						{
;;;155    							sendString2(argv[0], " ERR: missing argument (20/40)[A]\r");
;;;156    							cmd_ok = 0;
;;;157    						}
;;;158    						else
;;;159    						{
;;;160    							// Second argument is current limit value [A]
;;;161    							dispatcher_msg.type = DP_CONVERTER_SET_CURRENT_LIMIT;
;;;162    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
;;;163    						}
;;;164    					}
;;;165    					//----- button and encoder emulation -----//
;;;166    					else if (strcmp(argv[0], "btn_esc") == 0)				// ESC button
;;;167    					{
;;;168    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
00006c  02b7              LSLS     r7,r6,#10
                  |L1.110|
00006e  2105              MOVS     r1,#5                 ;67
000070  a803              ADD      r0,sp,#0xc            ;67
000072  f7fffffe          BL       vTaskDelayUntil
000076  e0a6              B        |L1.454|
                  |L1.120|
000078  48b8              LDR      r0,|L1.860|
00007a  7800              LDRB     r0,[r0,#0]            ;72  ; test_mode
00007c  b140              CBZ      r0,|L1.144|
                  |L1.126|
00007e  48b6              LDR      r0,|L1.856|
000080  f89d1044          LDRB     r1,[sp,#0x44]         ;74
000084  38e8              SUBS     r0,r0,#0xe8           ;74
000086  f7fffffe          BL       putIntoRingBuffer
00008a  2800              CMP      r0,#0                 ;74
00008c  d0f7              BEQ      |L1.126|
00008e  e09a              B        |L1.454|
                  |L1.144|
000090  f89d0044          LDRB     r0,[sp,#0x44]         ;77
000094  2820              CMP      r0,#0x20              ;77
000096  d006              BEQ      |L1.166|
000098  280d              CMP      r0,#0xd               ;82
00009a  d00b              BEQ      |L1.180|
00009c  280a              CMP      r0,#0xa               ;82
00009e  d009              BEQ      |L1.180|
0000a0  2e01              CMP      r6,#1                 ;89
0000a2  d00d              BEQ      |L1.192|
0000a4  e015              B        |L1.210|
                  |L1.166|
0000a6  4621              MOV      r1,r4                 ;79
0000a8  1c64              ADDS     r4,r4,#1              ;79
0000aa  b2a4              UXTH     r4,r4                 ;79
0000ac  f8089001          STRB     r9,[r8,r1]            ;79
0000b0  2601              MOVS     r6,#1                 ;80
0000b2  e013              B        |L1.220|
                  |L1.180|
0000b4  4621              MOV      r1,r4                 ;84
0000b6  1c64              ADDS     r4,r4,#1              ;84
0000b8  b2a4              UXTH     r4,r4                 ;84
0000ba  f8089001          STRB     r9,[r8,r1]            ;84
0000be  e00d              B        |L1.220|
                  |L1.192|
0000c0  4629              MOV      r1,r5                 ;91
0000c2  ab12              ADD      r3,sp,#0x48           ;91
0000c4  eb080204          ADD      r2,r8,r4              ;91
0000c8  1c6d              ADDS     r5,r5,#1              ;91
0000ca  b2ad              UXTH     r5,r5                 ;91
0000cc  f8432021          STR      r2,[r3,r1,LSL #2]     ;91
0000d0  2600              MOVS     r6,#0                 ;92
                  |L1.210|
0000d2  4621              MOV      r1,r4                 ;94
0000d4  1c64              ADDS     r4,r4,#1              ;94
0000d6  b2a4              UXTH     r4,r4                 ;94
0000d8  f8080001          STRB     r0,[r8,r1]            ;94
                  |L1.220|
0000dc  280d              CMP      r0,#0xd               ;98
0000de  d003              BEQ      |L1.232|
0000e0  280a              CMP      r0,#0xa               ;98
0000e2  d001              BEQ      |L1.232|
0000e4  2c50              CMP      r4,#0x50              ;98
0000e6  d16e              BNE      |L1.454|
                  |L1.232|
0000e8  2d00              CMP      r5,#0                 ;102
0000ea  d069              BEQ      |L1.448|
0000ec  2401              MOVS     r4,#1                 ;104
0000ee  f8cd9004          STR      r9,[sp,#4]            ;105
0000f2  a19b              ADR      r1,|L1.864|
0000f4  9812              LDR      r0,[sp,#0x48]         ;115
0000f6  f7fffffe          BL       strcmp
0000fa  2800              CMP      r0,#0                 ;115
0000fc  d06c              BEQ      |L1.472|
0000fe  a199              ADR      r1,|L1.868|
000100  9812              LDR      r0,[sp,#0x48]         ;119
000102  f7fffffe          BL       strcmp
000106  2800              CMP      r0,#0                 ;119
000108  d06a              BEQ      |L1.480|
00010a  a197              ADR      r1,|L1.872|
00010c  9812              LDR      r0,[sp,#0x48]         ;123
00010e  f7fffffe          BL       strcmp
000112  2800              CMP      r0,#0                 ;123
000114  d068              BEQ      |L1.488|
000116  a197              ADR      r1,|L1.884|
000118  9812              LDR      r0,[sp,#0x48]         ;137
00011a  f7fffffe          BL       strcmp
00011e  2800              CMP      r0,#0                 ;137
000120  d077              BEQ      |L1.530|
000122  a197              ADR      r1,|L1.896|
000124  9812              LDR      r0,[sp,#0x48]         ;151
000126  f7fffffe          BL       strcmp
00012a  2800              CMP      r0,#0                 ;151
00012c  d06f              BEQ      |L1.526|
00012e  a199              ADR      r1,|L1.916|
000130  9812              LDR      r0,[sp,#0x48]         ;166
000132  f7fffffe          BL       strcmp
000136  2800              CMP      r0,#0                 ;166
000138  d06a              BEQ      |L1.528|
;;;169    						dispatcher_msg.data = BTN_ESC;
;;;170    					}
;;;171    					else if (strcmp(argv[0], "btn_ok") == 0)				// OK button
00013a  a198              ADR      r1,|L1.924|
00013c  9812              LDR      r0,[sp,#0x48]
00013e  f7fffffe          BL       strcmp
000142  2800              CMP      r0,#0
000144  d077              BEQ      |L1.566|
;;;172    					{
;;;173    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;174    						dispatcher_msg.data = BTN_OK;
;;;175    					}
;;;176    					else if (strcmp(argv[0], "btn_left") == 0)				// LEFT button
000146  a197              ADR      r1,|L1.932|
000148  9812              LDR      r0,[sp,#0x48]
00014a  f7fffffe          BL       strcmp
00014e  2800              CMP      r0,#0
000150  d072              BEQ      |L1.568|
;;;177    					{
;;;178    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;179    						dispatcher_msg.data = BTN_LEFT;
;;;180    					}
;;;181    					else if (strcmp(argv[0], "btn_right") == 0)				// RIGHT button
000152  a197              ADR      r1,|L1.944|
000154  9812              LDR      r0,[sp,#0x48]
000156  f7fffffe          BL       strcmp
00015a  2800              CMP      r0,#0
00015c  d06d              BEQ      |L1.570|
;;;182    					{
;;;183    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;184    						dispatcher_msg.data = BTN_RIGHT;
;;;185    					}
;;;186    					else if (strcmp(argv[0], "btn_on") == 0)				// ON button
00015e  a197              ADR      r1,|L1.956|
000160  9812              LDR      r0,[sp,#0x48]
000162  f7fffffe          BL       strcmp
000166  2800              CMP      r0,#0
000168  d068              BEQ      |L1.572|
;;;187    					{
;;;188    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;189    						dispatcher_msg.data = BTN_ON;
;;;190    					}
;;;191    					else if (strcmp(argv[0], "btn_off") == 0)				// OFF button
00016a  a196              ADR      r1,|L1.964|
00016c  9812              LDR      r0,[sp,#0x48]
00016e  f7fffffe          BL       strcmp
000172  2800              CMP      r0,#0
000174  d075              BEQ      |L1.610|
;;;192    					{
;;;193    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;194    						dispatcher_msg.data = BTN_OFF;
;;;195    					}
;;;196    					else if (strcmp(argv[0], "push_encoder") == 0)			// Encoder push
000176  a195              ADR      r1,|L1.972|
000178  9812              LDR      r0,[sp,#0x48]
00017a  f7fffffe          BL       strcmp
00017e  2800              CMP      r0,#0
000180  d070              BEQ      |L1.612|
;;;197    					{
;;;198    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
;;;199    						dispatcher_msg.data = BTN_ENCODER;
;;;200    					}
;;;201    					else if (strcmp(argv[0], "encoder_delta") == 0)			// Encoder delta
000182  a196              ADR      r1,|L1.988|
000184  9812              LDR      r0,[sp,#0x48]
000186  f7fffffe          BL       strcmp
00018a  2800              CMP      r0,#0
00018c  d06b              BEQ      |L1.614|
;;;202    					{
;;;203    						if (argc < 2)
;;;204    						{
;;;205    							sendString2(argv[0], " ERR: missing argument [ticks]\r");
;;;206    							cmd_ok = 0;
;;;207    						}
;;;208    						else
;;;209    						{
;;;210    							// Second argument is encoder ticks (signed)
;;;211    							dispatcher_msg.type = DP_EMU_ENC_DELTA;
;;;212    							dispatcher_msg.data = (uint32_t)strtol(argv[1], 0, 0);
;;;213    						}
;;;214    					}
;;;215    					//----------------- misc -----------------//
;;;216    					else if (strcmp(argv[0], "get_time_profiling") == 0)			// Time profiling
00018e  a197              ADR      r1,|L1.1004|
000190  9812              LDR      r0,[sp,#0x48]
000192  f7fffffe          BL       strcmp
000196  2800              CMP      r0,#0
000198  d072              BEQ      |L1.640|
;;;217    					{
;;;218    						sprintf(temp_str,"%d\r",time_profile.max_ticks_in_Systick_hook);
;;;219    						sendString2("Systick hook max ticks: ", temp_str);
;;;220    						sprintf(temp_str,"%d\r",time_profile.max_ticks_in_Timer2_ISR);
;;;221    						sendString2("Timer2 ISR max ticks: ", temp_str);
;;;222    					}
;;;223    					//------------ unknown command -----------//
;;;224    					else
;;;225    					{
;;;226    						sendString2(argv[0], " ERR: unknown cmd\r");
00019a  a199              ADR      r1,|L1.1024|
00019c  9812              LDR      r0,[sp,#0x48]
00019e  f7fffffe          BL       sendString2
;;;227    						cmd_ok = 0;
0001a2  2400              MOVS     r4,#0
                  |L1.420|
;;;228    					}
;;;229    					
;;;230    					//----------------------------------------//
;;;231    					
;;;232    					// Send result to dispatcher
;;;233    					if (dispatcher_msg.type)
0001a4  9801              LDR      r0,[sp,#4]
0001a6  b130              CBZ      r0,|L1.438|
;;;234    						xQueueSendToBack(xQueueDispatcher, &dispatcher_msg, 0);
0001a8  489a              LDR      r0,|L1.1044|
0001aa  2300              MOVS     r3,#0
0001ac  461a              MOV      r2,r3
0001ae  a901              ADD      r1,sp,#4
0001b0  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
0001b2  f7fffffe          BL       xQueueGenericSend
                  |L1.438|
;;;235    					
;;;236    					// Confirm
;;;237    					if (cmd_ok)
0001b6  b11c              CBZ      r4,|L1.448|
;;;238    						sendString2(argv[0], " OK\r");
0001b8  a197              ADR      r1,|L1.1048|
0001ba  9812              LDR      r0,[sp,#0x48]
0001bc  f7fffffe          BL       sendString2
                  |L1.448|
;;;239    			
;;;240    				}			
;;;241    				msg_length = 0;
0001c0  2400              MOVS     r4,#0
;;;242    				argc = 0;
0001c2  2500              MOVS     r5,#0
;;;243    				search_for_word = 1;
0001c4  2601              MOVS     r6,#1
                  |L1.454|
0001c6  4864              LDR      r0,|L1.856|
0001c8  a911              ADD      r1,sp,#0x44           ;70
0001ca  38d8              SUBS     r0,r0,#0xd8           ;70
0001cc  f7fffffe          BL       getFromRingBuffer
0001d0  2800              CMP      r0,#0                 ;70
0001d2  f43faf4c          BEQ      |L1.110|
0001d6  e74f              B        |L1.120|
                  |L1.472|
0001d8  f44f7000          MOV      r0,#0x200             ;117
0001dc  9001              STR      r0,[sp,#4]            ;117
0001de  e7e1              B        |L1.420|
                  |L1.480|
0001e0  f2402001          MOV      r0,#0x201             ;121
0001e4  9001              STR      r0,[sp,#4]            ;121
0001e6  e7dd              B        |L1.420|
                  |L1.488|
0001e8  2d02              CMP      r5,#2                 ;125
0001ea  d205              BCS      |L1.504|
0001ec  a18c              ADR      r1,|L1.1056|
0001ee  9812              LDR      r0,[sp,#0x48]         ;127
0001f0  f7fffffe          BL       sendString2
0001f4  2400              MOVS     r4,#0                 ;128
0001f6  e7d5              B        |L1.420|
                  |L1.504|
0001f8  f44f7004          MOV      r0,#0x210             ;133
0001fc  9001              STR      r0,[sp,#4]            ;133
0001fe  2200              MOVS     r2,#0                 ;134
000200  4611              MOV      r1,r2                 ;134
000202  9813              LDR      r0,[sp,#0x4c]         ;134
000204  f7fffffe          BL       strtoul
000208  9002              STR      r0,[sp,#8]            ;134
00020a  e7cb              B        |L1.420|
00020c  e001              B        |L1.530|
                  |L1.526|
00020e  e016              B        |L1.574|
                  |L1.528|
000210  e02a              B        |L1.616|
                  |L1.530|
000212  2d02              CMP      r5,#2                 ;139
000214  d205              BCS      |L1.546|
000216  a18a              ADR      r1,|L1.1088|
000218  9812              LDR      r0,[sp,#0x48]         ;141
00021a  f7fffffe          BL       sendString2
00021e  2400              MOVS     r4,#0                 ;142
000220  e7c0              B        |L1.420|
                  |L1.546|
000222  f2402011          MOV      r0,#0x211             ;147
000226  9001              STR      r0,[sp,#4]            ;147
000228  2200              MOVS     r2,#0                 ;148
00022a  4611              MOV      r1,r2                 ;148
00022c  9813              LDR      r0,[sp,#0x4c]         ;148
00022e  f7fffffe          BL       strtoul
000232  9002              STR      r0,[sp,#8]            ;148
000234  e7b6              B        |L1.420|
                  |L1.566|
000236  e01b              B        |L1.624|
                  |L1.568|
000238  e01e              B        |L1.632|
                  |L1.570|
00023a  e022              B        |L1.642|
                  |L1.572|
00023c  e025              B        |L1.650|
                  |L1.574|
00023e  2d02              CMP      r5,#2                 ;153
000240  d205              BCS      |L1.590|
000242  a187              ADR      r1,|L1.1120|
000244  9812              LDR      r0,[sp,#0x48]         ;155
000246  f7fffffe          BL       sendString2
00024a  2400              MOVS     r4,#0                 ;156
00024c  e7aa              B        |L1.420|
                  |L1.590|
00024e  f2402012          MOV      r0,#0x212             ;161
000252  9001              STR      r0,[sp,#4]            ;161
000254  2200              MOVS     r2,#0                 ;162
000256  4611              MOV      r1,r2                 ;162
000258  9813              LDR      r0,[sp,#0x4c]         ;162
00025a  f7fffffe          BL       strtoul
00025e  9002              STR      r0,[sp,#8]            ;162
000260  e7a0              B        |L1.420|
                  |L1.610|
000262  e016              B        |L1.658|
                  |L1.612|
000264  e019              B        |L1.666|
                  |L1.614|
000266  e01c              B        |L1.674|
                  |L1.616|
000268  9701              STR      r7,[sp,#4]            ;168
00026a  2001              MOVS     r0,#1                 ;169
00026c  9002              STR      r0,[sp,#8]            ;169
00026e  e799              B        |L1.420|
                  |L1.624|
000270  9701              STR      r7,[sp,#4]            ;173
000272  2008              MOVS     r0,#8                 ;174
000274  9002              STR      r0,[sp,#8]            ;174
000276  e795              B        |L1.420|
                  |L1.632|
000278  9701              STR      r7,[sp,#4]            ;178
00027a  2002              MOVS     r0,#2                 ;179
00027c  9002              STR      r0,[sp,#8]            ;179
00027e  e791              B        |L1.420|
                  |L1.640|
000280  e021              B        |L1.710|
                  |L1.642|
000282  9701              STR      r7,[sp,#4]            ;183
000284  2004              MOVS     r0,#4                 ;184
000286  9002              STR      r0,[sp,#8]            ;184
000288  e78c              B        |L1.420|
                  |L1.650|
00028a  9701              STR      r7,[sp,#4]            ;188
00028c  2040              MOVS     r0,#0x40              ;189
00028e  9002              STR      r0,[sp,#8]            ;189
000290  e788              B        |L1.420|
                  |L1.658|
000292  9701              STR      r7,[sp,#4]            ;193
000294  2080              MOVS     r0,#0x80              ;194
000296  9002              STR      r0,[sp,#8]            ;194
000298  e784              B        |L1.420|
                  |L1.666|
00029a  9701              STR      r7,[sp,#4]            ;198
00029c  2010              MOVS     r0,#0x10              ;199
00029e  9002              STR      r0,[sp,#8]            ;199
0002a0  e780              B        |L1.420|
                  |L1.674|
0002a2  2d02              CMP      r5,#2                 ;203
0002a4  d205              BCS      |L1.690|
0002a6  a177              ADR      r1,|L1.1156|
0002a8  9812              LDR      r0,[sp,#0x48]         ;205
0002aa  f7fffffe          BL       sendString2
0002ae  2400              MOVS     r4,#0                 ;206
0002b0  e778              B        |L1.420|
                  |L1.690|
0002b2  f44f6082          MOV      r0,#0x410             ;211
0002b6  9001              STR      r0,[sp,#4]            ;211
0002b8  2200              MOVS     r2,#0                 ;212
0002ba  4611              MOV      r1,r2                 ;212
0002bc  9813              LDR      r0,[sp,#0x4c]         ;212
0002be  f7fffffe          BL       strtol
0002c2  9002              STR      r0,[sp,#8]            ;212
0002c4  e76e              B        |L1.420|
                  |L1.710|
0002c6  4d77              LDR      r5,|L1.1188|
0002c8  a177              ADR      r1,|L1.1192|
0002ca  a804              ADD      r0,sp,#0x10           ;218
0002cc  682a              LDR      r2,[r5,#0]            ;218  ; time_profile
0002ce  f7fffffe          BL       __2sprintf
0002d2  a904              ADD      r1,sp,#0x10           ;219
0002d4  a075              ADR      r0,|L1.1196|
0002d6  f7fffffe          BL       sendString2
0002da  a173              ADR      r1,|L1.1192|
0002dc  a804              ADD      r0,sp,#0x10           ;220
0002de  686a              LDR      r2,[r5,#4]            ;220  ; time_profile
0002e0  f7fffffe          BL       __2sprintf
0002e4  a904              ADD      r1,sp,#0x10           ;221
0002e6  a078              ADR      r0,|L1.1224|
0002e8  f7fffffe          BL       sendString2
0002ec  e75a              B        |L1.420|
;;;244    			}
;;;245    		}  // \getFromRingBuffer()
;;;246    		
;;;247    	}
;;;248    }
;;;249    
                          ENDP

                  processUartRX PROC
;;;251    
;;;252    void processUartRX(void)
0002ee  b570              PUSH     {r4-r6,lr}
;;;253    {
;;;254    	uint16_t temp;
;;;255    	while ( (UART_GetFlagStatus(MDR_UARTx,UART_FLAG_RXFE) == RESET) && (!ringBufferIsFull(uart2_rx_rbuf)) )
;;;256    	{
;;;257    		temp = UART_ReceiveData(MDR_UARTx);
;;;258    		if ((temp & ( (1<<UART_Data_BE) | (1<<UART_Data_PE) | (1<<UART_Data_FE) )) == 0)
;;;259    		{
;;;260    			putIntoRingBuffer(&uart2_rx_rbuf, (char)temp);
0002f0  4c19              LDR      r4,|L1.856|
0002f2  4d7b              LDR      r5,|L1.1248|
0002f4  3cd8              SUBS     r4,r4,#0xd8
0002f6  e00a              B        |L1.782|
                  |L1.760|
0002f8  4628              MOV      r0,r5                 ;257
0002fa  f7fffffe          BL       UART_ReceiveData
0002fe  f4106fe0          TST      r0,#0x700             ;258
000302  d104              BNE      |L1.782|
000304  b2c1              UXTB     r1,r0
000306  4814              LDR      r0,|L1.856|
000308  38d8              SUBS     r0,r0,#0xd8
00030a  f7fffffe          BL       putIntoRingBuffer
                  |L1.782|
00030e  2110              MOVS     r1,#0x10              ;255
000310  4628              MOV      r0,r5                 ;255
000312  f7fffffe          BL       UART_GetFlagStatus
000316  2800              CMP      r0,#0                 ;255
000318  d106              BNE      |L1.808|
00031a  8920              LDRH     r0,[r4,#8]            ;255  ; uart2_rx_rbuf
00031c  8961              LDRH     r1,[r4,#0xa]          ;255  ; uart2_rx_rbuf
00031e  1a40              SUBS     r0,r0,r1              ;255
000320  89a1              LDRH     r1,[r4,#0xc]          ;255  ; uart2_rx_rbuf
000322  b280              UXTH     r0,r0                 ;255
000324  4288              CMP      r0,r1                 ;255
000326  d1e7              BNE      |L1.760|
                  |L1.808|
;;;261    		}
;;;262    	} 
;;;263    }
000328  bd70              POP      {r4-r6,pc}
;;;264    
                          ENDP

                  processUartTX PROC
;;;285    
;;;286    void processUartTX(void)
00032a  b538              PUSH     {r3-r5,lr}
;;;287    {
;;;288    	char temp;
;;;289    	//while ( (UART_GetFlagStatus(MDR_UART2,UART_FLAG_TXFF) == RESET) && (!ringBufferIsEmpty(uart2_tx_rbuf)) )	//2216
;;;290    	while ( (!(MDR_UARTx->FR & UART_FLAG_TXFF)) && (!ringBufferIsEmpty(uart2_tx_rbuf)) ) //1868
;;;291    	{
;;;292    		getFromRingBuffer(&uart2_tx_rbuf, &temp);
00032c  4d0a              LDR      r5,|L1.856|
;;;293    		UART_SendData(MDR_UARTx,(uint16_t)temp);
00032e  4c6c              LDR      r4,|L1.1248|
000330  3de8              SUBS     r5,r5,#0xe8           ;292
000332  e009              B        |L1.840|
                  |L1.820|
000334  4808              LDR      r0,|L1.856|
000336  4669              MOV      r1,sp                 ;292
000338  38e8              SUBS     r0,r0,#0xe8           ;292
00033a  f7fffffe          BL       getFromRingBuffer
00033e  f89d1000          LDRB     r1,[sp,#0]
000342  4620              MOV      r0,r4
000344  f7fffffe          BL       UART_SendData
                  |L1.840|
000348  69a1              LDR      r1,[r4,#0x18]         ;290
00034a  0689              LSLS     r1,r1,#26             ;290
00034c  d403              BMI      |L1.854|
00034e  8929              LDRH     r1,[r5,#8]            ;290  ; uart2_tx_rbuf
000350  896a              LDRH     r2,[r5,#0xa]          ;290  ; uart2_tx_rbuf
000352  4291              CMP      r1,r2                 ;290
000354  d1ee              BNE      |L1.820|
                  |L1.854|
;;;294    	}
;;;295    }
000356  bd38              POP      {r3-r5,pc}
;;;296    
                          ENDP

                  |L1.856|
                          DCD      ||.bss||+0xe8
                  |L1.860|
                          DCD      ||.data||
                  |L1.864|
000360  6f6e00            DCB      "on",0
000363  00                DCB      0
                  |L1.868|
000364  6f666600          DCB      "off",0
                  |L1.872|
000368  7365745f          DCB      "set_voltage",0
00036c  766f6c74
000370  61676500
                  |L1.884|
000374  7365745f          DCB      "set_current",0
000378  63757272
00037c  656e7400
                  |L1.896|
000380  7365745f          DCB      "set_current_limit",0
000384  63757272
000388  656e745f
00038c  6c696d69
000390  7400    
000392  00                DCB      0
000393  00                DCB      0
                  |L1.916|
000394  62746e5f          DCB      "btn_esc",0
000398  65736300
                  |L1.924|
00039c  62746e5f          DCB      "btn_ok",0
0003a0  6f6b00  
0003a3  00                DCB      0
                  |L1.932|
0003a4  62746e5f          DCB      "btn_left",0
0003a8  6c656674
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L1.944|
0003b0  62746e5f          DCB      "btn_right",0
0003b4  72696768
0003b8  7400    
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L1.956|
0003bc  62746e5f          DCB      "btn_on",0
0003c0  6f6e00  
0003c3  00                DCB      0
                  |L1.964|
0003c4  62746e5f          DCB      "btn_off",0
0003c8  6f666600
                  |L1.972|
0003cc  70757368          DCB      "push_encoder",0
0003d0  5f656e63
0003d4  6f646572
0003d8  00      
0003d9  00                DCB      0
0003da  00                DCB      0
0003db  00                DCB      0
                  |L1.988|
0003dc  656e636f          DCB      "encoder_delta",0
0003e0  6465725f
0003e4  64656c74
0003e8  6100    
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L1.1004|
0003ec  6765745f          DCB      "get_time_profiling",0
0003f0  74696d65
0003f4  5f70726f
0003f8  66696c69
0003fc  6e6700  
0003ff  00                DCB      0
                  |L1.1024|
000400  20455252          DCB      " ERR: unknown cmd\r",0
000404  3a20756e
000408  6b6e6f77
00040c  6e20636d
000410  640d00  
000413  00                DCB      0
                  |L1.1044|
                          DCD      xQueueDispatcher
                  |L1.1048|
000418  204f4b0d          DCB      " OK\r",0
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
000420  20455252          DCB      " ERR: missing argument [mV]\r",0
000424  3a206d69
000428  7373696e
00042c  67206172
000430  67756d65
000434  6e74205b
000438  6d565d0d
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
000440  20455252          DCB      " ERR: missing argument [mA]\r",0
000444  3a206d69
000448  7373696e
00044c  67206172
000450  67756d65
000454  6e74205b
000458  6d415d0d
00045c  00      
00045d  00                DCB      0
00045e  00                DCB      0
00045f  00                DCB      0
                  |L1.1120|
000460  20455252          DCB      " ERR: missing argument (20/40)[A]\r",0
000464  3a206d69
000468  7373696e
00046c  67206172
000470  67756d65
000474  6e742028
000478  32302f34
00047c  30295b41
000480  5d0d00  
000483  00                DCB      0
                  |L1.1156|
000484  20455252          DCB      " ERR: missing argument [ticks]\r",0
000488  3a206d69
00048c  7373696e
000490  67206172
000494  67756d65
000498  6e74205b
00049c  7469636b
0004a0  735d0d00
                  |L1.1188|
                          DCD      time_profile
                  |L1.1192|
0004a8  25640d00          DCB      "%d\r",0
                  |L1.1196|
0004ac  53797374          DCB      "Systick hook max ticks: ",0
0004b0  69636b20
0004b4  686f6f6b
0004b8  206d6178
0004bc  20746963
0004c0  6b733a20
0004c4  00      
0004c5  00                DCB      0
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L1.1224|
0004c8  54696d65          DCB      "Timer2 ISR max ticks: ",0
0004cc  72322049
0004d0  5352206d
0004d4  61782074
0004d8  69636b73
0004dc  3a2000  
0004df  00                DCB      0
                  |L1.1248|
                          DCD      0x40030000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart2_tx_rbuf
                          %        16
                  uart2_rx_rbuf
                          %        16
                  uart2_tx_data_buff
                          %        200
                  uart2_rx_data_buff
                          %        200

                          AREA ||.data||, DATA, ALIGN=0

                  test_mode
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "src\\uart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_uart_c_92b36d64____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_uart_c_92b36d64____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_uart_c_92b36d64____REVSH|
#line 130
|__asm___6_uart_c_92b36d64____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
