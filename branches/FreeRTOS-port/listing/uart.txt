; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\uart.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\uart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\uart.crf src\uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UARTInit PROC
;;;32     
;;;33     void UARTInit(void)
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	initRingBuffer(&uart2_rx_rbuf, uart2_rx_data_buff, RX_RING_BUFFER_SIZE);
000002  22c8              MOVS     r2,#0xc8
000004  49d1              LDR      r1,|L1.844|
000006  48d2              LDR      r0,|L1.848|
000008  f7fffffe          BL       initRingBuffer
;;;36     	initRingBuffer(&uart2_tx_rbuf, uart2_tx_data_buff, TX_RING_BUFFER_SIZE);
00000c  22c8              MOVS     r2,#0xc8
00000e  49d1              LDR      r1,|L1.852|
000010  48d1              LDR      r0,|L1.856|
000012  f7fffffe          BL       initRingBuffer
;;;37     }
000016  bd10              POP      {r4,pc}
;;;38     
                          ENDP

                  sendString2 PROC
;;;269    // Simple function to send two 0-terminated strings
;;;270    void sendString2(char *pstr1, char *pstr2)
000018  b570              PUSH     {r4-r6,lr}
;;;271    {
00001a  4604              MOV      r4,r0
00001c  460d              MOV      r5,r1
;;;272    	char temp_char;
;;;273    	while(temp_char = *pstr1++)
00001e  e006              B        |L1.46|
                  |L1.32|
;;;274    	{
;;;275    		while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
000020  bf00              NOP      
                  |L1.34|
000022  4631              MOV      r1,r6
000024  48cc              LDR      r0,|L1.856|
000026  f7fffffe          BL       putIntoRingBuffer
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L1.34|
                  |L1.46|
00002e  f8146b01          LDRB     r6,[r4],#1            ;273
000032  2e00              CMP      r6,#0                 ;273
000034  d1f4              BNE      |L1.32|
;;;276    	}	
;;;277    	while(temp_char = *pstr2++)
000036  e006              B        |L1.70|
                  |L1.56|
;;;278    	{
;;;279    		while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
000038  bf00              NOP      
                  |L1.58|
00003a  4631              MOV      r1,r6
00003c  48c6              LDR      r0,|L1.856|
00003e  f7fffffe          BL       putIntoRingBuffer
000042  2800              CMP      r0,#0
000044  d0f9              BEQ      |L1.58|
                  |L1.70|
000046  f8151b01          LDRB     r1,[r5],#1            ;277
00004a  000e              MOVS     r6,r1                 ;277
00004c  d1f4              BNE      |L1.56|
;;;280    	}	
;;;281    }
00004e  bd70              POP      {r4-r6,pc}
;;;282    
                          ENDP

                  vTaskUARTReceiver PROC
;;;40     
;;;41     void vTaskUARTReceiver(void *pvParameters) 
000050  b0ba              SUB      sp,sp,#0xe8
;;;42     {
;;;43     	char received_msg[RX_MESSAGE_MAX_LENGTH];
;;;44     	uint16_t msg_length = 0;
000052  2500              MOVS     r5,#0
;;;45     	char *argv[MAX_WORDS_IN_MESSAGE];		// Array of pointers to separate words
;;;46     	uint16_t argc = 0;						// Count of words in message
000054  2400              MOVS     r4,#0
;;;47     	char temp_char;
;;;48     	uint16_t search_for_word = 1;
000056  2601              MOVS     r6,#1
;;;49     	uint8_t cmd_ok;
;;;50     	
;;;51     	
;;;52     	// Debug
;;;53     	uint16_t i;
;;;54     	uint32_t temp32u;
;;;55     	
;;;56     	char temp_str[50];
;;;57     	
;;;58     	portTickType lastExecutionTime = xTaskGetTickCount();
000058  f7fffffe          BL       xTaskGetTickCount
00005c  9003              STR      r0,[sp,#0xc]
;;;59     	
;;;60     	dispatch_incoming_msg_t dispatcher_msg;
;;;61     	
;;;62     	
;;;63     	while(1)
00005e  e140              B        |L1.738|
                  |L1.96|
;;;64     	{
;;;65     		vTaskDelayUntil(&lastExecutionTime, 5);		// 10ms period
000060  2105              MOVS     r1,#5
000062  a803              ADD      r0,sp,#0xc
000064  f7fffffe          BL       vTaskDelayUntil
;;;66     
;;;67     		// Read full message from buffer
;;;68     		while(getFromRingBuffer(&uart2_rx_rbuf, &temp_char))
000068  e134              B        |L1.724|
                  |L1.106|
;;;69     		{
;;;70     			if (test_mode)
00006a  48bc              LDR      r0,|L1.860|
00006c  7800              LDRB     r0,[r0,#0]  ; test_mode
00006e  b140              CBZ      r0,|L1.130|
;;;71     			{
;;;72     				while(!putIntoRingBuffer(&uart2_tx_rbuf, temp_char));			
000070  bf00              NOP      
                  |L1.114|
000072  f89d1044          LDRB     r1,[sp,#0x44]
000076  48b8              LDR      r0,|L1.856|
000078  f7fffffe          BL       putIntoRingBuffer
00007c  2800              CMP      r0,#0
00007e  d0f8              BEQ      |L1.114|
;;;73     				continue;
000080  e128              B        |L1.724|
                  |L1.130|
;;;74     			}
;;;75     			if (temp_char == SPACING_SYMBOL)
000082  f89d0044          LDRB     r0,[sp,#0x44]
000086  2820              CMP      r0,#0x20
000088  d107              BNE      |L1.154|
;;;76     			{
;;;77     				received_msg[msg_length++] = '\0';
00008a  2200              MOVS     r2,#0
00008c  4628              MOV      r0,r5
00008e  1c69              ADDS     r1,r5,#1
000090  b28d              UXTH     r5,r1
000092  a926              ADD      r1,sp,#0x98
000094  540a              STRB     r2,[r1,r0]
;;;78     				search_for_word = 1;
000096  2601              MOVS     r6,#1
000098  e020              B        |L1.220|
                  |L1.154|
;;;79     			}
;;;80     			else if ((temp_char == MESSAGE_END_SYMBOL) || (temp_char == MESSAGE_NEW_LINE))
00009a  f89d0044          LDRB     r0,[sp,#0x44]
00009e  280d              CMP      r0,#0xd
0000a0  d003              BEQ      |L1.170|
0000a2  f89d0044          LDRB     r0,[sp,#0x44]
0000a6  280a              CMP      r0,#0xa
0000a8  d106              BNE      |L1.184|
                  |L1.170|
;;;81     			{
;;;82     				received_msg[msg_length++] = '\0';
0000aa  2200              MOVS     r2,#0
0000ac  4628              MOV      r0,r5
0000ae  1c69              ADDS     r1,r5,#1
0000b0  b28d              UXTH     r5,r1
0000b2  a926              ADD      r1,sp,#0x98
0000b4  540a              STRB     r2,[r1,r0]
0000b6  e011              B        |L1.220|
                  |L1.184|
;;;83     			}
;;;84     			else
;;;85     			{
;;;86     				// Normal char
;;;87     				if (search_for_word == 1)
0000b8  2e01              CMP      r6,#1
0000ba  d108              BNE      |L1.206|
;;;88     				{
;;;89     					argv[argc++] = &received_msg[msg_length];		// Found start position of a word
0000bc  a826              ADD      r0,sp,#0x98
0000be  1942              ADDS     r2,r0,r5
0000c0  4620              MOV      r0,r4
0000c2  1c61              ADDS     r1,r4,#1
0000c4  b28c              UXTH     r4,r1
0000c6  a912              ADD      r1,sp,#0x48
0000c8  f8412020          STR      r2,[r1,r0,LSL #2]
;;;90     					search_for_word = 0;
0000cc  2600              MOVS     r6,#0
                  |L1.206|
;;;91     				}
;;;92     				received_msg[msg_length++] = temp_char;
0000ce  f89d2044          LDRB     r2,[sp,#0x44]
0000d2  4628              MOV      r0,r5
0000d4  1c69              ADDS     r1,r5,#1
0000d6  b28d              UXTH     r5,r1
0000d8  a926              ADD      r1,sp,#0x98
0000da  540a              STRB     r2,[r1,r0]
                  |L1.220|
;;;93     			}
;;;94     			
;;;95     			
;;;96     			if ((temp_char == MESSAGE_END_SYMBOL) || (temp_char == MESSAGE_NEW_LINE) || (msg_length == RX_MESSAGE_MAX_LENGTH))
0000dc  f89d0044          LDRB     r0,[sp,#0x44]
0000e0  280d              CMP      r0,#0xd
0000e2  d005              BEQ      |L1.240|
0000e4  f89d0044          LDRB     r0,[sp,#0x44]
0000e8  280a              CMP      r0,#0xa
0000ea  d001              BEQ      |L1.240|
0000ec  2d50              CMP      r5,#0x50
0000ee  d170              BNE      |L1.466|
                  |L1.240|
;;;97     			{
;;;98     				// Received full message OR maximum allowed message length is reached
;;;99     				// Parse message
;;;100    				if (argc != 0)
0000f0  2c00              CMP      r4,#0
0000f2  d06f              BEQ      |L1.468|
;;;101    				{
;;;102    					cmd_ok = 1;
0000f4  2701              MOVS     r7,#1
;;;103    					dispatcher_msg.type = 0;
0000f6  2000              MOVS     r0,#0
0000f8  9001              STR      r0,[sp,#4]
;;;104    					//----- Debug -----//
;;;105    			/*		for (i=0;i<argc;i++)
;;;106    					{
;;;107    						//printf("%s\r",argv[i]);	
;;;108    						sendString2(argv[i], "\r");
;;;109    					} */
;;;110    					//-----------------//
;;;111    					
;;;112    					//---------- Converter control -----------//
;;;113    					if (strcmp(argv[0], "on") == 0)							// Turn converter ON	
0000fa  a199              ADR      r1,|L1.864|
0000fc  9812              LDR      r0,[sp,#0x48]
0000fe  f7fffffe          BL       strcmp
000102  b910              CBNZ     r0,|L1.266|
;;;114    					{
;;;115    						dispatcher_msg.type = DP_CONVERTER_TURN_ON;
000104  0278              LSLS     r0,r7,#9
000106  9001              STR      r0,[sp,#4]
000108  e0d2              B        |L1.688|
                  |L1.266|
;;;116    					}
;;;117    					else if (strcmp(argv[0], "off") == 0)					// Turn converter OFF
00010a  a196              ADR      r1,|L1.868|
00010c  9812              LDR      r0,[sp,#0x48]
00010e  f7fffffe          BL       strcmp
000112  b918              CBNZ     r0,|L1.284|
;;;118    					{
;;;119    						dispatcher_msg.type = DP_CONVERTER_TURN_OFF;
000114  f2402001          MOV      r0,#0x201
000118  9001              STR      r0,[sp,#4]
00011a  e0c9              B        |L1.688|
                  |L1.284|
;;;120    					}
;;;121    					else if (strcmp(argv[0], "set_voltage") == 0)			// Setting converter voltage
00011c  a192              ADR      r1,|L1.872|
00011e  9812              LDR      r0,[sp,#0x48]
000120  f7fffffe          BL       strcmp
000124  b988              CBNZ     r0,|L1.330|
;;;122    					{
;;;123    						if (argc < 2)
000126  2c02              CMP      r4,#2
000128  da05              BGE      |L1.310|
;;;124    						{
;;;125    							sendString2(argv[0], " ERR: missing argument [mV]\r");
00012a  a192              ADR      r1,|L1.884|
00012c  9812              LDR      r0,[sp,#0x48]
00012e  f7fffffe          BL       sendString2
;;;126    							cmd_ok = 0;
000132  2700              MOVS     r7,#0
000134  e0bc              B        |L1.688|
                  |L1.310|
;;;127    						}
;;;128    						else
;;;129    						{
;;;130    							// Second argument is voltage value [mV]
;;;131    							dispatcher_msg.type = DP_CONVERTER_SET_VOLTAGE;
000136  f44f7004          MOV      r0,#0x210
00013a  9001              STR      r0,[sp,#4]
;;;132    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
00013c  2200              MOVS     r2,#0
00013e  4611              MOV      r1,r2
000140  9813              LDR      r0,[sp,#0x4c]
000142  f7fffffe          BL       strtoul
000146  9002              STR      r0,[sp,#8]
000148  e0b2              B        |L1.688|
                  |L1.330|
;;;133    						}
;;;134    					}
;;;135    					else if (strcmp(argv[0], "set_current") == 0)			// Setting converter current
00014a  a192              ADR      r1,|L1.916|
00014c  9812              LDR      r0,[sp,#0x48]
00014e  f7fffffe          BL       strcmp
000152  b988              CBNZ     r0,|L1.376|
;;;136    					{
;;;137    						if (argc < 2)
000154  2c02              CMP      r4,#2
000156  da05              BGE      |L1.356|
;;;138    						{
;;;139    							sendString2(argv[0], " ERR: missing argument [mA]\r");
000158  a191              ADR      r1,|L1.928|
00015a  9812              LDR      r0,[sp,#0x48]
00015c  f7fffffe          BL       sendString2
;;;140    							cmd_ok = 0;
000160  2700              MOVS     r7,#0
000162  e0a5              B        |L1.688|
                  |L1.356|
;;;141    						}
;;;142    						else
;;;143    						{
;;;144    							// Second argument is current value [mA]
;;;145    							dispatcher_msg.type = DP_CONVERTER_SET_CURRENT;
000164  f2402011          MOV      r0,#0x211
000168  9001              STR      r0,[sp,#4]
;;;146    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
00016a  2200              MOVS     r2,#0
00016c  4611              MOV      r1,r2
00016e  9813              LDR      r0,[sp,#0x4c]
000170  f7fffffe          BL       strtoul
000174  9002              STR      r0,[sp,#8]
000176  e09b              B        |L1.688|
                  |L1.376|
;;;147    						}
;;;148    					}
;;;149    					else if (strcmp(argv[0], "set_current_limit") == 0)			// Setting converter current limit
000178  a191              ADR      r1,|L1.960|
00017a  9812              LDR      r0,[sp,#0x48]
00017c  f7fffffe          BL       strcmp
000180  b988              CBNZ     r0,|L1.422|
;;;150    					{
;;;151    						if (argc < 2)
000182  2c02              CMP      r4,#2
000184  da05              BGE      |L1.402|
;;;152    						{
;;;153    							sendString2(argv[0], " ERR: missing argument (20/40)[A]\r");
000186  a193              ADR      r1,|L1.980|
000188  9812              LDR      r0,[sp,#0x48]
00018a  f7fffffe          BL       sendString2
;;;154    							cmd_ok = 0;
00018e  2700              MOVS     r7,#0
000190  e08e              B        |L1.688|
                  |L1.402|
;;;155    						}
;;;156    						else
;;;157    						{
;;;158    							// Second argument is current limit value [A]
;;;159    							dispatcher_msg.type = DP_CONVERTER_SET_CURRENT_LIMIT;
000192  f2402012          MOV      r0,#0x212
000196  9001              STR      r0,[sp,#4]
;;;160    							dispatcher_msg.data = strtoul(argv[1], 0, 0);
000198  2200              MOVS     r2,#0
00019a  4611              MOV      r1,r2
00019c  9813              LDR      r0,[sp,#0x4c]
00019e  f7fffffe          BL       strtoul
0001a2  9002              STR      r0,[sp,#8]
0001a4  e084              B        |L1.688|
                  |L1.422|
;;;161    						}
;;;162    					}
;;;163    					//----- button and encoder emulation -----//
;;;164    					else if (strcmp(argv[0], "btn_esc") == 0)				// ESC button
0001a6  a194              ADR      r1,|L1.1016|
0001a8  9812              LDR      r0,[sp,#0x48]
0001aa  f7fffffe          BL       strcmp
0001ae  b928              CBNZ     r0,|L1.444|
;;;165    					{
;;;166    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
0001b0  f44f6080          MOV      r0,#0x400
0001b4  9001              STR      r0,[sp,#4]
;;;167    						dispatcher_msg.data = BTN_ESC;
0001b6  2001              MOVS     r0,#1
0001b8  9002              STR      r0,[sp,#8]
0001ba  e079              B        |L1.688|
                  |L1.444|
;;;168    					}
;;;169    					else if (strcmp(argv[0], "btn_ok") == 0)				// OK button
0001bc  a190              ADR      r1,|L1.1024|
0001be  9812              LDR      r0,[sp,#0x48]
0001c0  f7fffffe          BL       strcmp
0001c4  b938              CBNZ     r0,|L1.470|
;;;170    					{
;;;171    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
0001c6  f44f6080          MOV      r0,#0x400
0001ca  9001              STR      r0,[sp,#4]
;;;172    						dispatcher_msg.data = BTN_OK;
0001cc  2008              MOVS     r0,#8
0001ce  9002              STR      r0,[sp,#8]
0001d0  e06e              B        |L1.688|
                  |L1.466|
0001d2  e07e              B        |L1.722|
                  |L1.468|
0001d4  e07a              B        |L1.716|
                  |L1.470|
;;;173    					}
;;;174    					else if (strcmp(argv[0], "btn_left") == 0)				// LEFT button
0001d6  a18c              ADR      r1,|L1.1032|
0001d8  9812              LDR      r0,[sp,#0x48]
0001da  f7fffffe          BL       strcmp
0001de  b928              CBNZ     r0,|L1.492|
;;;175    					{
;;;176    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
0001e0  f44f6080          MOV      r0,#0x400
0001e4  9001              STR      r0,[sp,#4]
;;;177    						dispatcher_msg.data = BTN_LEFT;
0001e6  2002              MOVS     r0,#2
0001e8  9002              STR      r0,[sp,#8]
0001ea  e061              B        |L1.688|
                  |L1.492|
;;;178    					}
;;;179    					else if (strcmp(argv[0], "btn_right") == 0)				// RIGHT button
0001ec  a189              ADR      r1,|L1.1044|
0001ee  9812              LDR      r0,[sp,#0x48]
0001f0  f7fffffe          BL       strcmp
0001f4  b928              CBNZ     r0,|L1.514|
;;;180    					{
;;;181    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
0001f6  f44f6080          MOV      r0,#0x400
0001fa  9001              STR      r0,[sp,#4]
;;;182    						dispatcher_msg.data = BTN_RIGHT;
0001fc  2004              MOVS     r0,#4
0001fe  9002              STR      r0,[sp,#8]
000200  e056              B        |L1.688|
                  |L1.514|
;;;183    					}
;;;184    					else if (strcmp(argv[0], "btn_on") == 0)				// ON button
000202  a187              ADR      r1,|L1.1056|
000204  9812              LDR      r0,[sp,#0x48]
000206  f7fffffe          BL       strcmp
00020a  b928              CBNZ     r0,|L1.536|
;;;185    					{
;;;186    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
00020c  f44f6080          MOV      r0,#0x400
000210  9001              STR      r0,[sp,#4]
;;;187    						dispatcher_msg.data = BTN_ON;
000212  2040              MOVS     r0,#0x40
000214  9002              STR      r0,[sp,#8]
000216  e04b              B        |L1.688|
                  |L1.536|
;;;188    					}
;;;189    					else if (strcmp(argv[0], "btn_off") == 0)				// OFF button
000218  a183              ADR      r1,|L1.1064|
00021a  9812              LDR      r0,[sp,#0x48]
00021c  f7fffffe          BL       strcmp
000220  b928              CBNZ     r0,|L1.558|
;;;190    					{
;;;191    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
000222  f44f6080          MOV      r0,#0x400
000226  9001              STR      r0,[sp,#4]
;;;192    						dispatcher_msg.data = BTN_OFF;
000228  2080              MOVS     r0,#0x80
00022a  9002              STR      r0,[sp,#8]
00022c  e040              B        |L1.688|
                  |L1.558|
;;;193    					}
;;;194    					else if (strcmp(argv[0], "push_encoder") == 0)			// Encoder push
00022e  a180              ADR      r1,|L1.1072|
000230  9812              LDR      r0,[sp,#0x48]
000232  f7fffffe          BL       strcmp
000236  b928              CBNZ     r0,|L1.580|
;;;195    					{
;;;196    						dispatcher_msg.type = DP_EMU_BTN_DOWN;
000238  f44f6080          MOV      r0,#0x400
00023c  9001              STR      r0,[sp,#4]
;;;197    						dispatcher_msg.data = BTN_ENCODER;
00023e  2010              MOVS     r0,#0x10
000240  9002              STR      r0,[sp,#8]
000242  e035              B        |L1.688|
                  |L1.580|
;;;198    					}
;;;199    					else if (strcmp(argv[0], "encoder_delta") == 0)			// Encoder delta
000244  a17e              ADR      r1,|L1.1088|
000246  9812              LDR      r0,[sp,#0x48]
000248  f7fffffe          BL       strcmp
00024c  b988              CBNZ     r0,|L1.626|
;;;200    					{
;;;201    						if (argc < 2)
00024e  2c02              CMP      r4,#2
000250  da05              BGE      |L1.606|
;;;202    						{
;;;203    							sendString2(argv[0], " ERR: missing argument [ticks]\r");
000252  a17f              ADR      r1,|L1.1104|
000254  9812              LDR      r0,[sp,#0x48]
000256  f7fffffe          BL       sendString2
;;;204    							cmd_ok = 0;
00025a  2700              MOVS     r7,#0
00025c  e028              B        |L1.688|
                  |L1.606|
;;;205    						}
;;;206    						else
;;;207    						{
;;;208    							// Second argument is encoder ticks (signed)
;;;209    							dispatcher_msg.type = DP_EMU_ENC_DELTA;
00025e  f44f6082          MOV      r0,#0x410
000262  9001              STR      r0,[sp,#4]
;;;210    							dispatcher_msg.data = (uint32_t)strtol(argv[1], 0, 0);
000264  2200              MOVS     r2,#0
000266  4611              MOV      r1,r2
000268  9813              LDR      r0,[sp,#0x4c]
00026a  f7fffffe          BL       strtol
00026e  9002              STR      r0,[sp,#8]
000270  e01e              B        |L1.688|
                  |L1.626|
;;;211    						}
;;;212    					}
;;;213    					//----------------- misc -----------------//
;;;214    					else if (strcmp(argv[0], "get_time_profiling") == 0)			// Time profiling
000272  a17f              ADR      r1,|L1.1136|
000274  9812              LDR      r0,[sp,#0x48]
000276  f7fffffe          BL       strcmp
00027a  b9a0              CBNZ     r0,|L1.678|
;;;215    					{
;;;216    						sprintf(temp_str,"%d\r",time_profile.max_ticks_in_Systick_hook);
00027c  4881              LDR      r0,|L1.1156|
00027e  a182              ADR      r1,|L1.1160|
000280  6802              LDR      r2,[r0,#0]  ; time_profile
000282  a804              ADD      r0,sp,#0x10
000284  f7fffffe          BL       __2sprintf
;;;217    						sendString2("Systick hook max ticks: ", temp_str);
000288  a904              ADD      r1,sp,#0x10
00028a  a080              ADR      r0,|L1.1164|
00028c  f7fffffe          BL       sendString2
;;;218    						sprintf(temp_str,"%d\r",time_profile.max_ticks_in_Timer2_ISR);
000290  487c              LDR      r0,|L1.1156|
000292  a17d              ADR      r1,|L1.1160|
000294  6842              LDR      r2,[r0,#4]  ; time_profile
000296  a804              ADD      r0,sp,#0x10
000298  f7fffffe          BL       __2sprintf
;;;219    						sendString2("Timer2 ISR max ticks: ", temp_str);
00029c  a904              ADD      r1,sp,#0x10
00029e  a082              ADR      r0,|L1.1192|
0002a0  f7fffffe          BL       sendString2
0002a4  e004              B        |L1.688|
                  |L1.678|
;;;220    					}
;;;221    					//------------ unknown command -----------//
;;;222    					else
;;;223    					{
;;;224    						sendString2(argv[0], " ERR: unknown cmd\r");
0002a6  a186              ADR      r1,|L1.1216|
0002a8  9812              LDR      r0,[sp,#0x48]
0002aa  f7fffffe          BL       sendString2
;;;225    						cmd_ok = 0;
0002ae  2700              MOVS     r7,#0
                  |L1.688|
;;;226    					}
;;;227    					
;;;228    					//----------------------------------------//
;;;229    					
;;;230    					// Send result to dispatcher
;;;231    					if (dispatcher_msg.type)
0002b0  9801              LDR      r0,[sp,#4]
0002b2  b130              CBZ      r0,|L1.706|
;;;232    						xQueueSendToBack(xQueueDispatcher, &dispatcher_msg, 0);
0002b4  2300              MOVS     r3,#0
0002b6  461a              MOV      r2,r3
0002b8  a901              ADD      r1,sp,#4
0002ba  4886              LDR      r0,|L1.1236|
0002bc  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
0002be  f7fffffe          BL       xQueueGenericSend
                  |L1.706|
;;;233    					
;;;234    					// Confirm
;;;235    					if (cmd_ok)
0002c2  b11f              CBZ      r7,|L1.716|
;;;236    						sendString2(argv[0], " OK\r");
0002c4  a184              ADR      r1,|L1.1240|
0002c6  9812              LDR      r0,[sp,#0x48]
0002c8  f7fffffe          BL       sendString2
                  |L1.716|
;;;237    			
;;;238    				}			
;;;239    				msg_length = 0;
0002cc  2500              MOVS     r5,#0
;;;240    				argc = 0;
0002ce  2400              MOVS     r4,#0
;;;241    				search_for_word = 1;
0002d0  2601              MOVS     r6,#1
                  |L1.722|
0002d2  bf00              NOP                            ;73
                  |L1.724|
0002d4  a911              ADD      r1,sp,#0x44           ;68
0002d6  481e              LDR      r0,|L1.848|
0002d8  f7fffffe          BL       getFromRingBuffer
0002dc  2800              CMP      r0,#0                 ;68
0002de  f47faec4          BNE      |L1.106|
                  |L1.738|
0002e2  e6bd              B        |L1.96|
;;;242    			}
;;;243    		}  // \getFromRingBuffer()
;;;244    		
;;;245    	}
;;;246    }
;;;247    
                          ENDP

                  processUartRX PROC
;;;249    
;;;250    void processUartRX(void)
0002e4  b510              PUSH     {r4,lr}
;;;251    {
;;;252    	uint16_t temp;
;;;253    	while ( (UART_GetFlagStatus(MDR_UART2,UART_FLAG_RXFE) == RESET) && (!ringBufferIsFull(uart2_rx_rbuf)) )
0002e6  e00a              B        |L1.766|
                  |L1.744|
;;;254    	{
;;;255    		temp = UART_ReceiveData(MDR_UART2);
0002e8  487d              LDR      r0,|L1.1248|
0002ea  f7fffffe          BL       UART_ReceiveData
0002ee  4604              MOV      r4,r0
;;;256    		if ((temp & ( (1<<UART_Data_BE) | (1<<UART_Data_PE) | (1<<UART_Data_FE) )) == 0)
0002f0  f4146fe0          TST      r4,#0x700
0002f4  d103              BNE      |L1.766|
;;;257    		{
;;;258    			putIntoRingBuffer(&uart2_rx_rbuf, (char)temp);
0002f6  b2e1              UXTB     r1,r4
0002f8  4815              LDR      r0,|L1.848|
0002fa  f7fffffe          BL       putIntoRingBuffer
                  |L1.766|
0002fe  2110              MOVS     r1,#0x10              ;253
000300  4877              LDR      r0,|L1.1248|
000302  f7fffffe          BL       UART_GetFlagStatus
000306  b948              CBNZ     r0,|L1.796|
000308  4811              LDR      r0,|L1.848|
00030a  8900              LDRH     r0,[r0,#8]            ;253  ; uart2_rx_rbuf
00030c  4910              LDR      r1,|L1.848|
00030e  8949              LDRH     r1,[r1,#0xa]          ;253  ; uart2_rx_rbuf
000310  1a40              SUBS     r0,r0,r1              ;253
000312  b280              UXTH     r0,r0                 ;253
000314  490e              LDR      r1,|L1.848|
000316  8989              LDRH     r1,[r1,#0xc]          ;253  ; uart2_rx_rbuf
000318  4288              CMP      r0,r1                 ;253
00031a  d1e5              BNE      |L1.744|
                  |L1.796|
;;;259    		}
;;;260    	} 
;;;261    }
00031c  bd10              POP      {r4,pc}
;;;262    
                          ENDP

                  processUartTX PROC
;;;283    
;;;284    void processUartTX(void)
00031e  b508              PUSH     {r3,lr}
;;;285    {
;;;286    	char temp;
;;;287    	//while ( (UART_GetFlagStatus(MDR_UART2,UART_FLAG_TXFF) == RESET) && (!ringBufferIsEmpty(uart2_tx_rbuf)) )	//2216
;;;288    	while ( (!(MDR_UART2->FR & UART_FLAG_TXFF)) && (!ringBufferIsEmpty(uart2_tx_rbuf)) ) //1868
000320  e008              B        |L1.820|
                  |L1.802|
;;;289    	{
;;;290    		getFromRingBuffer(&uart2_tx_rbuf, &temp);
000322  4669              MOV      r1,sp
000324  480c              LDR      r0,|L1.856|
000326  f7fffffe          BL       getFromRingBuffer
;;;291    		UART_SendData(MDR_UART2,(uint16_t)temp);
00032a  f89d1000          LDRB     r1,[sp,#0]
00032e  486c              LDR      r0,|L1.1248|
000330  f7fffffe          BL       UART_SendData
                  |L1.820|
000334  486a              LDR      r0,|L1.1248|
000336  6980              LDR      r0,[r0,#0x18]         ;288
000338  f0100f20          TST      r0,#0x20              ;288
00033c  d105              BNE      |L1.842|
00033e  4806              LDR      r0,|L1.856|
000340  8900              LDRH     r0,[r0,#8]            ;288  ; uart2_tx_rbuf
000342  4905              LDR      r1,|L1.856|
000344  8949              LDRH     r1,[r1,#0xa]          ;288  ; uart2_tx_rbuf
000346  4288              CMP      r0,r1                 ;288
000348  d1eb              BNE      |L1.802|
                  |L1.842|
;;;292    	}
;;;293    }
00034a  bd08              POP      {r3,pc}
;;;294    
                          ENDP

                  |L1.844|
                          DCD      uart2_rx_data_buff
                  |L1.848|
                          DCD      uart2_rx_rbuf
                  |L1.852|
                          DCD      uart2_tx_data_buff
                  |L1.856|
                          DCD      uart2_tx_rbuf
                  |L1.860|
                          DCD      test_mode
                  |L1.864|
000360  6f6e00            DCB      "on",0
000363  00                DCB      0
                  |L1.868|
000364  6f666600          DCB      "off",0
                  |L1.872|
000368  7365745f          DCB      "set_voltage",0
00036c  766f6c74
000370  61676500
                  |L1.884|
000374  20455252          DCB      " ERR: missing argument [mV]\r",0
000378  3a206d69
00037c  7373696e
000380  67206172
000384  67756d65
000388  6e74205b
00038c  6d565d0d
000390  00      
000391  00                DCB      0
000392  00                DCB      0
000393  00                DCB      0
                  |L1.916|
000394  7365745f          DCB      "set_current",0
000398  63757272
00039c  656e7400
                  |L1.928|
0003a0  20455252          DCB      " ERR: missing argument [mA]\r",0
0003a4  3a206d69
0003a8  7373696e
0003ac  67206172
0003b0  67756d65
0003b4  6e74205b
0003b8  6d415d0d
0003bc  00      
0003bd  00                DCB      0
0003be  00                DCB      0
0003bf  00                DCB      0
                  |L1.960|
0003c0  7365745f          DCB      "set_current_limit",0
0003c4  63757272
0003c8  656e745f
0003cc  6c696d69
0003d0  7400    
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L1.980|
0003d4  20455252          DCB      " ERR: missing argument (20/40)[A]\r",0
0003d8  3a206d69
0003dc  7373696e
0003e0  67206172
0003e4  67756d65
0003e8  6e742028
0003ec  32302f34
0003f0  30295b41
0003f4  5d0d00  
0003f7  00                DCB      0
                  |L1.1016|
0003f8  62746e5f          DCB      "btn_esc",0
0003fc  65736300
                  |L1.1024|
000400  62746e5f          DCB      "btn_ok",0
000404  6f6b00  
000407  00                DCB      0
                  |L1.1032|
000408  62746e5f          DCB      "btn_left",0
00040c  6c656674
000410  00      
000411  00                DCB      0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  62746e5f          DCB      "btn_right",0
000418  72696768
00041c  7400    
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
000420  62746e5f          DCB      "btn_on",0
000424  6f6e00  
000427  00                DCB      0
                  |L1.1064|
000428  62746e5f          DCB      "btn_off",0
00042c  6f666600
                  |L1.1072|
000430  70757368          DCB      "push_encoder",0
000434  5f656e63
000438  6f646572
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
000440  656e636f          DCB      "encoder_delta",0
000444  6465725f
000448  64656c74
00044c  6100    
00044e  00                DCB      0
00044f  00                DCB      0
                  |L1.1104|
000450  20455252          DCB      " ERR: missing argument [ticks]\r",0
000454  3a206d69
000458  7373696e
00045c  67206172
000460  67756d65
000464  6e74205b
000468  7469636b
00046c  735d0d00
                  |L1.1136|
000470  6765745f          DCB      "get_time_profiling",0
000474  74696d65
000478  5f70726f
00047c  66696c69
000480  6e6700  
000483  00                DCB      0
                  |L1.1156|
                          DCD      time_profile
                  |L1.1160|
000488  25640d00          DCB      "%d\r",0
                  |L1.1164|
00048c  53797374          DCB      "Systick hook max ticks: ",0
000490  69636b20
000494  686f6f6b
000498  206d6178
00049c  20746963
0004a0  6b733a20
0004a4  00      
0004a5  00                DCB      0
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  54696d65          DCB      "Timer2 ISR max ticks: ",0
0004ac  72322049
0004b0  5352206d
0004b4  61782074
0004b8  69636b73
0004bc  3a2000  
0004bf  00                DCB      0
                  |L1.1216|
0004c0  20455252          DCB      " ERR: unknown cmd\r",0
0004c4  3a20756e
0004c8  6b6e6f77
0004cc  6e20636d
0004d0  640d00  
0004d3  00                DCB      0
                  |L1.1236|
                          DCD      xQueueDispatcher
                  |L1.1240|
0004d8  204f4b0d          DCB      " OK\r",0
0004dc  00      
0004dd  00                DCB      0
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
                          DCD      0x40038000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  uart2_tx_rbuf
                          %        16
                  uart2_rx_rbuf
                          %        16
                  uart2_tx_data_buff
                          %        200
                  uart2_rx_data_buff
                          %        200

                          AREA ||.data||, DATA, ALIGN=0

                  test_mode
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "src\\uart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_uart_c_92b36d64____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_uart_c_92b36d64____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_uart_c_92b36d64____REVSH|
#line 130
|__asm___6_uart_c_92b36d64____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
