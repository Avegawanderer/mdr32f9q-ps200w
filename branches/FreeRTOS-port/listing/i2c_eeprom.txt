; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\i2c_eeprom.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\i2c_eeprom.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\i2c_eeprom.crf src\i2c_eeprom.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  EEPROMReadBlock PROC
;;;20     //==============================================================//
;;;21     uint8_t EEPROMReadBlock(uint16_t address, uint8_t* data, uint8_t count)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;22     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;23     	uint8_t error = 0;
00000a  f04f0800          MOV      r8,#0
;;;24     	uint8_t dev_addr = (address & 0x0700) >> 7;
00000e  f40460e0          AND      r0,r4,#0x700
000012  11c7              ASRS     r7,r0,#7
;;;25     	dev_addr |= EEPROM_ADDRESS;
000014  f04707a0          ORR      r7,r7,#0xa0
;;;26     	
;;;27         /* Wait I2C bus is free */
;;;28         while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
000018  bf00              NOP      
                  |L1.26|
00001a  f04f4080          MOV      r0,#0x40000000
00001e  f7fffffe          BL       I2C_GetFlagStatus
000022  2801              CMP      r0,#1
000024  d1f9              BNE      |L1.26|
;;;29     	  /* Send device and bank adress */
;;;30         I2C_Send7bitAddress(dev_addr,I2C_Direction_Transmitter);
000026  2100              MOVS     r1,#0
000028  4638              MOV      r0,r7
00002a  f7fffffe          BL       I2C_Send7bitAddress
;;;31     	  /* Wait end of transfer */
;;;32         while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00002e  bf00              NOP      
                  |L1.48|
000030  f04f7000          MOV      r0,#0x2000000
000034  f7fffffe          BL       I2C_GetFlagStatus
000038  2801              CMP      r0,#1
00003a  d1f9              BNE      |L1.48|
;;;33     	  /* Read data if ACK was send */
;;;34         if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00003c  07c0              LSLS     r0,r0,#31
00003e  f7fffffe          BL       I2C_GetFlagStatus
000042  2801              CMP      r0,#1
000044  d13e              BNE      |L1.196|
;;;35         {
;;;36     			// Transmit word address
;;;37     			I2C_SendByte(address);
000046  b2e0              UXTB     r0,r4
000048  f7fffffe          BL       I2C_SendByte
;;;38     			/* Wait end of transfer */
;;;39     			while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00004c  bf00              NOP      
                  |L1.78|
00004e  f04f7000          MOV      r0,#0x2000000
000052  f7fffffe          BL       I2C_GetFlagStatus
000056  2801              CMP      r0,#1
000058  d1f9              BNE      |L1.78|
;;;40     				
;;;41     			/* Read data if ACK was send */
;;;42     			if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00005a  07c0              LSLS     r0,r0,#31
00005c  f7fffffe          BL       I2C_GetFlagStatus
000060  2801              CMP      r0,#1
000062  d12c              BNE      |L1.190|
;;;43     			{
;;;44     				/* Send device and bank adress again*/
;;;45     				I2C_Send7bitAddress(dev_addr,I2C_Direction_Receiver);
000064  2101              MOVS     r1,#1
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       I2C_Send7bitAddress
;;;46     				/* Wait end of transfer */
;;;47     				while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00006c  bf00              NOP      
                  |L1.110|
00006e  f04f7000          MOV      r0,#0x2000000
000072  f7fffffe          BL       I2C_GetFlagStatus
000076  2801              CMP      r0,#1
000078  d1f9              BNE      |L1.110|
;;;48     				/* Read data if ACK was send */
;;;49     				if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00007a  07c0              LSLS     r0,r0,#31
00007c  f7fffffe          BL       I2C_GetFlagStatus
000080  2801              CMP      r0,#1
000082  d119              BNE      |L1.184|
;;;50     				{
;;;51     					// Read data
;;;52     					while(count--)
000084  e012              B        |L1.172|
                  |L1.134|
;;;53     					{
;;;54     						if (count)
000086  b11e              CBZ      r6,|L1.144|
;;;55     							/* Recive byte and send ack */
;;;56     							I2C_StartReceiveData(I2C_Send_to_Slave_ACK);
000088  2000              MOVS     r0,#0
00008a  f7fffffe          BL       I2C_StartReceiveData
00008e  e002              B        |L1.150|
                  |L1.144|
;;;57     						else
;;;58     							/* Recive byte and send nack */
;;;59     							I2C_StartReceiveData(I2C_Send_to_Slave_NACK);
000090  2008              MOVS     r0,#8
000092  f7fffffe          BL       I2C_StartReceiveData
                  |L1.150|
;;;60     
;;;61     						/* Wait end of transfer */
;;;62     						while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
000096  bf00              NOP      
                  |L1.152|
000098  f04f7000          MOV      r0,#0x2000000
00009c  f7fffffe          BL       I2C_GetFlagStatus
0000a0  2801              CMP      r0,#1
0000a2  d1f9              BNE      |L1.152|
;;;63     				
;;;64     						/* Get data from I2C RXD register */
;;;65     						*data = I2C_GetReceivedData();
0000a4  f7fffffe          BL       I2C_GetReceivedData
0000a8  7028              STRB     r0,[r5,#0]
;;;66     						data++;
0000aa  1c6d              ADDS     r5,r5,#1
                  |L1.172|
0000ac  0030              MOVS     r0,r6                 ;52
0000ae  f1a60101          SUB      r1,r6,#1              ;52
0000b2  b2ce              UXTB     r6,r1                 ;52
0000b4  d1e7              BNE      |L1.134|
0000b6  e007              B        |L1.200|
                  |L1.184|
;;;67     					}
;;;68     				}
;;;69     				else
;;;70     					error = 3;	// could not transfer device address for second time
0000b8  f04f0803          MOV      r8,#3
0000bc  e004              B        |L1.200|
                  |L1.190|
;;;71     			}
;;;72     			else
;;;73     				error = 2;	// could not transfer word address
0000be  f04f0802          MOV      r8,#2
0000c2  e001              B        |L1.200|
                  |L1.196|
;;;74         }
;;;75     	else
;;;76     		error = 1;	// could not even transfer device address
0000c4  f04f0801          MOV      r8,#1
                  |L1.200|
;;;77     	
;;;78     	/* Send stop */
;;;79     	I2C_SendSTOP();
0000c8  f7fffffe          BL       I2C_SendSTOP
;;;80     
;;;81     	return error;
0000cc  4640              MOV      r0,r8
;;;82     }
0000ce  e8bd81f0          POP      {r4-r8,pc}
;;;83     
                          ENDP

                  EEPROMWriteBlock PROC
;;;90     //==============================================================//
;;;91     uint8_t EEPROMWriteBlock(uint16_t address, uint8_t* data, uint8_t count)
0000d2  e92d41f0          PUSH     {r4-r8,lr}
;;;92     {
0000d6  4604              MOV      r4,r0
0000d8  460d              MOV      r5,r1
0000da  4616              MOV      r6,r2
;;;93     	uint8_t error = 0;
0000dc  f04f0800          MOV      r8,#0
;;;94     	uint8_t dev_addr = (address & 0x0700) >> 7;
0000e0  f40460e0          AND      r0,r4,#0x700
0000e4  11c7              ASRS     r7,r0,#7
;;;95     	dev_addr |= EEPROM_ADDRESS;
0000e6  f04707a0          ORR      r7,r7,#0xa0
;;;96     	
;;;97         /* Wait I2C bus is free */
;;;98         while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
0000ea  bf00              NOP      
                  |L1.236|
0000ec  f04f4080          MOV      r0,#0x40000000
0000f0  f7fffffe          BL       I2C_GetFlagStatus
0000f4  2801              CMP      r0,#1
0000f6  d1f9              BNE      |L1.236|
;;;99     	  /* Send device and bank adress */
;;;100        I2C_Send7bitAddress(dev_addr,I2C_Direction_Transmitter);
0000f8  2100              MOVS     r1,#0
0000fa  4638              MOV      r0,r7
0000fc  f7fffffe          BL       I2C_Send7bitAddress
;;;101    	  /* Wait end of transfer */
;;;102        while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
000100  bf00              NOP      
                  |L1.258|
000102  f04f7000          MOV      r0,#0x2000000
000106  f7fffffe          BL       I2C_GetFlagStatus
00010a  2801              CMP      r0,#1
00010c  d1f9              BNE      |L1.258|
;;;103    	  /* Transmit data if ACK was send */
;;;104        if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00010e  07c0              LSLS     r0,r0,#31
000110  f7fffffe          BL       I2C_GetFlagStatus
000114  2801              CMP      r0,#1
000116  d12b              BNE      |L1.368|
;;;105        {
;;;106    			// Transmit word address
;;;107    			I2C_SendByte(address);
000118  b2e0              UXTB     r0,r4
00011a  f7fffffe          BL       I2C_SendByte
;;;108    			/* Wait end of transfer */
;;;109    			while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00011e  bf00              NOP      
                  |L1.288|
000120  f04f7000          MOV      r0,#0x2000000
000124  f7fffffe          BL       I2C_GetFlagStatus
000128  2801              CMP      r0,#1
00012a  d1f9              BNE      |L1.288|
;;;110    			
;;;111    			/* Transmit data if ACK was send */
;;;112    			if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00012c  07c0              LSLS     r0,r0,#31
00012e  f7fffffe          BL       I2C_GetFlagStatus
000132  2801              CMP      r0,#1
000134  d119              BNE      |L1.362|
;;;113    			{
;;;114    				// Send data
;;;115    				while(count--)
000136  e012              B        |L1.350|
                  |L1.312|
;;;116    				{
;;;117    					I2C_SendByte(*data);
000138  7828              LDRB     r0,[r5,#0]
00013a  f7fffffe          BL       I2C_SendByte
;;;118    					data++;
00013e  1c6d              ADDS     r5,r5,#1
;;;119    					/* Wait end of transfer */
;;;120    					while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
000140  bf00              NOP      
                  |L1.322|
000142  f04f7000          MOV      r0,#0x2000000
000146  f7fffffe          BL       I2C_GetFlagStatus
00014a  2801              CMP      r0,#1
00014c  d1f9              BNE      |L1.322|
;;;121    					// Check result
;;;122    					if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_NACK) == SET)
00014e  03c0              LSLS     r0,r0,#15
000150  f7fffffe          BL       I2C_GetFlagStatus
000154  2801              CMP      r0,#1
000156  d102              BNE      |L1.350|
;;;123    					{
;;;124    						error = 3;	// error during data transfer
000158  f04f0803          MOV      r8,#3
;;;125    						break;
00015c  e004              B        |L1.360|
                  |L1.350|
00015e  0030              MOVS     r0,r6                 ;115
000160  f1a60101          SUB      r1,r6,#1              ;115
000164  b2ce              UXTB     r6,r1                 ;115
000166  d1e7              BNE      |L1.312|
                  |L1.360|
000168  e004              B        |L1.372|
                  |L1.362|
;;;126    					}
;;;127    				}
;;;128    			}
;;;129    			else
;;;130    				error = 2;	// could not transfer word address
00016a  f04f0802          MOV      r8,#2
00016e  e001              B        |L1.372|
                  |L1.368|
;;;131        }
;;;132    	else
;;;133    		error = 1;	// could not even transfer device address
000170  f04f0801          MOV      r8,#1
                  |L1.372|
;;;134    	
;;;135    	/* Send stop */
;;;136    	I2C_SendSTOP();
000174  f7fffffe          BL       I2C_SendSTOP
;;;137    
;;;138    	return error;
000178  4640              MOV      r0,r8
;;;139    }
00017a  e8bd81f0          POP      {r4-r8,pc}
;;;140    
                          ENDP

                  EEPROMReady PROC
;;;145    //==============================================================//
;;;146    uint8_t EEPROMReady(void)
00017e  b510              PUSH     {r4,lr}
;;;147    {
;;;148    	/* Wait I2C bus is free */
;;;149      while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
000180  bf00              NOP      
                  |L1.386|
000182  f04f4080          MOV      r0,#0x40000000
000186  f7fffffe          BL       I2C_GetFlagStatus
00018a  2801              CMP      r0,#1
00018c  d1f9              BNE      |L1.386|
;;;150    	/* Send device and bank adress */
;;;151      I2C_Send7bitAddress(EEPROM_ADDRESS,I2C_Direction_Transmitter);
00018e  2100              MOVS     r1,#0
000190  20a0              MOVS     r0,#0xa0
000192  f7fffffe          BL       I2C_Send7bitAddress
;;;152    	/* Wait end of transfer */
;;;153      while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
000196  bf00              NOP      
                  |L1.408|
000198  f04f7000          MOV      r0,#0x2000000
00019c  f7fffffe          BL       I2C_GetFlagStatus
0001a0  2801              CMP      r0,#1
0001a2  d1f9              BNE      |L1.408|
;;;154    	/* Send stop */
;;;155    	I2C_SendSTOP();
0001a4  f7fffffe          BL       I2C_SendSTOP
;;;156    	// If ACK is received, EEPROM is ready
;;;157    	if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
0001a8  f04f4000          MOV      r0,#0x80000000
0001ac  f7fffffe          BL       I2C_GetFlagStatus
0001b0  2801              CMP      r0,#1
0001b2  d100              BNE      |L1.438|
                  |L1.436|
;;;158    		return EEPROM_READY;
;;;159    	else
;;;160    		return EEPROM_BUSY;
;;;161    }
0001b4  bd10              POP      {r4,pc}
                  |L1.438|
0001b6  2000              MOVS     r0,#0                 ;160
0001b8  e7fc              B        |L1.436|
;;;162    
                          ENDP


;*** Start embedded assembler ***

#line 1 "src\\i2c_eeprom.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_i2c_eeprom_c_e2784f5f____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_i2c_eeprom_c_e2784f5f____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_i2c_eeprom_c_e2784f5f____REVSH|
#line 130
|__asm___12_i2c_eeprom_c_e2784f5f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
