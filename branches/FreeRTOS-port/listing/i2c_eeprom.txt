; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\i2c_eeprom.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\i2c_eeprom.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\i2c_eeprom.crf src\i2c_eeprom.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  EEPROMReadBlock PROC
;;;20     //==============================================================//
;;;21     uint8_t EEPROMReadBlock(uint16_t address, uint8_t* data, uint8_t count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;22     {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;23     	uint8_t error = 0;
00000a  2600              MOVS     r6,#0
;;;24     	uint8_t dev_addr = (address & 0x0700) >> 7;
00000c  f40760e0          AND      r0,r7,#0x700
000010  09c0              LSRS     r0,r0,#7
;;;25     	dev_addr |= EEPROM_ADDRESS;
000012  f04008a0          ORR      r8,r0,#0xa0
;;;26     	
;;;27         /* Wait I2C bus is free */
;;;28         while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
000016  f04f4980          MOV      r9,#0x40000000
                  |L1.26|
00001a  4648              MOV      r0,r9
00001c  f7fffffe          BL       I2C_GetFlagStatus
000020  2801              CMP      r0,#1
000022  d1fa              BNE      |L1.26|
;;;29     	  /* Send device and bank adress */
;;;30         I2C_Send7bitAddress(dev_addr,I2C_Direction_Transmitter);
000024  2100              MOVS     r1,#0
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       I2C_Send7bitAddress
;;;31     	  /* Wait end of transfer */
;;;32         while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00002c  f04f7a00          MOV      r10,#0x2000000
                  |L1.48|
000030  4650              MOV      r0,r10
000032  f7fffffe          BL       I2C_GetFlagStatus
000036  2801              CMP      r0,#1
000038  d1fa              BNE      |L1.48|
;;;33     	  /* Read data if ACK was send */
;;;34         if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
00003a  f04f4900          MOV      r9,#0x80000000
00003e  4648              MOV      r0,r9
000040  f7fffffe          BL       I2C_GetFlagStatus
000044  2801              CMP      r0,#1
000046  d005              BEQ      |L1.84|
;;;35         {
;;;36     			// Transmit word address
;;;37     			I2C_SendByte(address);
;;;38     			/* Wait end of transfer */
;;;39     			while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
;;;40     				
;;;41     			/* Read data if ACK was send */
;;;42     			if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
;;;43     			{
;;;44     				/* Send device and bank adress again*/
;;;45     				I2C_Send7bitAddress(dev_addr,I2C_Direction_Receiver);
;;;46     				/* Wait end of transfer */
;;;47     				while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
;;;48     				/* Read data if ACK was send */
;;;49     				if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
;;;50     				{
;;;51     					// Read data
;;;52     					while(count--)
;;;53     					{
;;;54     						if (count)
;;;55     							/* Recive byte and send ack */
;;;56     							I2C_StartReceiveData(I2C_Send_to_Slave_ACK);
;;;57     						else
;;;58     							/* Recive byte and send nack */
;;;59     							I2C_StartReceiveData(I2C_Send_to_Slave_NACK);
;;;60     
;;;61     						/* Wait end of transfer */
;;;62     						while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
;;;63     				
;;;64     						/* Get data from I2C RXD register */
;;;65     						*data = I2C_GetReceivedData();
;;;66     						data++;
;;;67     					}
;;;68     				}
;;;69     				else
;;;70     					error = 3;	// could not transfer device address for second time
;;;71     			}
;;;72     			else
;;;73     				error = 2;	// could not transfer word address
;;;74         }
;;;75     	else
;;;76     		error = 1;	// could not even transfer device address
000048  2601              MOVS     r6,#1
                  |L1.74|
;;;77     	
;;;78     	/* Send stop */
;;;79     	I2C_SendSTOP();
00004a  f7fffffe          BL       I2C_SendSTOP
;;;80     
;;;81     	return error;
00004e  4630              MOV      r0,r6
                  |L1.80|
;;;82     }
000050  e8bd87f0          POP      {r4-r10,pc}
                  |L1.84|
000054  b2f8              UXTB     r0,r7                 ;37
000056  f7fffffe          BL       I2C_SendByte
00005a  4657              MOV      r7,r10                ;32
                  |L1.92|
00005c  4638              MOV      r0,r7                 ;39
00005e  f7fffffe          BL       I2C_GetFlagStatus
000062  2801              CMP      r0,#1                 ;39
000064  d1fa              BNE      |L1.92|
000066  4648              MOV      r0,r9                 ;42
000068  f7fffffe          BL       I2C_GetFlagStatus
00006c  2801              CMP      r0,#1                 ;42
00006e  d001              BEQ      |L1.116|
000070  2602              MOVS     r6,#2                 ;73
000072  e7ea              B        |L1.74|
                  |L1.116|
000074  2101              MOVS     r1,#1                 ;45
000076  4640              MOV      r0,r8                 ;45
000078  f7fffffe          BL       I2C_Send7bitAddress
                  |L1.124|
00007c  4638              MOV      r0,r7                 ;47
00007e  f7fffffe          BL       I2C_GetFlagStatus
000082  2801              CMP      r0,#1                 ;47
000084  d1fa              BNE      |L1.124|
000086  4648              MOV      r0,r9                 ;49
000088  f7fffffe          BL       I2C_GetFlagStatus
00008c  2801              CMP      r0,#1                 ;49
00008e  d012              BEQ      |L1.182|
000090  2603              MOVS     r6,#3                 ;70
000092  e7da              B        |L1.74|
                  |L1.148|
000094  b11c              CBZ      r4,|L1.158|
000096  2000              MOVS     r0,#0                 ;56
000098  f7fffffe          BL       I2C_StartReceiveData
00009c  e002              B        |L1.164|
                  |L1.158|
00009e  2008              MOVS     r0,#8                 ;59
0000a0  f7fffffe          BL       I2C_StartReceiveData
                  |L1.164|
0000a4  4638              MOV      r0,r7                 ;62
0000a6  f7fffffe          BL       I2C_GetFlagStatus
0000aa  2801              CMP      r0,#1                 ;62
0000ac  d1fa              BNE      |L1.164|
0000ae  f7fffffe          BL       I2C_GetReceivedData
0000b2  f8050b01          STRB     r0,[r5],#1            ;65
                  |L1.182|
0000b6  0020              MOVS     r0,r4                 ;52
0000b8  f1a40401          SUB      r4,r4,#1              ;52
0000bc  b2e4              UXTB     r4,r4                 ;52
0000be  d1e9              BNE      |L1.148|
0000c0  e7c3              B        |L1.74|
;;;83     
                          ENDP

                  EEPROMWriteBlock PROC
;;;90     //==============================================================//
;;;91     uint8_t EEPROMWriteBlock(uint16_t address, uint8_t* data, uint8_t count)
0000c2  e92d47f0          PUSH     {r4-r10,lr}
;;;92     {
0000c6  4680              MOV      r8,r0
0000c8  460d              MOV      r5,r1
0000ca  4614              MOV      r4,r2
;;;93     	uint8_t error = 0;
0000cc  2600              MOVS     r6,#0
;;;94     	uint8_t dev_addr = (address & 0x0700) >> 7;
0000ce  f40860e0          AND      r0,r8,#0x700
0000d2  09c0              LSRS     r0,r0,#7
;;;95     	dev_addr |= EEPROM_ADDRESS;
0000d4  f04007a0          ORR      r7,r0,#0xa0
;;;96     	
;;;97         /* Wait I2C bus is free */
;;;98         while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
0000d8  f04f4980          MOV      r9,#0x40000000
                  |L1.220|
0000dc  4648              MOV      r0,r9
0000de  f7fffffe          BL       I2C_GetFlagStatus
0000e2  2801              CMP      r0,#1
0000e4  d1fa              BNE      |L1.220|
;;;99     	  /* Send device and bank adress */
;;;100        I2C_Send7bitAddress(dev_addr,I2C_Direction_Transmitter);
0000e6  2100              MOVS     r1,#0
0000e8  4638              MOV      r0,r7
0000ea  f7fffffe          BL       I2C_Send7bitAddress
;;;101    	  /* Wait end of transfer */
;;;102        while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
0000ee  f04f7700          MOV      r7,#0x2000000
                  |L1.242|
0000f2  4638              MOV      r0,r7
0000f4  f7fffffe          BL       I2C_GetFlagStatus
0000f8  2801              CMP      r0,#1
0000fa  d1fa              BNE      |L1.242|
;;;103    	  /* Transmit data if ACK was send */
;;;104        if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
0000fc  f04f4900          MOV      r9,#0x80000000
000100  4648              MOV      r0,r9
000102  f7fffffe          BL       I2C_GetFlagStatus
000106  2801              CMP      r0,#1
000108  d004              BEQ      |L1.276|
;;;105        {
;;;106    			// Transmit word address
;;;107    			I2C_SendByte(address);
;;;108    			/* Wait end of transfer */
;;;109    			while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
;;;110    			
;;;111    			/* Transmit data if ACK was send */
;;;112    			if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
;;;113    			{
;;;114    				// Send data
;;;115    				while(count--)
;;;116    				{
;;;117    					I2C_SendByte(*data);
;;;118    					data++;
;;;119    					/* Wait end of transfer */
;;;120    					while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
;;;121    					// Check result
;;;122    					if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_NACK) == SET)
;;;123    					{
;;;124    						error = 3;	// error during data transfer
;;;125    						break;
;;;126    					}
;;;127    				}
;;;128    			}
;;;129    			else
;;;130    				error = 2;	// could not transfer word address
;;;131        }
;;;132    	else
;;;133    		error = 1;	// could not even transfer device address
00010a  2601              MOVS     r6,#1
                  |L1.268|
;;;134    	
;;;135    	/* Send stop */
;;;136    	I2C_SendSTOP();
00010c  f7fffffe          BL       I2C_SendSTOP
;;;137    
;;;138    	return error;
000110  4630              MOV      r0,r6
;;;139    }
000112  e79d              B        |L1.80|
                  |L1.276|
000114  f00800ff          AND      r0,r8,#0xff           ;107
000118  f7fffffe          BL       I2C_SendByte
                  |L1.284|
00011c  4638              MOV      r0,r7                 ;109
00011e  f7fffffe          BL       I2C_GetFlagStatus
000122  2801              CMP      r0,#1                 ;109
000124  d1fa              BNE      |L1.284|
000126  4648              MOV      r0,r9                 ;112
000128  f7fffffe          BL       I2C_GetFlagStatus
00012c  2801              CMP      r0,#1                 ;112
00012e  d001              BEQ      |L1.308|
000130  2602              MOVS     r6,#2                 ;130
000132  e7eb              B        |L1.268|
                  |L1.308|
000134  f44f4800          MOV      r8,#0x8000            ;122
000138  e00d              B        |L1.342|
                  |L1.314|
00013a  7828              LDRB     r0,[r5,#0]            ;117
00013c  f7fffffe          BL       I2C_SendByte
000140  1c6d              ADDS     r5,r5,#1              ;118
                  |L1.322|
000142  4638              MOV      r0,r7                 ;120
000144  f7fffffe          BL       I2C_GetFlagStatus
000148  2801              CMP      r0,#1                 ;120
00014a  d1fa              BNE      |L1.322|
00014c  4640              MOV      r0,r8                 ;122
00014e  f7fffffe          BL       I2C_GetFlagStatus
000152  2801              CMP      r0,#1                 ;122
000154  d005              BEQ      |L1.354|
                  |L1.342|
000156  0020              MOVS     r0,r4                 ;115
000158  f1a40401          SUB      r4,r4,#1              ;115
00015c  b2e4              UXTB     r4,r4                 ;115
00015e  d1ec              BNE      |L1.314|
000160  e7d4              B        |L1.268|
                  |L1.354|
000162  2603              MOVS     r6,#3                 ;124
000164  e7d2              B        |L1.268|
;;;140    
                          ENDP

                  EEPROMReady PROC
;;;145    //==============================================================//
;;;146    uint8_t EEPROMReady(void)
000166  b510              PUSH     {r4,lr}
;;;147    {
;;;148    	/* Wait I2C bus is free */
;;;149      while (I2C_GetFlagStatus(I2C_FLAG_BUS_FREE) != SET) {}
000168  f04f4480          MOV      r4,#0x40000000
                  |L1.364|
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       I2C_GetFlagStatus
000172  2801              CMP      r0,#1
000174  d1fa              BNE      |L1.364|
;;;150    	/* Send device and bank adress */
;;;151      I2C_Send7bitAddress(EEPROM_ADDRESS,I2C_Direction_Transmitter);
000176  2100              MOVS     r1,#0
000178  20a0              MOVS     r0,#0xa0
00017a  f7fffffe          BL       I2C_Send7bitAddress
;;;152    	/* Wait end of transfer */
;;;153      while (I2C_GetFlagStatus(I2C_FLAG_nTRANS) != SET) {}
00017e  f04f7400          MOV      r4,#0x2000000
                  |L1.386|
000182  4620              MOV      r0,r4
000184  f7fffffe          BL       I2C_GetFlagStatus
000188  2801              CMP      r0,#1
00018a  d1fa              BNE      |L1.386|
;;;154    	/* Send stop */
;;;155    	I2C_SendSTOP();
00018c  f7fffffe          BL       I2C_SendSTOP
;;;156    	// If ACK is received, EEPROM is ready
;;;157    	if (I2C_GetFlagStatus(I2C_FLAG_SLAVE_ACK) == SET)
000190  f04f4000          MOV      r0,#0x80000000
000194  f7fffffe          BL       I2C_GetFlagStatus
000198  2801              CMP      r0,#1
00019a  d001              BEQ      |L1.416|
;;;158    		return EEPROM_READY;
;;;159    	else
;;;160    		return EEPROM_BUSY;
00019c  2000              MOVS     r0,#0
;;;161    }
00019e  bd10              POP      {r4,pc}
                  |L1.416|
0001a0  2001              MOVS     r0,#1                 ;158
0001a2  bd10              POP      {r4,pc}
;;;162    
                          ENDP


;*** Start embedded assembler ***

#line 1 "src\\i2c_eeprom.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_i2c_eeprom_c_e2784f5f____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_i2c_eeprom_c_e2784f5f____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_i2c_eeprom_c_e2784f5f____REVSH|
#line 130
|__asm___12_i2c_eeprom_c_e2784f5f____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
