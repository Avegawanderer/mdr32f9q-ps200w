; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list -c --asm --interleave -o.\FLASH\guipanel.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guipanel.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guipanel.crf src\gui\guiWidgets\guiPanel.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  guiPanel_ProcessKey PROC
;;;24     //-------------------------------------------------------//
;;;25     uint8_t guiPanel_ProcessKey(guiPanel_t *panel, uint8_t key)
000000  b510              PUSH     {r4,lr}
;;;26     {
000002  4604              MOV      r4,r0
;;;27         guiGenericWidget_t *w;
;;;28         if (panel->isFocused)
000004  7a20              LDRB     r0,[r4,#8]
000006  0700              LSLS     r0,r0,#28
000008  d508              BPL      |L1.28|
;;;29         {
;;;30             if (key == PANEL_KEY_SELECT)
00000a  2901              CMP      r1,#1
00000c  d001              BEQ      |L1.18|
;;;31                 guiCore_RequestFocusNextWidget((guiGenericContainer_t *)panel,1);
;;;32             else
;;;33                 return GUI_EVENT_DECLINE;
00000e  2000              MOVS     r0,#0
;;;34         }
;;;35         else
;;;36         {
;;;37             // Key event came from child elements
;;;38             w = panel->widgets.elements[ panel->widgets.focusedIndex ];
;;;39             if (key == PANEL_KEY_PREV)
;;;40             {
;;;41                 // Check if event should be passed to parent
;;;42                 if ((panel->focusFallsThrough) && (guiCore_CheckWidgetTabIndex(w) == TABINDEX_IS_MIN))
;;;43                     return GUI_EVENT_DECLINE;
;;;44                 guiCore_RequestFocusNextWidget((guiGenericContainer_t *)panel,-1);
;;;45             }
;;;46             else if (key == PANEL_KEY_NEXT)
;;;47             {
;;;48                 // Check if event should be passed to parent
;;;49                 if ((panel->focusFallsThrough) && (guiCore_CheckWidgetTabIndex(w) == TABINDEX_IS_MAX))
;;;50                     return GUI_EVENT_DECLINE;
;;;51                 guiCore_RequestFocusNextWidget((guiGenericContainer_t *)panel,1);
;;;52             }
;;;53             else if (key == PANEL_KEY_ESC)
;;;54             {
;;;55                 if (panel->focusFallsThrough)
;;;56                     return GUI_EVENT_DECLINE;
;;;57                 //guiPanel_SetFocused(panel, 1);
;;;58                 guiCore_SetFocused((guiGenericWidget_t *)panel,1);
;;;59             }
;;;60             else
;;;61             {
;;;62                 return GUI_EVENT_DECLINE;   // unknown key
;;;63             }
;;;64         }
;;;65         return GUI_EVENT_ACCEPTED;
;;;66     }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2101              MOVS     r1,#1                 ;31
000014  4620              MOV      r0,r4                 ;31
000016  f7fffffe          BL       guiCore_RequestFocusNextWidget
00001a  e035              B        |L1.136|
                  |L1.28|
00001c  f8942021          LDRB     r2,[r4,#0x21]         ;38
000020  6a60              LDR      r0,[r4,#0x24]         ;38
000022  f8500022          LDR      r0,[r0,r2,LSL #2]     ;38
000026  2903              CMP      r1,#3                 ;39
000028  d005              BEQ      |L1.54|
00002a  2904              CMP      r1,#4                 ;46
00002c  d013              BEQ      |L1.86|
00002e  2902              CMP      r1,#2                 ;53
000030  d020              BEQ      |L1.116|
000032  2000              MOVS     r0,#0                 ;62
000034  bd10              POP      {r4,pc}
                  |L1.54|
000036  f8941028          LDRB     r1,[r4,#0x28]         ;42
00003a  07c9              LSLS     r1,r1,#31             ;42
00003c  d003              BEQ      |L1.70|
00003e  f7fffffe          BL       guiCore_CheckWidgetTabIndex
000042  2801              CMP      r0,#1                 ;42
000044  d005              BEQ      |L1.82|
                  |L1.70|
000046  f04f31ff          MOV      r1,#0xffffffff        ;44
00004a  4620              MOV      r0,r4                 ;44
00004c  f7fffffe          BL       guiCore_RequestFocusNextWidget
000050  e01a              B        |L1.136|
                  |L1.82|
000052  2000              MOVS     r0,#0                 ;43
000054  bd10              POP      {r4,pc}
                  |L1.86|
000056  f8941028          LDRB     r1,[r4,#0x28]         ;49
00005a  07c9              LSLS     r1,r1,#31             ;49
00005c  d003              BEQ      |L1.102|
00005e  f7fffffe          BL       guiCore_CheckWidgetTabIndex
000062  2802              CMP      r0,#2                 ;49
000064  d004              BEQ      |L1.112|
                  |L1.102|
000066  2101              MOVS     r1,#1                 ;51
000068  4620              MOV      r0,r4                 ;51
00006a  f7fffffe          BL       guiCore_RequestFocusNextWidget
00006e  e00b              B        |L1.136|
                  |L1.112|
000070  2000              MOVS     r0,#0                 ;50
000072  bd10              POP      {r4,pc}
                  |L1.116|
000074  f8940028          LDRB     r0,[r4,#0x28]         ;55
000078  07c0              LSLS     r0,r0,#31             ;55
00007a  d001              BEQ      |L1.128|
00007c  2000              MOVS     r0,#0                 ;56
00007e  bd10              POP      {r4,pc}
                  |L1.128|
000080  2101              MOVS     r1,#1                 ;58
000082  4620              MOV      r0,r4                 ;58
000084  f7fffffe          BL       guiCore_SetFocused
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;65
00008a  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  guiPanel_ProcessEvent PROC
;;;76     //-------------------------------------------------------//
;;;77     uint8_t guiPanel_ProcessEvent(guiGenericWidget_t *widget, guiEvent_t event)
00008c  b537              PUSH     {r0-r2,r4,r5,lr}
;;;78     {
00008e  4604              MOV      r4,r0
;;;79         uint8_t processResult = GUI_EVENT_ACCEPTED;
000090  2501              MOVS     r5,#1
;;;80         guiPanel_t *panel = (guiPanel_t *)widget;
;;;81         uint8_t key;
;;;82     #ifdef USE_TOUCH_SUPPORT
;;;83         containerTouchState_t touch;
;;;84     #endif
;;;85     
;;;86         // Process GUI messages - focus, draw, etc
;;;87         switch(event.type)
000092  f89d0004          LDRB     r0,[sp,#4]
000096  280d              CMP      r0,#0xd
000098  d27b              BCS      |L1.402|
00009a  e8dff000          TBB      [pc,r0]
00009e  8307              DCB      0x83,0x07
0000a0  83838383          DCB      0x83,0x83,0x83,0x83
0000a4  37322917          DCB      0x37,0x32,0x29,0x17
0000a8  83583c00          DCB      0x83,0x58,0x3c,0x00
;;;88         {
;;;89             case GUI_EVENT_DRAW:
;;;90                 guiGraph_DrawPanel(panel);
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       guiGraph_DrawPanel
;;;91                 // Call handler
;;;92                 guiCore_CallEventHandler((guiGenericWidget_t *)panel, &event);
0000b2  a901              ADD      r1,sp,#4
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       guiCore_CallEventHandler
;;;93                 // Reset flags - redrawForced will be reset by core
;;;94                 panel->redrawFocus = 0;
0000ba  7a60              LDRB     r0,[r4,#9]
0000bc  f0200001          BIC      r0,r0,#1
0000c0  7260              STRB     r0,[r4,#9]
;;;95                 panel->redrawRequired = 0;
0000c2  7a20              LDRB     r0,[r4,#8]
0000c4  f0200040          BIC      r0,r0,#0x40
0000c8  7220              STRB     r0,[r4,#8]
;;;96                 break;
0000ca  e070              B        |L1.430|
;;;97             case GUI_EVENT_FOCUS:
;;;98                 if (PANEL_ACCEPTS_FOCUS_EVENT(panel))
0000cc  7a20              LDRB     r0,[r4,#8]
0000ce  06c0              LSLS     r0,r0,#27
0000d0  d50c              BPL      |L1.236|
;;;99                 {
;;;100                    guiCore_SetFocused((guiGenericWidget_t *)panel,1);
0000d2  2101              MOVS     r1,#1
0000d4  4620              MOV      r0,r4
0000d6  f7fffffe          BL       guiCore_SetFocused
;;;101                    if (panel->focusFallsThrough)
0000da  f8940028          LDRB     r0,[r4,#0x28]
0000de  07c0              LSLS     r0,r0,#31
0000e0  d065              BEQ      |L1.430|
;;;102                    {
;;;103                        guiCore_RequestFocusNextWidget((guiGenericContainer_t *)panel,1);
0000e2  2101              MOVS     r1,#1
0000e4  4620              MOV      r0,r4
0000e6  f7fffffe          BL       guiCore_RequestFocusNextWidget
0000ea  e060              B        |L1.430|
                  |L1.236|
;;;104                        //guiCore_RequestFocusChange(panel->widgets.elements[ panel->widgets.focusedIndex ]);
;;;105                    }
;;;106                }
;;;107                else
;;;108                {
;;;109                    processResult = GUI_EVENT_DECLINE;      // Cannot accept focus
0000ec  2500              MOVS     r5,#0
0000ee  e05e              B        |L1.430|
;;;110                }
;;;111                break;
;;;112            case GUI_EVENT_UNFOCUS:
;;;113                guiCore_SetFocused((guiGenericWidget_t *)panel, 0);
0000f0  2100              MOVS     r1,#0
0000f2  4620              MOV      r0,r4
0000f4  f7fffffe          BL       guiCore_SetFocused
;;;114                panel->keepTouch = 0;
0000f8  7a60              LDRB     r0,[r4,#9]
0000fa  f0200004          BIC      r0,r0,#4
0000fe  7260              STRB     r0,[r4,#9]
;;;115                break;
000100  e055              B        |L1.430|
;;;116            case GUI_EVENT_SHOW:
;;;117                guiCore_SetVisible((guiGenericWidget_t *)panel, 1);
000102  2101              MOVS     r1,#1
000104  4620              MOV      r0,r4
000106  f7fffffe          BL       guiCore_SetVisible
;;;118                break;
00010a  e050              B        |L1.430|
;;;119            case GUI_EVENT_HIDE:
;;;120                guiCore_SetVisible((guiGenericWidget_t *)panel, 0);
00010c  2100              MOVS     r1,#0
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       guiCore_SetVisible
;;;121                break;
000114  e04b              B        |L1.430|
;;;122            case GUI_EVENT_ENCODER:
;;;123                processResult = GUI_EVENT_DECLINE;
000116  2500              MOVS     r5,#0
;;;124                if (PANEL_ACCEPTS_ENCODER_EVENT(panel))
000118  7a20              LDRB     r0,[r4,#8]
00011a  06c0              LSLS     r0,r0,#27
00011c  d547              BPL      |L1.430|
;;;125                {
;;;126                    key = (int16_t)event.lparam < 0 ? PANEL_KEY_PREV :
00011e  f9bd0006          LDRSH    r0,[sp,#6]
000122  2800              CMP      r0,#0
000124  da02              BGE      |L1.300|
000126  f04f0103          MOV      r1,#3
00012a  e005              B        |L1.312|
                  |L1.300|
;;;127                          ((int16_t)event.lparam > 0 ? PANEL_KEY_NEXT : 0);
00012c  dd02              BLE      |L1.308|
00012e  f04f0104          MOV      r1,#4
000132  e001              B        |L1.312|
                  |L1.308|
000134  f04f0100          MOV      r1,#0
                  |L1.312|
;;;128                    if (key != 0)
000138  b119              CBZ      r1,|L1.322|
;;;129                        processResult = guiPanel_ProcessKey(panel,key);
00013a  4620              MOV      r0,r4
00013c  f7fffffe          BL       guiPanel_ProcessKey
000140  4605              MOV      r5,r0
                  |L1.322|
;;;130                    // Call ENCODER event handler
;;;131                    processResult |= guiCore_CallEventHandler(widget, &event);
000142  a901              ADD      r1,sp,#4
000144  4620              MOV      r0,r4
000146  f7fffffe          BL       guiCore_CallEventHandler
00014a  4305              ORRS     r5,r5,r0
00014c  e02f              B        |L1.430|
;;;132                }
;;;133                break;
;;;134            case GUI_EVENT_KEY:
;;;135                processResult = GUI_EVENT_DECLINE;
00014e  2500              MOVS     r5,#0
;;;136                if (PANEL_ACCEPTS_KEY_EVENT(panel))
000150  7a20              LDRB     r0,[r4,#8]
000152  06c0              LSLS     r0,r0,#27
000154  d52b              BPL      |L1.430|
;;;137                {
;;;138                    if (event.spec == GUI_KEY_EVENT_DOWN)
000156  f89d0005          LDRB     r0,[sp,#5]
00015a  2801              CMP      r0,#1
00015c  d113              BNE      |L1.390|
;;;139                    {
;;;140                        if (event.lparam == GUI_KEY_OK)
00015e  f8bd0006          LDRH     r0,[sp,#6]
000162  2802              CMP      r0,#2
000164  d016              BEQ      |L1.404|
;;;141                            key = PANEL_KEY_SELECT;
;;;142                        else if (event.lparam == GUI_KEY_ESC)
000166  2801              CMP      r0,#1
000168  d016              BEQ      |L1.408|
;;;143                            key = PANEL_KEY_ESC;
;;;144                        else if ((event.lparam == GUI_KEY_LEFT) || (event.lparam == GUI_KEY_UP))
00016a  2803              CMP      r0,#3
00016c  d016              BEQ      |L1.412|
00016e  2805              CMP      r0,#5
000170  d014              BEQ      |L1.412|
;;;145                            key = PANEL_KEY_PREV;
;;;146                        else if ((event.lparam == GUI_KEY_RIGHT) || (event.lparam == GUI_KEY_DOWN))
000172  2804              CMP      r0,#4
000174  d014              BEQ      |L1.416|
000176  2806              CMP      r0,#6
000178  d012              BEQ      |L1.416|
;;;147                            key = PANEL_KEY_NEXT;
;;;148                        else
;;;149                            key = 0;
00017a  2100              MOVS     r1,#0
                  |L1.380|
;;;150                        if (key != 0)
00017c  b119              CBZ      r1,|L1.390|
;;;151                            processResult = guiPanel_ProcessKey(panel,key);
00017e  4620              MOV      r0,r4
000180  f7fffffe          BL       guiPanel_ProcessKey
000184  4605              MOV      r5,r0
                  |L1.390|
;;;152                    }
;;;153                    // Call KEY event handler
;;;154                    processResult |= guiCore_CallEventHandler(widget, &event);
000186  a901              ADD      r1,sp,#4
000188  4620              MOV      r0,r4
00018a  f7fffffe          BL       guiCore_CallEventHandler
00018e  4305              ORRS     r5,r5,r0
000190  e00d              B        |L1.430|
                  |L1.402|
000192  e007              B        |L1.420|
                  |L1.404|
000194  2101              MOVS     r1,#1                 ;141
000196  e7f1              B        |L1.380|
                  |L1.408|
000198  2102              MOVS     r1,#2                 ;143
00019a  e7ef              B        |L1.380|
                  |L1.412|
00019c  2103              MOVS     r1,#3                 ;145
00019e  e7ed              B        |L1.380|
                  |L1.416|
0001a0  2104              MOVS     r1,#4                 ;147
0001a2  e7eb              B        |L1.380|
                  |L1.420|
;;;155                }
;;;156                break;
;;;157    #ifdef USE_TOUCH_SUPPORT
;;;158            case GUI_EVENT_TOUCH:
;;;159                if (PANEL_ACCEPTS_TOUCH_EVENT(panel))
;;;160                {
;;;161                    // Convert touch event
;;;162                    guiCore_DecodeContainerTouchEvent((guiGenericWidget_t *)panel, &event, &touch);
;;;163                    // Check if widget holds the touch
;;;164                    if (panel->keepTouch)
;;;165                    {
;;;166                        if (touch.state == TOUCH_RELEASE)
;;;167                            panel->keepTouch = 0;
;;;168                    }
;;;169                    else if (touch.state != TOUCH_RELEASE)
;;;170                    {
;;;171                        // Determine if touch point lies inside one of child widgets
;;;172                        if (touch.widgetAtXY == 0)
;;;173                        {
;;;174                            // Touch point does not lie inside panel - skip that.
;;;175                            processResult = GUI_EVENT_DECLINE;
;;;176                            break;
;;;177                        }
;;;178                        else if (touch.widgetAtXY != (guiGenericWidget_t *)panel)
;;;179                        {
;;;180                            // Point belogs to one of child widgets - pass touch event to it.
;;;181                            guiCore_AddMessageToQueue(touch.widgetAtXY, &event);
;;;182                        }
;;;183                        else
;;;184                        {
;;;185                            // Point belogs to panel itself
;;;186                            guiCore_SetFocused((guiGenericWidget_t *)panel,1);
;;;187                            panel->keepTouch = 1;
;;;188                        }
;;;189                    }
;;;190                    // Call touch handler - return value is ignored
;;;191                    event.type = GUI_ON_TOUCH_EVENT;
;;;192                    event.spec = touch.state;
;;;193                    event.lparam = (uint16_t)touch.x;
;;;194                    event.hparam = (uint16_t)touch.y;
;;;195                    guiCore_CallEventHandler(widget, &event);
;;;196                }
;;;197                else
;;;198                {
;;;199                    processResult = GUI_EVENT_DECLINE;      // Cannot process touch event
;;;200                }
;;;201                break;
;;;202    #endif
;;;203            default:
;;;204                // Widget cannot process incoming event. Try to find a handler.
;;;205                processResult = guiCore_CallEventHandler(widget, &event);
0001a4  a901              ADD      r1,sp,#4
0001a6  4620              MOV      r0,r4
0001a8  f7fffffe          BL       guiCore_CallEventHandler
0001ac  4605              MOV      r5,r0
                  |L1.430|
;;;206        }
;;;207        return processResult;
0001ae  4628              MOV      r0,r5
;;;208    }
0001b0  bd3e              POP      {r1-r5,pc}
;;;209    
                          ENDP

                  guiPanel_Initialize PROC
;;;215    //-------------------------------------------------------//
;;;216    void guiPanel_Initialize(guiPanel_t *panel, guiGenericWidget_t *parent)
0001b2  b570              PUSH     {r4-r6,lr}
;;;217    {
0001b4  4604              MOV      r4,r0
0001b6  460d              MOV      r5,r1
;;;218        memset(panel, 0, sizeof(*panel));
0001b8  212c              MOVS     r1,#0x2c
0001ba  4620              MOV      r0,r4
0001bc  f7fffffe          BL       __aeabi_memclr4
;;;219        panel->type = WT_PANEL;
0001c0  2001              MOVS     r0,#1
0001c2  7020              STRB     r0,[r4,#0]
;;;220        panel->parent = parent;
0001c4  6065              STR      r5,[r4,#4]
;;;221        panel->isContainer = 1;
0001c6  7a20              LDRB     r0,[r4,#8]
0001c8  f0400004          ORR      r0,r0,#4
;;;222        panel->acceptTouch = 1;
0001cc  f0400002          ORR      r0,r0,#2
;;;223        panel->acceptFocusByTab = 1;
0001d0  f0400001          ORR      r0,r0,#1
0001d4  7220              STRB     r0,[r4,#8]
;;;224        panel->focusFallsThrough = 1;
0001d6  f8940028          LDRB     r0,[r4,#0x28]
0001da  f0400001          ORR      r0,r0,#1
;;;225        panel->processEvent = guiPanel_ProcessEvent;
0001de  f2af1153          ADR      r1,guiPanel_ProcessEvent + 1
0001e2  6161              STR      r1,[r4,#0x14]
;;;226        panel->frame = FRAME_NONE;
0001e4  f020000e          BIC      r0,r0,#0xe
0001e8  f8840028          STRB     r0,[r4,#0x28]
;;;227    }
0001ec  bd70              POP      {r4-r6,pc}
;;;228    
                          ENDP

