; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\lcd_1202.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\lcd_1202.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\lcd_1202.crf src\lcd_1202.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LcdWrite PROC
;;;42     //==============================================================//
;;;43     void LcdWrite(uint8_t val, uint8_t mode)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4604              MOV      r4,r0
;;;45     	uint16_t temp = val;
;;;46     	if (mode == DATA)		
000004  2901              CMP      r1,#1
000006  d101              BNE      |L1.12|
;;;47     		temp |= 0x0100;;	// set D/C bit (MSB of the packet)
000008  f4447480          ORR      r4,r4,#0x100
                  |L1.12|
;;;48     	// Wait if TX FIFO is full
;;;49     	while( SSP_GetFlagStatus(MDR_SSP2,SSP_FLAG_TNF)!= SET );
00000c  4d9a              LDR      r5,|L1.632|
                  |L1.14|
00000e  2102              MOVS     r1,#2
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       SSP_GetFlagStatus
000016  2801              CMP      r0,#1
000018  d1f9              BNE      |L1.14|
;;;50     	SSP_SendData (MDR_SSP2,temp);
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      SSP_SendData
;;;51     }
;;;52     
                          ENDP

                  LcdDelayUs PROC
;;;56     //==============================================================//
;;;57     void LcdDelayUs(uint16_t us)
000026  b510              PUSH     {r4,lr}
;;;58     {
;;;59     	uint32_t time_delay = DWT_StartDelayUs(us);
000028  f7fffffe          BL       DWT_StartDelayUs
00002c  4604              MOV      r4,r0
                  |L1.46|
;;;60     	while(DWT_DelayInProgress(time_delay));
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       DWT_DelayInProgress
000034  2800              CMP      r0,#0
000036  d1fa              BNE      |L1.46|
;;;61     }
000038  bd10              POP      {r4,pc}
;;;62     
                          ENDP

                  LcdSelect PROC
;;;66     //==============================================================//
;;;67     void LcdSelect(uint8_t lcd)
00003a  b510              PUSH     {r4,lr}
;;;68     {
;;;69     	(lcd==LCD0) ? PORT_SetBits(MDR_PORTE, 1<<LCD_SEL) : PORT_ResetBits(MDR_PORTE, 1<<LCD_SEL);
00003c  4a8f              LDR      r2,|L1.636|
00003e  2801              CMP      r0,#1
000040  d007              BEQ      |L1.82|
000042  2104              MOVS     r1,#4
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       PORT_ResetBits
                  |L1.74|
;;;70     	LcdDelayUs(20);
00004a  e8bd4010          POP      {r4,lr}
00004e  2014              MOVS     r0,#0x14
000050  e7fe              B        LcdDelayUs
                  |L1.82|
000052  2104              MOVS     r1,#4                 ;69
000054  4610              MOV      r0,r2                 ;69
000056  f7fffffe          BL       PORT_SetBits
00005a  e7f6              B        |L1.74|
;;;71     }
;;;72     
                          ENDP

                  LcdSingleInit PROC
;;;76     //==============================================================//
;;;77     void LcdSingleInit(void)
00005c  b570              PUSH     {r4-r6,lr}
;;;78     {
;;;79     	uint16_t i;
;;;80     	// Software reset
;;;81     	LcdWrite(CMD_RESET,CMD);	
00005e  2100              MOVS     r1,#0
000060  20e2              MOVS     r0,#0xe2
000062  f7fffffe          BL       LcdWrite
;;;82     	//---- Ignored by china LCDs ----//
;;;83     	// Charge pump
;;;84     	LcdWrite(CMD_CHARGE_PUMP_MUL,CMD);
000066  2100              MOVS     r1,#0
000068  203d              MOVS     r0,#0x3d
00006a  f7fffffe          BL       LcdWrite
;;;85     	LcdWrite(0x01,CMD);					// A bit lower VLCD for 3.3V
00006e  2100              MOVS     r1,#0
000070  2001              MOVS     r0,#1
000072  f7fffffe          BL       LcdWrite
;;;86     	// Set VOP (contrast)
;;;87     	LcdWrite(CMD_SET_VOP,CMD);
000076  2100              MOVS     r1,#0
000078  20e1              MOVS     r0,#0xe1
00007a  f7fffffe          BL       LcdWrite
;;;88     	LcdWrite(0x00,CMD);					// default
00007e  2100              MOVS     r1,#0
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       LcdWrite
;;;89     	// V0 - voltage range
;;;90     	LcdWrite(CMD_SET_VO_RANGE | V0R_8V12,CMD);	// default
000086  2100              MOVS     r1,#0
000088  2024              MOVS     r0,#0x24
00008a  f7fffffe          BL       LcdWrite
;;;91     	// Electronic volume
;;;92     	LcdWrite(CMD_SET_EV | 0x10,CMD);	// default
00008e  2100              MOVS     r1,#0
000090  2090              MOVS     r0,#0x90
000092  f7fffffe          BL       LcdWrite
;;;93     	// X-axis reverse
;;;94     	#ifdef HORIZONTAL_REVERSE	
;;;95     		LcdWrite(CMD_SELECT_SEGMENT_DIR | SEGMENT_REVERSE, CMD);
;;;96     	#else 
;;;97     		LcdWrite(CMD_SELECT_SEGMENT_DIR | SEGMENT_NORMAL, CMD);
000096  2100              MOVS     r1,#0
000098  20a0              MOVS     r0,#0xa0
00009a  f7fffffe          BL       LcdWrite
;;;98     	#endif
;;;99     	//------------------------------//
;;;100    	// Y-axis reverse
;;;101    	#ifdef VERTICAL_REVERSE	
;;;102    		LcdWrite(CMD_SELECT_COMMON_DIR | COMMON_REVERSE, CMD);
00009e  2100              MOVS     r1,#0
0000a0  20c8              MOVS     r0,#0xc8
0000a2  f7fffffe          BL       LcdWrite
;;;103    	#else 
;;;104    		LcdWrite(CMD_SELECT_COMMON_DIR | COMMON_NORMAL, CMD);
;;;105    	#endif
;;;106    	// Display inversion
;;;107    	#ifdef LCD_INVERSE
;;;108    		LcdWrite(CMD_NORM_INVERSE | DISPLAY_INVERSE,CMD);	
;;;109    	#else
;;;110    		LcdWrite(CMD_NORM_INVERSE | DISPLAY_NORMAL,CMD);	
0000a6  2100              MOVS     r1,#0
0000a8  20a6              MOVS     r0,#0xa6
0000aa  f7fffffe          BL       LcdWrite
;;;111      #endif	
;;;112    	// Power saver OFF
;;;113    	LcdWrite(CMD_ALL_POINTS_ON_OFF | POINTS_NORMAL,CMD);	
0000ae  2100              MOVS     r1,#0
0000b0  20a4              MOVS     r0,#0xa4
0000b2  f7fffffe          BL       LcdWrite
;;;114    	// Internal voltage enable
;;;115    	LcdWrite(CMD_SET_POWER | ALL_ENABLE,CMD);
0000b6  2100              MOVS     r1,#0
0000b8  202f              MOVS     r0,#0x2f
0000ba  f7fffffe          BL       LcdWrite
;;;116    	// Start line 0
;;;117    	LcdWrite(CMD_SET_START_LINE | 0x00, CMD);
0000be  2100              MOVS     r1,#0
0000c0  2040              MOVS     r0,#0x40
0000c2  f7fffffe          BL       LcdWrite
;;;118    	
;;;119    	// Others deafults
;;;120    	LcdWrite(CMD_SET_ICON_MODE | ICON_MODE_DISABLE,CMD);
0000c6  2100              MOVS     r1,#0
0000c8  20f8              MOVS     r0,#0xf8
0000ca  f7fffffe          BL       LcdWrite
;;;121    	LcdWrite(CMD_LINES_NUMBER | 0x00,CMD);
0000ce  2100              MOVS     r1,#0
0000d0  20d0              MOVS     r0,#0xd0
0000d2  f7fffffe          BL       LcdWrite
;;;122    	LcdWrite(CMD_SET_BIAS | 0x00,CMD);
0000d6  2100              MOVS     r1,#0
0000d8  2030              MOVS     r0,#0x30
0000da  f7fffffe          BL       LcdWrite
;;;123    	
;;;124    	// Add memory init code here
;;;125    	
;;;126    	// clear LCD
;;;127    	LcdSetRow(0);
0000de  2100              MOVS     r1,#0
0000e0  20b0              MOVS     r0,#0xb0
0000e2  f7fffffe          BL       LcdWrite
;;;128        LcdSetCol(0);
0000e6  2100              MOVS     r1,#0
0000e8  2010              MOVS     r0,#0x10
0000ea  f7fffffe          BL       LcdWrite
0000ee  2100              MOVS     r1,#0
0000f0  4608              MOV      r0,r1
0000f2  f7fffffe          BL       LcdWrite
;;;129    	for(i=0; i<LCD_PHY_BUFFER_SIZE-1; i++)
0000f6  2400              MOVS     r4,#0
0000f8  f240355f          MOV      r5,#0x35f
                  |L1.252|
;;;130      	LcdWrite(0,DATA);
0000fc  2101              MOVS     r1,#1
0000fe  2000              MOVS     r0,#0
000100  f7fffffe          BL       LcdWrite
000104  1c64              ADDS     r4,r4,#1              ;129
000106  b2a4              UXTH     r4,r4                 ;129
000108  42ac              CMP      r4,r5                 ;129
00010a  d3f7              BCC      |L1.252|
;;;131      
;;;132    	// Display ON
;;;133    	LcdWrite(CMD_ON_OFF | DISPLAY_ON,CMD);
00010c  e8bd4070          POP      {r4-r6,lr}
000110  2100              MOVS     r1,#0
000112  20af              MOVS     r0,#0xaf
000114  e7fe              B        LcdWrite
;;;134    }
;;;135    
                          ENDP

                  LcdInit PROC
;;;139    //==============================================================//
;;;140    void LcdInit(void)
000116  b570              PUSH     {r4-r6,lr}
;;;141    {
;;;142      // Hardware reset
;;;143    	#ifdef USE_HARDWARE_RESET
;;;144    		lcd_clear_reset_line;
000118  4c58              LDR      r4,|L1.636|
00011a  2101              MOVS     r1,#1
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       PORT_ResetBits
;;;145    		LcdDelayUs(10000);
000122  f2427510          MOV      r5,#0x2710
000126  4628              MOV      r0,r5
000128  f7fffffe          BL       LcdDelayUs
;;;146    		lcd_set_reset_line;
00012c  2101              MOVS     r1,#1
00012e  4620              MOV      r0,r4
000130  f7fffffe          BL       PORT_SetBits
;;;147    		LcdDelayUs(10000);
000134  4628              MOV      r0,r5
000136  f7fffffe          BL       LcdDelayUs
;;;148    	#endif
;;;149      // Initialize LCD #0
;;;150    	LcdSelect(LCD0);
00013a  2001              MOVS     r0,#1
00013c  f7fffffe          BL       LcdSelect
;;;151    	LcdSingleInit();
000140  f7fffffe          BL       LcdSingleInit
;;;152    	// wait until all words are sent
;;;153    	while (!LCD_TX_DONE);	
000144  4c4c              LDR      r4,|L1.632|
                  |L1.326|
000146  2110              MOVS     r1,#0x10
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       SSP_GetFlagStatus
00014e  2800              CMP      r0,#0
000150  d1f9              BNE      |L1.326|
;;;154    	// Initialize LCD #1
;;;155    	LcdSelect(LCD1);
000152  2002              MOVS     r0,#2
000154  f7fffffe          BL       LcdSelect
;;;156    	LcdSingleInit();
000158  f7fffffe          BL       LcdSingleInit
                  |L1.348|
;;;157    	// wait until all words are sent
;;;158    	while (!LCD_TX_DONE);	
00015c  2110              MOVS     r1,#0x10
00015e  4620              MOV      r0,r4
000160  f7fffffe          BL       SSP_GetFlagStatus
000164  2800              CMP      r0,#0
000166  d1f9              BNE      |L1.348|
;;;159    }
000168  bd70              POP      {r4-r6,pc}
;;;160    
                          ENDP

                  LcdUpdateByCore PROC
;;;169    //==============================================================//
;;;170    void LcdUpdateByCore(uint8_t display, uint16_t* lcd_buffer)
00016a  b570              PUSH     {r4-r6,lr}
;;;171    {
00016c  460d              MOV      r5,r1
;;;172    	uint16_t i;
;;;173    	
;;;174    	LcdSelect(display);
00016e  f7fffffe          BL       LcdSelect
;;;175    	LcdSetRow(0);
000172  2100              MOVS     r1,#0
000174  20b0              MOVS     r0,#0xb0
000176  f7fffffe          BL       LcdWrite
;;;176    	LcdSetCol(0);
00017a  2100              MOVS     r1,#0
00017c  2010              MOVS     r0,#0x10
00017e  f7fffffe          BL       LcdWrite
000182  2100              MOVS     r1,#0
000184  4608              MOV      r0,r1
000186  f7fffffe          BL       LcdWrite
;;;177    	for (i=0; i<LCD_PHY_BUFFER_SIZE; i++)
00018a  2400              MOVS     r4,#0
00018c  f44f7658          MOV      r6,#0x360
                  |L1.400|
;;;178    		LcdWrite(lcd_buffer[i],DATA);
000190  f8350014          LDRH     r0,[r5,r4,LSL #1]
000194  2101              MOVS     r1,#1
000196  b2c0              UXTB     r0,r0
000198  f7fffffe          BL       LcdWrite
00019c  1c64              ADDS     r4,r4,#1              ;177
00019e  b2a4              UXTH     r4,r4                 ;177
0001a0  42b4              CMP      r4,r6                 ;177
0001a2  d3f5              BCC      |L1.400|
;;;179    	// wait until all words are sent
;;;180    	while (!LCD_TX_DONE);	
0001a4  4c34              LDR      r4,|L1.632|
                  |L1.422|
0001a6  2110              MOVS     r1,#0x10
0001a8  4620              MOV      r0,r4
0001aa  f7fffffe          BL       SSP_GetFlagStatus
0001ae  2800              CMP      r0,#0
0001b0  d1f9              BNE      |L1.422|
;;;181    }
0001b2  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  LcdUpdateBothByCore PROC
;;;189    //==============================================================//
;;;190    void LcdUpdateBothByCore(uint8_t* lcd_buffer)
0001b4  e92d47f0          PUSH     {r4-r10,lr}
;;;191    {
0001b8  4606              MOV      r6,r0
;;;192    	uint16_t i;
;;;193    	uint8_t j;
;;;194    	uint16_t lcd_buf_index;
;;;195    	uint8_t num_pages = LCD_PHY_YSIZE / 8;
;;;196    	if (LCD_PHY_YSIZE % 8) num_pages++;
0001ba  2709              MOVS     r7,#9
;;;197    	
;;;198    	// Update LCD0
;;;199    	LcdSelect(LCD0);
0001bc  2001              MOVS     r0,#1
0001be  f7fffffe          BL       LcdSelect
;;;200    	LcdSetRow(0);
0001c2  2100              MOVS     r1,#0
0001c4  20b0              MOVS     r0,#0xb0
0001c6  f7fffffe          BL       LcdWrite
;;;201    	LcdSetCol(0);
0001ca  2100              MOVS     r1,#0
0001cc  2010              MOVS     r0,#0x10
0001ce  f7fffffe          BL       LcdWrite
0001d2  2100              MOVS     r1,#0
0001d4  4608              MOV      r0,r1
0001d6  f7fffffe          BL       LcdWrite
;;;202    	//lcd_buf_index = 0;
;;;203    	lcd_buf_index = LCD_PHY_XSIZE;
0001da  2460              MOVS     r4,#0x60
;;;204        for (j=0; j<num_pages; j++)
0001dc  f04f0800          MOV      r8,#0
0001e0  e011              B        |L1.518|
                  |L1.482|
;;;205        {
;;;206            for (i=0; i<LCD_PHY_XSIZE; i++)
0001e2  2500              MOVS     r5,#0
                  |L1.484|
;;;207    			//LcdWrite(lcd_buffer[lcd_buf_index++],DATA);
;;;208    			LcdWrite(lcd_buffer[--lcd_buf_index],DATA);
0001e4  1e64              SUBS     r4,r4,#1
0001e6  b2a4              UXTH     r4,r4
0001e8  2101              MOVS     r1,#1
0001ea  5d30              LDRB     r0,[r6,r4]
0001ec  f7fffffe          BL       LcdWrite
0001f0  1c6d              ADDS     r5,r5,#1              ;206
0001f2  b2ad              UXTH     r5,r5                 ;206
0001f4  2d60              CMP      r5,#0x60              ;206
0001f6  d3f5              BCC      |L1.484|
;;;209    		//lcd_buf_index += LCD_PHY_XSIZE;
;;;210    		lcd_buf_index += 3*LCD_PHY_XSIZE;
0001f8  f5047490          ADD      r4,r4,#0x120
0001fc  b2a4              UXTH     r4,r4
0001fe  f1080801          ADD      r8,r8,#1              ;204
000202  f00808ff          AND      r8,r8,#0xff           ;204
                  |L1.518|
000206  45b8              CMP      r8,r7                 ;204
000208  d3eb              BCC      |L1.482|
;;;211        }
;;;212    	// wait until all words are sent
;;;213    	while (!LCD_TX_DONE);	
00020a  f8df906c          LDR      r9,|L1.632|
                  |L1.526|
00020e  2110              MOVS     r1,#0x10
000210  4648              MOV      r0,r9
000212  f7fffffe          BL       SSP_GetFlagStatus
000216  2800              CMP      r0,#0
000218  d1f9              BNE      |L1.526|
;;;214    	
;;;215    	// Update LCD1
;;;216    	LcdSelect(LCD1);
00021a  2002              MOVS     r0,#2
00021c  f7fffffe          BL       LcdSelect
;;;217    	LcdSetRow(0);
000220  2100              MOVS     r1,#0
000222  20b0              MOVS     r0,#0xb0
000224  f7fffffe          BL       LcdWrite
;;;218    	LcdSetCol(0);
000228  2100              MOVS     r1,#0
00022a  2010              MOVS     r0,#0x10
00022c  f7fffffe          BL       LcdWrite
000230  2100              MOVS     r1,#0
000232  4608              MOV      r0,r1
000234  f7fffffe          BL       LcdWrite
;;;219    	//lcd_buf_index = LCD_PHY_XSIZE;
;;;220    	lcd_buf_index = 2*LCD_PHY_XSIZE;
000238  24c0              MOVS     r4,#0xc0
;;;221        for (j=0; j<num_pages; j++)
00023a  f04f0800          MOV      r8,#0
00023e  e011              B        |L1.612|
                  |L1.576|
;;;222        {
;;;223            for (i=0; i<LCD_PHY_XSIZE; i++)
000240  2500              MOVS     r5,#0
                  |L1.578|
;;;224    			//LcdWrite(lcd_buffer[lcd_buf_index++],DATA);
;;;225    			LcdWrite(lcd_buffer[--lcd_buf_index],DATA);
000242  1e64              SUBS     r4,r4,#1
000244  b2a4              UXTH     r4,r4
000246  2101              MOVS     r1,#1
000248  5d30              LDRB     r0,[r6,r4]
00024a  f7fffffe          BL       LcdWrite
00024e  1c6d              ADDS     r5,r5,#1              ;223
000250  b2ad              UXTH     r5,r5                 ;223
000252  2d60              CMP      r5,#0x60              ;223
000254  d3f5              BCC      |L1.578|
;;;226    		//lcd_buf_index += LCD_PHY_XSIZE;
;;;227    		lcd_buf_index += 3*LCD_PHY_XSIZE;
000256  f5047490          ADD      r4,r4,#0x120
00025a  b2a4              UXTH     r4,r4
00025c  f1080801          ADD      r8,r8,#1              ;221
000260  f00808ff          AND      r8,r8,#0xff           ;221
                  |L1.612|
000264  45b8              CMP      r8,r7                 ;221
000266  d3eb              BCC      |L1.576|
                  |L1.616|
;;;228        }
;;;229    	
;;;230    	// wait until all words are sent
;;;231    	while (!LCD_TX_DONE);	
000268  2110              MOVS     r1,#0x10
00026a  4648              MOV      r0,r9
00026c  f7fffffe          BL       SSP_GetFlagStatus
000270  2800              CMP      r0,#0
000272  d1f9              BNE      |L1.616|
;;;232    }
000274  e8bd87f0          POP      {r4-r10,pc}
;;;233    
                          ENDP

                  |L1.632|
                          DCD      0x400a0000
                  |L1.636|
                          DCD      0x400c8000

;*** Start embedded assembler ***

#line 1 "src\\lcd_1202.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_lcd_1202_c_LcdWrite____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_lcd_1202_c_LcdWrite____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_lcd_1202_c_LcdWrite____REVSH|
#line 130
|__asm___10_lcd_1202_c_LcdWrite____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
