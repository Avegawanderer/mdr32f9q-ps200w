; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\control.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\control.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\control.crf src\control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GetOverloadStatus PROC
;;;20     //-------------------------------------------------------//
;;;21     uint8_t GetOverloadStatus(void)
000000  4822              LDR      r0,|L1.140|
;;;22     {
;;;23     	return (MDR_PORTA->RXTX & (1<<OVERLD)) ? NORMAL : OVERLOAD;
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  f0800001          EOR      r0,r0,#1
;;;24     }
00000c  4770              BX       lr
;;;25     
                          ENDP

                  GetACLineStatus PROC
;;;26     // 220V AC input line state
;;;27     uint8_t GetACLineStatus(void)
00000e  4820              LDR      r0,|L1.144|
;;;28     {
;;;29     	return (MDR_PORTB->RXTX & (1<<PG)) ? OFFLINE : ONLINE; 
000010  6800              LDR      r0,[r0,#0]
000012  2101              MOVS     r1,#1
000014  ea212090          BIC      r0,r1,r0,LSR #10
;;;30     }
000018  4770              BX       lr
;;;31     
                          ENDP

                  SetConverterState PROC
;;;37     //-------------------------------------------------------//
;;;38     void SetConverterState(uint8_t newState)
00001a  b510              PUSH     {r4,lr}
;;;39     {
00001c  4604              MOV      r4,r0
;;;40     	if (newState == CONVERTER_ON)
00001e  2c01              CMP      r4,#1
000020  d104              BNE      |L1.44|
;;;41     		PORT_SetBits(MDR_PORTF, 1<<EN);
000022  2104              MOVS     r1,#4
000024  481b              LDR      r0,|L1.148|
000026  f7fffffe          BL       PORT_SetBits
00002a  e003              B        |L1.52|
                  |L1.44|
;;;42     	else
;;;43     		PORT_ResetBits(MDR_PORTF, 1<<EN);
00002c  2104              MOVS     r1,#4
00002e  4819              LDR      r0,|L1.148|
000030  f7fffffe          BL       PORT_ResetBits
                  |L1.52|
;;;44     }
000034  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  SetFeedbackChannel PROC
;;;48     //-------------------------------------------------------//
;;;49     void SetFeedbackChannel(uint8_t newChannel)
000036  b510              PUSH     {r4,lr}
;;;50     {
000038  4604              MOV      r4,r0
;;;51     	if (newChannel == CHANNEL_5V)
00003a  2c01              CMP      r4,#1
00003c  d104              BNE      |L1.72|
;;;52     		PORT_SetBits(MDR_PORTF, 1<<STAB_SEL);
00003e  2108              MOVS     r1,#8
000040  4814              LDR      r0,|L1.148|
000042  f7fffffe          BL       PORT_SetBits
000046  e003              B        |L1.80|
                  |L1.72|
;;;53     	else
;;;54     		PORT_ResetBits(MDR_PORTF, 1<<STAB_SEL);
000048  2108              MOVS     r1,#8
00004a  4812              LDR      r0,|L1.148|
00004c  f7fffffe          BL       PORT_ResetBits
                  |L1.80|
;;;55     }
000050  bd10              POP      {r4,pc}
;;;56     
                          ENDP

                  SetCurrentLimit PROC
;;;59     //-------------------------------------------------------//
;;;60     void SetCurrentLimit(uint8_t newLimit)
000052  b510              PUSH     {r4,lr}
;;;61     {
000054  4604              MOV      r4,r0
;;;62     	if (newLimit == CURRENT_LIM_HIGH)
000056  2c01              CMP      r4,#1
000058  d104              BNE      |L1.100|
;;;63     		PORT_SetBits(MDR_PORTA, 1<<CLIM_SEL);
00005a  2102              MOVS     r1,#2
00005c  480b              LDR      r0,|L1.140|
00005e  f7fffffe          BL       PORT_SetBits
000062  e003              B        |L1.108|
                  |L1.100|
;;;64     	else
;;;65     		PORT_ResetBits(MDR_PORTA, 1<<CLIM_SEL);
000064  2102              MOVS     r1,#2
000066  4809              LDR      r0,|L1.140|
000068  f7fffffe          BL       PORT_ResetBits
                  |L1.108|
;;;66     }
00006c  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  SetOutputLoad PROC
;;;70     //-------------------------------------------------------//
;;;71     void SetOutputLoad(uint8_t newLoad)
00006e  b510              PUSH     {r4,lr}
;;;72     {
000070  4604              MOV      r4,r0
;;;73     	if (newLoad == LOAD_DISABLE)
000072  2c01              CMP      r4,#1
000074  d104              BNE      |L1.128|
;;;74     		PORT_SetBits(MDR_PORTE, 1<<LDIS);
000076  2140              MOVS     r1,#0x40
000078  4807              LDR      r0,|L1.152|
00007a  f7fffffe          BL       PORT_SetBits
00007e  e003              B        |L1.136|
                  |L1.128|
;;;75     	else
;;;76     		PORT_ResetBits(MDR_PORTE, 1<<LDIS);	
000080  2140              MOVS     r1,#0x40
000082  4805              LDR      r0,|L1.152|
000084  f7fffffe          BL       PORT_ResetBits
                  |L1.136|
;;;77     }
000088  bd10              POP      {r4,pc}
;;;78     
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x400a8000
                  |L1.144|
                          DCD      0x400b0000
                  |L1.148|
                          DCD      0x400e8000
                  |L1.152|
                          DCD      0x400c8000

;*** Start embedded assembler ***

#line 1 "src\\control.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_8657b4f9____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_8657b4f9____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_8657b4f9____REVSH|
#line 130
|__asm___9_control_c_8657b4f9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
