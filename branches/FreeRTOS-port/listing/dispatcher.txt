; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\dispatcher.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\dispatcher.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\dispatcher.crf src\dispatcher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskDispatcher PROC
;;;37     
;;;38     void vTaskDispatcher(void *pvParameters) 
000000  b088              SUB      sp,sp,#0x20
;;;39     {
;;;40     	dispatch_incoming_msg_t income_msg;
;;;41     	conveter_message_t converter_msg;
;;;42     	gui_incoming_msg_t gui_msg;
;;;43     	uint16_t mask;
;;;44     	uint32_t sound_msg;
;;;45     	
;;;46     	// Initialize
;;;47     	xQueueDispatcher = xQueueCreate( 10, sizeof( dispatch_incoming_msg_t ) );		// Queue can contain 5 elements of type uint32_t
000002  2200              MOVS     r2,#0
000004  2108              MOVS     r1,#8
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4c82              LDR      r4,|L1.536|
00000e  6020              STR      r0,[r4,#0]  ; xQueueDispatcher
;;;48     	if( xQueueDispatcher == 0 )
000010  b1d8              CBZ      r0,|L1.74|
;;;49     	{
;;;50     		// Queue was not created and must not be used.
;;;51     		while(1);
;;;52     	}
;;;53     	
;;;54     	
;;;55     	//---------- Task init sequence ----------//
;;;56     	// Tasks suspended on this moment:
;;;57     	//		- vTaskConverter
;;;58     	
;;;59     	// Provide some time for hardware to stay idle
;;;60     	vTaskDelay( 500 / portTICK_RATE_MS);
000012  20fa              MOVS     r0,#0xfa
000014  f7fffffe          BL       vTaskDelay
;;;61     	
;;;62     	// EEPROM status (fake for now)
;;;63     	gui_msg.type = GUI_TASK_EEPROM_STATE;
000018  f04f0a04          MOV      r10,#4
00001c  f8cda004          STR      r10,[sp,#4]
;;;64     	gui_msg.data = 1;	// 1 = OK, 0 = FAIL
000020  2701              MOVS     r7,#1
000022  9702              STR      r7,[sp,#8]
;;;65     	xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000024  4d7d              LDR      r5,|L1.540|
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  a901              ADD      r1,sp,#4
00002c  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00002e  f7fffffe          BL       xQueueGenericSend
;;;66     	
;;;67     	// Init and start converter
;;;68     	ProcessButtons();
000032  f7fffffe          BL       ProcessButtons
;;;69     	if (buttons.raw_state & SW_CHANNEL)
000036  f8df81e8          LDR      r8,|L1.544|
00003a  f8b80000          LDRH     r0,[r8,#0]  ; buttons
00003e  0680              LSLS     r0,r0,#26
000040  d504              BPL      |L1.76|
;;;70     		Converter_Init(CHANNEL_5V);
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       Converter_Init
000048  e003              B        |L1.82|
                  |L1.74|
00004a  e7fe              B        |L1.74|
                  |L1.76|
;;;71     	else
;;;72     		Converter_Init(CHANNEL_12V);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       Converter_Init
                  |L1.82|
;;;73     	//vTaskResume(vTaskConverter);	
;;;74     	taskConverter_Enable = 1;
000052  4874              LDR      r0,|L1.548|
000054  7007              STRB     r7,[r0,#0]
;;;75     	
;;;76     	// Wait a bit more
;;;77     	vTaskDelay( 200 / portTICK_RATE_MS);
000056  2064              MOVS     r0,#0x64
000058  f7fffffe          BL       vTaskDelay
;;;78     	
;;;79     	// Send GUI task message to read all settings and converter setup and update it's widgets.
;;;80     	gui_msg.type = GUI_TASK_RESTORE_ALL;
00005c  2003              MOVS     r0,#3
00005e  9001              STR      r0,[sp,#4]
;;;81     	xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000060  2300              MOVS     r3,#0
000062  461a              MOV      r2,r3
000064  a901              ADD      r1,sp,#4
000066  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000068  f7fffffe          BL       xQueueGenericSend
;;;82     	
;;;83     	// Some tasks stay suspended. Start them.  - TODO
;;;84     	
;;;85     	// Sound notification
;;;86     	sound_msg = SND_CONV_SETTING_OK;
00006c  f44f3080          MOV      r0,#0x10000
000070  9000              STR      r0,[sp,#0]
;;;87     	xQueueSendToBack(xQueueSound, &sound_msg, 0);
000072  486d              LDR      r0,|L1.552|
000074  2300              MOVS     r3,#0
000076  461a              MOV      r2,r3
000078  4669              MOV      r1,sp
00007a  6800              LDR      r0,[r0,#0]  ; xQueueSound
00007c  f7fffffe          BL       xQueueGenericSend
;;;88     	
;;;89     	// Clear message queue from tick messages and start normal operation
;;;90     	xQueueReset(xQueueDispatcher);
000080  2100              MOVS     r1,#0
000082  6820              LDR      r0,[r4,#0]  ; xQueueDispatcher
000084  f7fffffe          BL       xQueueGenericReset
;;;91     	
;;;92     	while(1)
;;;93     	{
;;;94     		xQueueReceive(xQueueDispatcher, &income_msg, portMAX_DELAY);
;;;95     		converter_msg.type = 0;
;;;96     		
;;;97     		switch (income_msg.type)
;;;98     		{
;;;99     			case DISPATCHER_TICK:
;;;100    			
;;;101    				ProcessButtons();	
;;;102    				UpdateEncoderDelta();
;;;103    				
;;;104    				//---------- Converter control -----------//
;;;105    				
;;;106    				// Feedback channel select
;;;107    				if (buttons.action_down & SW_CHANNEL)
;;;108    				{
;;;109    					// Send switch channel to 5V message
;;;110    					converter_msg.type = CONVERTER_SWITCH_TO_5VCH;
;;;111    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000088  4e68              LDR      r6,|L1.556|
00008a  f04f0b00          MOV      r11,#0                ;47
00008e  f04f0902          MOV      r9,#2                 ;97
                  |L1.146|
000092  4861              LDR      r0,|L1.536|
000094  2300              MOVS     r3,#0                 ;94
000096  1e5a              SUBS     r2,r3,#1              ;94
000098  a906              ADD      r1,sp,#0x18           ;94
00009a  6800              LDR      r0,[r0,#0]            ;94  ; xQueueDispatcher
00009c  f7fffffe          BL       xQueueGenericReceive
0000a0  f8cdb00c          STR      r11,[sp,#0xc]         ;95
0000a4  9806              LDR      r0,[sp,#0x18]         ;97
0000a6  2809              CMP      r0,#9                 ;97
0000a8  d27a              BCS      |L1.416|
0000aa  e8dff000          TBB      [pc,r0]               ;97
0000ae  058f              DCB      0x05,0x8f
0000b0  9194999e          DCB      0x91,0x94,0x99,0x9e
0000b4  aa847a00          DCB      0xaa,0x84,0x7a,0x00
0000b8  f7fffffe          BL       ProcessButtons
0000bc  f7fffffe          BL       UpdateEncoderDelta
0000c0  f8b80002          LDRH     r0,[r8,#2]            ;107  ; buttons
0000c4  0680              LSLS     r0,r0,#26             ;107
0000c6  d508              BPL      |L1.218|
0000c8  2003              MOVS     r0,#3                 ;110
0000ca  9003              STR      r0,[sp,#0xc]          ;110
0000cc  2300              MOVS     r3,#0
0000ce  461a              MOV      r2,r3
0000d0  a903              ADD      r1,sp,#0xc
0000d2  6830              LDR      r0,[r6,#0]  ; xQueueConverter
0000d4  f7fffffe          BL       xQueueGenericSend
0000d8  e00b              B        |L1.242|
                  |L1.218|
;;;112    				}
;;;113    				else if (buttons.action_up & SW_CHANNEL)
0000da  f8b80004          LDRH     r0,[r8,#4]  ; buttons
0000de  0680              LSLS     r0,r0,#26
0000e0  d507              BPL      |L1.242|
;;;114    				{
;;;115    					// Send switch channel to 12V message
;;;116    					converter_msg.type = CONVERTER_SWITCH_TO_12VCH;
0000e2  f8cda00c          STR      r10,[sp,#0xc]
;;;117    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
0000e6  2300              MOVS     r3,#0
0000e8  461a              MOV      r2,r3
0000ea  a903              ADD      r1,sp,#0xc
0000ec  6830              LDR      r0,[r6,#0]  ; xQueueConverter
0000ee  f7fffffe          BL       xQueueGenericSend
                  |L1.242|
;;;118    				}
;;;119    				
;;;120    				if ((buttons.action_down & BTN_OFF) || (buttons.action_up & SW_EXTERNAL))
0000f2  f8b80002          LDRH     r0,[r8,#2]  ; buttons
0000f6  0601              LSLS     r1,r0,#24
0000f8  d403              BMI      |L1.258|
0000fa  f8b81004          LDRH     r1,[r8,#4]  ; buttons
0000fe  05c9              LSLS     r1,r1,#23
000100  d508              BPL      |L1.276|
                  |L1.258|
;;;121    				{
;;;122    					// Send OFF mesage to converter task
;;;123    					converter_msg.type = CONVERTER_TURN_OFF;
000102  f8cd900c          STR      r9,[sp,#0xc]
;;;124    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000106  2300              MOVS     r3,#0
000108  461a              MOV      r2,r3
00010a  a903              ADD      r1,sp,#0xc
00010c  6830              LDR      r0,[r6,#0]  ; xQueueConverter
00010e  f7fffffe          BL       xQueueGenericSend
000112  e009              B        |L1.296|
                  |L1.276|
;;;125    				}
;;;126    				else if ((buttons.action_down & BTN_ON) || (buttons.action_down & SW_EXTERNAL))
000114  f4107fa0          TST      r0,#0x140
000118  d006              BEQ      |L1.296|
;;;127    				{
;;;128    					// Send ON mesage to converter task
;;;129    					converter_msg.type = CONVERTER_TURN_ON;
00011a  9703              STR      r7,[sp,#0xc]
;;;130    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00011c  2300              MOVS     r3,#0
00011e  461a              MOV      r2,r3
000120  a903              ADD      r1,sp,#0xc
000122  6830              LDR      r0,[r6,#0]  ; xQueueConverter
000124  f7fffffe          BL       xQueueGenericSend
                  |L1.296|
;;;131    				}
;;;132    				
;;;133    				converter_msg.type  = 0;
000128  f8cdb00c          STR      r11,[sp,#0xc]
;;;134    				
;;;135    				//------------- GUI control --------------//
;;;136    				
;;;137    				// Serialize button events to GUI
;;;138    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
00012c  9701              STR      r7,[sp,#4]
;;;139    				mask = 0x0001;
00012e  2401              MOVS     r4,#1
                  |L1.304|
;;;140    				while(mask)
;;;141    				{
;;;142    					if (buttons.action_down & mask)
000130  f8b80002          LDRH     r0,[r8,#2]  ; buttons
000134  4220              TST      r0,r4
000136  d008              BEQ      |L1.330|
;;;143    					{
;;;144    						gui_msg.data = mask | (BTN_EVENT_DOWN << 16);
000138  f4443080          ORR      r0,r4,#0x10000
00013c  9002              STR      r0,[sp,#8]
;;;145    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
00013e  2300              MOVS     r3,#0
000140  461a              MOV      r2,r3
000142  a901              ADD      r1,sp,#4
000144  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000146  f7fffffe          BL       xQueueGenericSend
                  |L1.330|
;;;146    					}
;;;147    					if (buttons.action_up & mask)
00014a  f8b80004          LDRH     r0,[r8,#4]  ; buttons
00014e  4220              TST      r0,r4
000150  d008              BEQ      |L1.356|
;;;148    					{
;;;149    						gui_msg.data = mask | (BTN_EVENT_UP << 16);
000152  f4443000          ORR      r0,r4,#0x20000
000156  9002              STR      r0,[sp,#8]
;;;150    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000158  2300              MOVS     r3,#0
00015a  461a              MOV      r2,r3
00015c  a901              ADD      r1,sp,#4
00015e  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000160  f7fffffe          BL       xQueueGenericSend
                  |L1.356|
;;;151    					}
;;;152    					if (buttons.action_hold & mask)
000164  f8b80006          LDRH     r0,[r8,#6]  ; buttons
000168  4220              TST      r0,r4
00016a  d008              BEQ      |L1.382|
;;;153    					{
;;;154    						gui_msg.data = mask | (BTN_EVENT_HOLD << 16);
00016c  f44420a0          ORR      r0,r4,#0x50000
000170  9002              STR      r0,[sp,#8]
;;;155    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000172  2300              MOVS     r3,#0
000174  461a              MOV      r2,r3
000176  a901              ADD      r1,sp,#4
000178  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00017a  f7fffffe          BL       xQueueGenericSend
                  |L1.382|
;;;156    					}
;;;157    					mask <<= 1;
00017e  0460              LSLS     r0,r4,#17
000180  0c04              LSRS     r4,r0,#16
000182  2c00              CMP      r4,#0                 ;140
000184  d1d4              BNE      |L1.304|
;;;158    				}
;;;159    				
;;;160    				// Send encoder events to GUI
;;;161    				if (encoder_delta)
000186  482a              LDR      r0,|L1.560|
000188  f9b00000          LDRSH    r0,[r0,#0]  ; encoder_delta
00018c  b140              CBZ      r0,|L1.416|
;;;162    				{
;;;163    					gui_msg.type = GUI_TASK_PROCESS_ENCODER;
00018e  f8cd9004          STR      r9,[sp,#4]
;;;164    					gui_msg.data = (uint32_t)encoder_delta;
000192  9002              STR      r0,[sp,#8]
;;;165    					xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000194  2300              MOVS     r3,#0
000196  461a              MOV      r2,r3
000198  a901              ADD      r1,sp,#4
00019a  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00019c  f7fffffe          BL       xQueueGenericSend
                  |L1.416|
0001a0  e02f              B        |L1.514|
;;;166    				}
;;;167    				
;;;168    				break;
;;;169    				
;;;170    			//----- button and encoder emulation -----//
;;;171    			case DISPATCHER_EMULATE_BUTTON:
;;;172    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
0001a2  9701              STR      r7,[sp,#4]
;;;173    				gui_msg.data = income_msg.data;
0001a4  9807              LDR      r0,[sp,#0x1c]
0001a6  9002              STR      r0,[sp,#8]
;;;174    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0001a8  2300              MOVS     r3,#0
0001aa  461a              MOV      r2,r3
0001ac  a901              ADD      r1,sp,#4
0001ae  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0001b0  f7fffffe          BL       xQueueGenericSend
;;;175    				break;
0001b4  e025              B        |L1.514|
;;;176    			case DP_EMU_ENC_DELTA:
;;;177    				gui_msg.type = GUI_TASK_PROCESS_ENCODER;
0001b6  f8cd9004          STR      r9,[sp,#4]
;;;178    				gui_msg.data = income_msg.data;
0001ba  9807              LDR      r0,[sp,#0x1c]
0001bc  9002              STR      r0,[sp,#8]
;;;179    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0001be  2300              MOVS     r3,#0
0001c0  461a              MOV      r2,r3
0001c2  a901              ADD      r1,sp,#4
0001c4  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0001c6  f7fffffe          BL       xQueueGenericSend
;;;180    				break;
0001ca  e01a              B        |L1.514|
;;;181    			
;;;182    			//----- converter control -----//
;;;183    			case DP_CONVERTER_TURN_ON:
;;;184    				converter_msg.type = CONVERTER_TURN_ON;
0001cc  9703              STR      r7,[sp,#0xc]
;;;185    				break;
0001ce  e018              B        |L1.514|
;;;186    			case DP_CONVERTER_TURN_OFF:
;;;187    				converter_msg.type = CONVERTER_TURN_OFF;
0001d0  f8cd900c          STR      r9,[sp,#0xc]
;;;188    				break;
0001d4  e015              B        |L1.514|
;;;189    			case DP_CONVERTER_SET_VOLTAGE:
;;;190    				converter_msg.type = CONVERTER_SET_VOLTAGE;
0001d6  2007              MOVS     r0,#7
0001d8  9003              STR      r0,[sp,#0xc]
;;;191    				converter_msg.data_a = income_msg.data;
0001da  9807              LDR      r0,[sp,#0x1c]
0001dc  9004              STR      r0,[sp,#0x10]
;;;192    				break;
0001de  e010              B        |L1.514|
;;;193    			case DP_CONVERTER_SET_CURRENT:
;;;194    				converter_msg.type = CONVERTER_SET_CURRENT;
0001e0  2008              MOVS     r0,#8
0001e2  9003              STR      r0,[sp,#0xc]
;;;195    				converter_msg.data_a = income_msg.data;
0001e4  9807              LDR      r0,[sp,#0x1c]
0001e6  9004              STR      r0,[sp,#0x10]
;;;196    				break;
0001e8  e00b              B        |L1.514|
;;;197    			case DP_CONVERTER_SET_CURRENT_LIMIT:
;;;198    				if (income_msg.data == 20)
0001ea  9807              LDR      r0,[sp,#0x1c]
0001ec  2814              CMP      r0,#0x14
0001ee  d003              BEQ      |L1.504|
;;;199    					converter_msg.type = SET_CURRENT_LIMIT_20A;
;;;200    				else if (income_msg.data == 40)
0001f0  9807              LDR      r0,[sp,#0x1c]
0001f2  2828              CMP      r0,#0x28
0001f4  d003              BEQ      |L1.510|
0001f6  e004              B        |L1.514|
                  |L1.504|
0001f8  2005              MOVS     r0,#5                 ;199
0001fa  9003              STR      r0,[sp,#0xc]          ;199
0001fc  e001              B        |L1.514|
                  |L1.510|
;;;201    					converter_msg.type = SET_CURRENT_LIMIT_40A;
0001fe  2006              MOVS     r0,#6
000200  9003              STR      r0,[sp,#0xc]
                  |L1.514|
;;;202    				break;
;;;203    		}
;;;204    		
;;;205    		
;;;206    		if (converter_msg.type)
000202  9803              LDR      r0,[sp,#0xc]
000204  2800              CMP      r0,#0
000206  f43faf44          BEQ      |L1.146|
;;;207    			xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00020a  2300              MOVS     r3,#0
00020c  461a              MOV      r2,r3
00020e  a903              ADD      r1,sp,#0xc
000210  6830              LDR      r0,[r6,#0]  ; xQueueConverter
000212  f7fffffe          BL       xQueueGenericSend
000216  e73c              B        |L1.146|
;;;208    	}
;;;209    	
;;;210    }
;;;211    
                          ENDP

                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
                          DCD      xQueueGUI
                  |L1.544|
                          DCD      buttons
                  |L1.548|
                          DCD      taskConverter_Enable
                  |L1.552|
                          DCD      xQueueSound
                  |L1.556|
                          DCD      xQueueConverter
                  |L1.560|
                          DCD      encoder_delta

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  dispatcher_tick_msg
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueDispatcher
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\dispatcher.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_dispatcher_c_16ca7314____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REVSH|
#line 130
|__asm___12_dispatcher_c_16ca7314____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
