<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RAM\MDR_200W.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RAM\MDR_200W.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Wed Oct 30 21:45:42 2013
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ProcessTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1a]">BACKUP_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[a]">CAN1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[b]">CAN2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[18]">COMPARATOR_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1b]">EXT_INT1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1c]">EXT_INT2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1d]">EXT_INT3_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1e]">EXT_INT4_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[11]">I2C_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[12]">POWER_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[10]">SSP1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[19]">SSP2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from systick.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_mdr32f9qx.o(.text) referenced from startup_mdr32f9x.o(.text)
 <LI><a href="#[14]">Timer1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[15]">Timer2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[16]">Timer3_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[e]">UART1_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[f]">UART2_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[c]">USB_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_mdr32f9x.o(.text) referenced from startup_mdr32f9x.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mdr32f9x.o(.text)
 <LI><a href="#[22]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[1f]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[23]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>Timer1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Timer2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Timer3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, system_mdr32f9qx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, system_mdr32f9qx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[2a]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[27]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_USB_PLLstatus
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSIstatus
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEstatus
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
</UL>

<P><STRONG><a name="[26]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[29]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
</UL>

<P><STRONG><a name="[28]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[2b]"></a>RST_CLK_DeInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>

<P><STRONG><a name="[64]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[2d]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[cb]"></a>RST_CLK_LSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>RST_CLK_LSEstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[cc]"></a>RST_CLK_HSIadjust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>RST_CLK_LSIcmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>RST_CLK_LSIadjust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>RST_CLK_LSIstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[65]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[68]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[66]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[30]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[67]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
</UL>

<P><STRONG><a name="[cf]"></a>RST_CLK_USB_PLLconfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>RST_CLK_USB_PLLuse</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>RST_CLK_USB_PLLcmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>RST_CLK_USB_PLLstatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[d2]"></a>RST_CLK_USBclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>RST_CLK_USBclkEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>RST_CLK_ADCclkSelection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>RST_CLK_ADCclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>RST_CLK_ADCclkEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>RST_CLK_HSIclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>RST_CLK_RTC_HSIclkEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>RST_CLK_HSEclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>RST_CLK_RTC_HSEclkEnable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 644 bytes, Stack size 44 bytes, mdr32f9qx_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>SSP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>SSP_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPInit
</UL>

<P><STRONG><a name="[6d]"></a>SSP_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPInit
</UL>

<P><STRONG><a name="[70]"></a>SSP_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPInit
</UL>

<P><STRONG><a name="[dd]"></a>SSP_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>SSP_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>SSP_GetITStatusMasked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>SSP_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>SSP_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>SSP_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>

<P><STRONG><a name="[e2]"></a>SSP_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>SSP_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[6e]"></a>SSP_BRGInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mdr32f9qx_ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPInit
</UL>

<P><STRONG><a name="[69]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
</UL>

<P><STRONG><a name="[6c]"></a>PORT_Init</STRONG> (Thumb, 446 bytes, Stack size 48 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
</UL>

<P><STRONG><a name="[6b]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
</UL>

<P><STRONG><a name="[e3]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>PORT_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>PORT_SetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[9f]"></a>PORT_ResetBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[e5]"></a>PORT_WriteBit</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>PORT_Write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_port.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>TIMER_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>TIMER_CntInit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[7b]"></a>TIMER_CntStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[82]"></a>TIMER_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[e8]"></a>TIMER_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>TIMER_SetCntPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>TIMER_SetCntAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>TIMER_CntAutoreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>TIMER_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>TIMER_CntEventSourceConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>TIMER_FilterSamplingConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>TIMER_CounterModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>TIMER_SetCounterDirection</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>TIMER_ETRInputConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>TIMER_ETRFilterConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>TIMER_ETRPrescalerConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>TIMER_ETRPolarityConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>TIMER_BRKPolarityConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>TIMER_GetCounterDirection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>TIMER_GetCntWriteComplete</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>TIMER_ChnInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_ChnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[7d]"></a>TIMER_ChnStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[f8]"></a>TIMER_SetChnCompare</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>TIMER_SetChnCompare1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>TIMER_ChnCompareConfig</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>TIMER_ChnCompare1Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>TIMER_GetChnCapture</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>TIMER_GetChnCapture1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>TIMER_ChnETR_Cmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>TIMER_ChnETRResetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>TIMER_ChnBRKResetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>TIMER_ChnREFFormatConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>TIMER_ChnCapturePrescalerConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>TIMER_ChnEventSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>TIMER_ChnFilterConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>TIMER_GetChnWriteComplete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>TIMER_ChnCCR1_EventSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>TIMER_ChnCCR1_Cmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>TIMER_ChnOutInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_ChnOutInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[7f]"></a>TIMER_ChnOutStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[108]"></a>TIMER_ChnOutConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>TIMER_ChnOutSourceConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>TIMER_ChnOutModeConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>TIMER_ChnOutPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>TIMER_ChnNOutConfig</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>TIMER_ChnNOutSourceConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>TIMER_ChnNOutModeConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>TIMER_ChnNOutPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>TIMER_ChnOutDTGConfig</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>TIMER_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>TIMER_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>TIMER_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>TIMER_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>TIMER_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>TIMER_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>TIMER_BRGInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, mdr32f9qx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[117]"></a>I2C_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>I2C_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mdr32f9qx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[118]"></a>I2C_StructInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>I2C_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[119]"></a>I2C_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>I2C_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[a5]"></a>I2C_SendByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[a8]"></a>I2C_SendSTOP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[a6]"></a>I2C_StartReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[a7]"></a>I2C_GetReceivedData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[33]"></a>I2C_GetLastEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>

<P><STRONG><a name="[32]"></a>I2C_CheckEvent</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>

<P><STRONG><a name="[34]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, mdr32f9qx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReady
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMWriteBlock
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[73]"></a>ADC_DeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[75]"></a>ADC_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[74]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[11c]"></a>ADC_SetTrim</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>ADC1_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[78]"></a>ADC2_Init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[76]"></a>ADCx_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[79]"></a>ADC1_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[7a]"></a>ADC2_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[b1]"></a>ADC1_SetChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[90]"></a>ADC2_SetChannel</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
</UL>

<P><STRONG><a name="[11d]"></a>ADC1_SetChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>ADC2_SetChannels</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>ADC1_OperationModeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>ADC2_OperationModeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>ADC1_SamplingModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>ADC2_SamplingModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>ADC1_ChannelSwithingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>ADC2_ChannelSwithingConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>ADC1_LevelsConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>ADC2_LevelsConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>ADC1_SetLowLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>ADC2_SetLowLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>ADC1_SetHighLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>ADC2_SetHighLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>ADC1_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[91]"></a>ADC2_Start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
</UL>

<P><STRONG><a name="[b2]"></a>ADC1_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
</UL>

<P><STRONG><a name="[92]"></a>ADC2_GetResult</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
</UL>

<P><STRONG><a name="[36]"></a>ADC_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetITStatus
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
</UL>

<P><STRONG><a name="[12b]"></a>ADC1_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>ADC2_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[12d]"></a>ADC1_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>ADC2_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>ADC1_ClearOverwriteFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>ADC2_ClearOverwriteFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>ADC1_ClearOutOfRangeFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>ADC2_ClearOutOfRangeFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>ADC_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>ADC1_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>ADC2_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>ADC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetStatus
</UL>

<P><STRONG><a name="[136]"></a>ADC1_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>ADC2_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>EEPROM_test</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROMReadBlock
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 1114 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; ProcessTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitBeep
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickStart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBeep
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CPU_Clock
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBuzzerFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSPInit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCooler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSetBacklight
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutVertLine
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutSpecialStr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutNormalStr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutHorLine
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdFillBuffer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtons
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderDelta
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTCounterInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetFeedbackChannel
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrentLimit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrent
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_ProcessADC
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[3b]"></a>Setup_CPU_Clock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Setup_CPU_Clock &rArr; RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>PortInit</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PortInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>SSPInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SSPInit &rArr; SSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_BRGInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_StructInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>I2CInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2CInit &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>ADCInit</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADCInit &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>TimersInit</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimersInit &rArr; TIMER_ChnOutInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutStructInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnStructInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>SetVoltagePWMPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_regulation
</UL>

<P><STRONG><a name="[8a]"></a>SetCurrentPWMPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_regulation
</UL>

<P><STRONG><a name="[47]"></a>SetBuzzerFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SetCoolerSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessCooler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>LcdSetBacklight</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systemfunc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>ProcessPowerOff</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ProcessPowerOff &rArr; LcdPutNormalStr &rArr; LcdPutImage
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickStop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopBeep
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetACLineStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTStartDelayUs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTDelayUs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTDelayInProgress
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentPWMPeriod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltagePWMPeriod
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSetBacklight
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutNormalStr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdFillBuffer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4f]"></a>ProcessTemperature</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ProcessTemperature &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTDelayUs
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_GetResult
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>ProcessCooler</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, systemfunc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ProcessCooler
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCoolerSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>StopBeep</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; ProcessPowerOff &rArr; LcdPutNormalStr &rArr; LcdPutImage
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessEncoder
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HW_ADCProcess
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopBeep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SysTickStart</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SysTickStop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[4a]"></a>SysTickDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>StartBeep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>Beep</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, systick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBeep
</UL>

<P><STRONG><a name="[4b]"></a>WaitBeep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>LcdWrite</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSingleInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
</UL>

<P><STRONG><a name="[9d]"></a>LcdDelayUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[9e]"></a>LcdSelect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LcdSelect &rArr; LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdUpdateByCore
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[a0]"></a>LcdSingleInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdSingleInit &rArr; LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
</UL>

<P><STRONG><a name="[43]"></a>LcdInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdInit &rArr; LcdSingleInit &rArr; LcdWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSingleInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>LcdUpdateByCore</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lcd_1202.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdUpdateByCore &rArr; LcdSelect &rArr; LcdDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelect
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>InitButtons</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InitButtons
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetButtonEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>ProcessButtons</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProcessButtons &rArr; UpdateRawButtonState
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetButtonEvents
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>UpdateLEDs</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateLEDs
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[96]"></a>ProcessEncoder</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4d]"></a>GetEncoderDelta</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, encoder.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>EEPROMReadBlock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetReceivedData
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StartReceiveData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_test
</UL>

<P><STRONG><a name="[a9]"></a>EEPROMWriteBlock</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>

<P><STRONG><a name="[aa]"></a>EEPROMReady</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendSTOP
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
</UL>

<P><STRONG><a name="[3d]"></a>DWTCounterInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>DWTStartDelayUs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[8b]"></a>DWTDelayInProgress</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRawButtonState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[8f]"></a>DWTDelayUs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwt_delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdDelayUs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
</UL>

<P><STRONG><a name="[b0]"></a>GetOverloadStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
</UL>

<P><STRONG><a name="[84]"></a>GetACLineStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[85]"></a>SetConverterState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetConverterState
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_HWProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
</UL>

<P><STRONG><a name="[8c]"></a>SetFeedbackChannel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetFeedbackChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[8d]"></a>SetCurrentLimit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetCurrentLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[8e]"></a>SetOutputLoad</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetOutputLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[ab]"></a>LcdPutPixel</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LcdPutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutVertLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutHorLine
</UL>

<P><STRONG><a name="[5d]"></a>LcdPutHorLine</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdPutHorLine &rArr; LcdPutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>LcdPutVertLine</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LcdPutVertLine &rArr; LcdPutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>LcdFillBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>LcdPutImage</STRONG> (Thumb, 310 bytes, Stack size 60 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LcdPutImage
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutSpecialStr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutNormalStr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>GetFontItem</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutSpecialStr
</UL>

<P><STRONG><a name="[5b]"></a>LcdPutSpecialStr</STRONG> (Thumb, 88 bytes, Stack size 44 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LcdPutSpecialStr &rArr; LcdPutImage
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFontItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>LcdPutNormalStr</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, lcd_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LcdPutNormalStr &rArr; LcdPutImage
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPowerOff
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>Converter_SetSoftLimit</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, converter.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>Converter_ProcessADC</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Converter_SetVoltage</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Converter_SetVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>Converter_SetCurrent</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Converter_SetCurrent &rArr; CheckSetCurrentRange
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetCurrentRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>Converter_SetFeedbackChannel</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>Converter_SetCurrentLimit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Converter_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>Converter_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>Converter_StartCharge</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, converter.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>Converter_Init</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>Converter_Process</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Converter_Process &rArr; CheckSetCurrentRange
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateLEDs
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOutputLoad
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFeedbackChannel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_regulation
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetCurrentRange
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Converter_HWProcess</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Converter_HWProcess &rArr; SetConverterState
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOverloadStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetConverterState
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[97]"></a>Converter_HW_ADCProcess</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Converter_HW_ADCProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_dadd</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_dmul</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_f2d</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessTemperature
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[13d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[13e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[bb]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[b8]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[b7]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[141]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[142]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[5a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[144]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[145]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[146]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a1]"></a>UpdateRawButtonState</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UpdateRawButtonState
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTStartDelayUs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DWTDelayInProgress
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
</UL>

<P><STRONG><a name="[a2]"></a>ResetButtonEvents</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, buttons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessButtons
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitButtons
</UL>

<P><STRONG><a name="[ae]"></a>CheckSetVoltageRange</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, converter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetVoltage
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[af]"></a>CheckSetCurrentRange</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckSetCurrentRange
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_SetCurrent
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[ad]"></a>apply_regulation</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, converter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apply_regulation
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentPWMPeriod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVoltagePWMPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Converter_Process
</UL>

<P><STRONG><a name="[c3]"></a>_fp_digits</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c2]"></a>_printf_core</STRONG> (Thumb, 1782 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[c6]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c5]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[22]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
