; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\dispatcher.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\dispatcher.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\dispatcher.crf src\dispatcher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskDispatcher PROC
;;;37     
;;;38     void vTaskDispatcher(void *pvParameters) 
000000  b086              SUB      sp,sp,#0x18
;;;39     {
;;;40     	dispatch_incoming_msg_t income_msg;
;;;41     	int16_t encoder_delta;
;;;42     	conveter_message_t converter_msg;
;;;43     	uint32_t gui_msg;
;;;44     	
;;;45     	uint16_t button_emulation = 0;
000002  2400              MOVS     r4,#0
;;;46     	int16_t encoder_emulation = 0;
000004  2500              MOVS     r5,#0
;;;47     	
;;;48     	// Initialize
;;;49     	xQueueDispatcher = xQueueCreate( 10, sizeof( dispatch_incoming_msg_t ) );		// Queue can contain 5 elements of type uint32_t
000006  2200              MOVS     r2,#0
000008  2108              MOVS     r1,#8
00000a  200a              MOVS     r0,#0xa
00000c  f7fffffe          BL       xQueueGenericCreate
000010  4947              LDR      r1,|L1.304|
000012  6008              STR      r0,[r1,#0]  ; xQueueDispatcher
;;;50     	if( xQueueDispatcher == 0 )
000014  4608              MOV      r0,r1
000016  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
000018  b908              CBNZ     r0,|L1.30|
;;;51     	{
;;;52     		// Queue was not created and must not be used.
;;;53     		while(1);
00001a  bf00              NOP      
                  |L1.28|
00001c  e7fe              B        |L1.28|
                  |L1.30|
;;;54     	}
;;;55     	
;;;56     	
;;;57     	
;;;58     	while(1)
00001e  e086              B        |L1.302|
                  |L1.32|
;;;59     	{
;;;60     		xQueueReceive(xQueueDispatcher, &income_msg, portMAX_DELAY);
000020  2300              MOVS     r3,#0
000022  1e5a              SUBS     r2,r3,#1
000024  a904              ADD      r1,sp,#0x10
000026  4842              LDR      r0,|L1.304|
000028  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
00002a  f7fffffe          BL       xQueueGenericReceive
;;;61     		converter_msg.type = 0;
00002e  2000              MOVS     r0,#0
000030  9001              STR      r0,[sp,#4]
;;;62     		
;;;63     		switch (income_msg.type)
000032  f2402211          MOV      r2,#0x211
000036  9804              LDR      r0,[sp,#0x10]
000038  1a81              SUBS     r1,r0,r2
00003a  4290              CMP      r0,r2
00003c  d05c              BEQ      |L1.248|
00003e  dc0a              BGT      |L1.86|
000040  b190              CBZ      r0,|L1.104|
000042  f5b07f00          CMP      r0,#0x200
000046  d04c              BEQ      |L1.226|
000048  f5a07000          SUB      r0,r0,#0x200
00004c  3801              SUBS     r0,#1
00004e  d04b              BEQ      |L1.232|
000050  280f              CMP      r0,#0xf
000052  d162              BNE      |L1.282|
000054  e04b              B        |L1.238|
                  |L1.86|
000056  2901              CMP      r1,#1
000058  d053              BEQ      |L1.258|
00005a  f5a17180          SUB      r1,r1,#0x100
00005e  39ef              SUBS     r1,r1,#0xef
000060  d037              BEQ      |L1.210|
000062  2910              CMP      r1,#0x10
000064  d159              BNE      |L1.282|
000066  e038              B        |L1.218|
                  |L1.104|
;;;64     		{
;;;65     			case DISPATCHER_TICK:
;;;66     				ProcessButtons();
000068  f7fffffe          BL       ProcessButtons
;;;67     				//encoder_delta = GetEncoderDelta();	
;;;68     				UpdateEncoderDelta();
00006c  f7fffffe          BL       UpdateEncoderDelta
;;;69     				
;;;70     				// Apply emulation
;;;71     				buttons.action_down |= button_emulation;
000070  4830              LDR      r0,|L1.308|
000072  8840              LDRH     r0,[r0,#2]  ; buttons
000074  4320              ORRS     r0,r0,r4
000076  492f              LDR      r1,|L1.308|
000078  8048              STRH     r0,[r1,#2]
;;;72     				encoder_delta += encoder_emulation;
00007a  bf00              NOP      
;;;73     				button_emulation = 0;
00007c  2400              MOVS     r4,#0
;;;74     				encoder_emulation = 0;
00007e  2500              MOVS     r5,#0
;;;75     			
;;;76     				
;;;77     			
;;;78     				// Feedback channel select
;;;79     				if (buttons.action_down & SW_CHANNEL)
000080  4608              MOV      r0,r1
000082  8840              LDRH     r0,[r0,#2]  ; buttons
000084  f0100f20          TST      r0,#0x20
000088  d002              BEQ      |L1.144|
;;;80     				{
;;;81     					// Send switch channel to 5V message
;;;82     					converter_msg.type = CONVERTER_SWITCH_TO_5VCH;
00008a  2003              MOVS     r0,#3
00008c  9001              STR      r0,[sp,#4]
00008e  e016              B        |L1.190|
                  |L1.144|
;;;83     				}
;;;84     				else if (buttons.action_up & SW_CHANNEL)
000090  4828              LDR      r0,|L1.308|
000092  8880              LDRH     r0,[r0,#4]  ; buttons
000094  f0100f20          TST      r0,#0x20
000098  d002              BEQ      |L1.160|
;;;85     				{
;;;86     					// Send switch channel to 12V message
;;;87     					converter_msg.type = CONVERTER_SWITCH_TO_12VCH;
00009a  2004              MOVS     r0,#4
00009c  9001              STR      r0,[sp,#4]
00009e  e00e              B        |L1.190|
                  |L1.160|
;;;88     				}
;;;89     				else if (buttons.action_down & BTN_OFF)
0000a0  4824              LDR      r0,|L1.308|
0000a2  8840              LDRH     r0,[r0,#2]  ; buttons
0000a4  f0100f80          TST      r0,#0x80
0000a8  d002              BEQ      |L1.176|
;;;90     				{
;;;91     					// Send OFF mesage to converter task
;;;92     					converter_msg.type = CONVERTER_TURN_OFF;
0000aa  2002              MOVS     r0,#2
0000ac  9001              STR      r0,[sp,#4]
0000ae  e006              B        |L1.190|
                  |L1.176|
;;;93     				}
;;;94     				else if (buttons.action_down & BTN_ON)
0000b0  4820              LDR      r0,|L1.308|
0000b2  8840              LDRH     r0,[r0,#2]  ; buttons
0000b4  f0100f40          TST      r0,#0x40
0000b8  d001              BEQ      |L1.190|
;;;95     				{
;;;96     					// Send ON mesage to converter task
;;;97     					converter_msg.type = CONVERTER_TURN_ON;
0000ba  2001              MOVS     r0,#1
0000bc  9001              STR      r0,[sp,#4]
                  |L1.190|
;;;98     				}
;;;99     			
;;;100    				
;;;101    					
;;;102    				//---------------------------//	
;;;103    				//---------------------------//
;;;104    
;;;105    				// Make GUI process buttons and encoder
;;;106    				gui_msg = GUI_PROCESS_BUTTONS;
0000be  2001              MOVS     r0,#1
0000c0  9000              STR      r0,[sp,#0]
;;;107    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0000c2  2300              MOVS     r3,#0
0000c4  461a              MOV      r2,r3
0000c6  4669              MOV      r1,sp
0000c8  481b              LDR      r0,|L1.312|
0000ca  6800              LDR      r0,[r0,#0]  ; xQueueGUI
0000cc  f7fffffe          BL       xQueueGenericSend
;;;108    			
;;;109    				break;
0000d0  e023              B        |L1.282|
                  |L1.210|
;;;110    				
;;;111    			//----- button and encoder emulation -----//
;;;112    			case DP_EMU_BTN_DOWN:
;;;113    				button_emulation |= income_msg.data;
0000d2  9805              LDR      r0,[sp,#0x14]
0000d4  4320              ORRS     r0,r0,r4
0000d6  b284              UXTH     r4,r0
;;;114    				break;
0000d8  e01f              B        |L1.282|
                  |L1.218|
;;;115    			case DP_EMU_ENC_DELTA:
;;;116    				encoder_emulation += (int16_t)income_msg.data;
0000da  9805              LDR      r0,[sp,#0x14]
0000dc  4428              ADD      r0,r0,r5
0000de  b205              SXTH     r5,r0
;;;117    				break;
0000e0  e01b              B        |L1.282|
                  |L1.226|
;;;118    			
;;;119    				
;;;120    			//----- converter control -----//
;;;121    			case DP_CONVERTER_TURN_ON:
;;;122    				converter_msg.type = CONVERTER_TURN_ON;
0000e2  2001              MOVS     r0,#1
0000e4  9001              STR      r0,[sp,#4]
;;;123    				break;
0000e6  e018              B        |L1.282|
                  |L1.232|
;;;124    			case DP_CONVERTER_TURN_OFF:
;;;125    				converter_msg.type = CONVERTER_TURN_OFF;
0000e8  2002              MOVS     r0,#2
0000ea  9001              STR      r0,[sp,#4]
;;;126    				break;
0000ec  e015              B        |L1.282|
                  |L1.238|
;;;127    			case DP_CONVERTER_SET_VOLTAGE:
;;;128    				converter_msg.type = CONVERTER_SET_VOLTAGE;
0000ee  2007              MOVS     r0,#7
0000f0  9001              STR      r0,[sp,#4]
;;;129    				converter_msg.data_a = income_msg.data;
0000f2  9805              LDR      r0,[sp,#0x14]
0000f4  9002              STR      r0,[sp,#8]
;;;130    				break;
0000f6  e010              B        |L1.282|
                  |L1.248|
;;;131    			case DP_CONVERTER_SET_CURRENT:
;;;132    				converter_msg.type = CONVERTER_SET_CURRENT;
0000f8  2008              MOVS     r0,#8
0000fa  9001              STR      r0,[sp,#4]
;;;133    				converter_msg.data_a = income_msg.data;
0000fc  9805              LDR      r0,[sp,#0x14]
0000fe  9002              STR      r0,[sp,#8]
;;;134    				break;
000100  e00b              B        |L1.282|
                  |L1.258|
;;;135    			case DP_CONVERTER_SET_CURRENT_LIMIT:
;;;136    				if (income_msg.data == 20)
000102  9805              LDR      r0,[sp,#0x14]
000104  2814              CMP      r0,#0x14
000106  d102              BNE      |L1.270|
;;;137    					converter_msg.type = SET_CURRENT_LIMIT_20A;
000108  2005              MOVS     r0,#5
00010a  9001              STR      r0,[sp,#4]
00010c  e004              B        |L1.280|
                  |L1.270|
;;;138    				else if (income_msg.data == 40)
00010e  9805              LDR      r0,[sp,#0x14]
000110  2828              CMP      r0,#0x28
000112  d101              BNE      |L1.280|
;;;139    					converter_msg.type = SET_CURRENT_LIMIT_40A;
000114  2006              MOVS     r0,#6
000116  9001              STR      r0,[sp,#4]
                  |L1.280|
;;;140    				break;
000118  bf00              NOP      
                  |L1.282|
00011a  bf00              NOP                            ;109
;;;141    		}
;;;142    		
;;;143    		
;;;144    		if (converter_msg.type)
00011c  9801              LDR      r0,[sp,#4]
00011e  b130              CBZ      r0,|L1.302|
;;;145    			xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000120  2300              MOVS     r3,#0
000122  461a              MOV      r2,r3
000124  a901              ADD      r1,sp,#4
000126  4805              LDR      r0,|L1.316|
000128  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00012a  f7fffffe          BL       xQueueGenericSend
                  |L1.302|
00012e  e777              B        |L1.32|
;;;146    	}
;;;147    	
;;;148    }
;;;149    
                          ENDP

                  |L1.304|
                          DCD      xQueueDispatcher
                  |L1.308|
                          DCD      buttons
                  |L1.312|
                          DCD      xQueueGUI
                  |L1.316|
                          DCD      xQueueConverter

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  dispatcher_tick_msg
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueDispatcher
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\dispatcher.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_dispatcher_c_16ca7314____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REVSH|
#line 130
|__asm___12_dispatcher_c_16ca7314____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
