; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\dispatcher.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\dispatcher.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\dispatcher.crf src\dispatcher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskDispatcher PROC
;;;37     
;;;38     void vTaskDispatcher(void *pvParameters) 
000000  b088              SUB      sp,sp,#0x20
;;;39     {
;;;40     	dispatch_incoming_msg_t income_msg;
;;;41     	conveter_message_t converter_msg;
;;;42     	gui_incoming_msg_t gui_msg;
;;;43     	uint16_t mask;
;;;44     	uint32_t sound_msg;
;;;45     	
;;;46     	// Initialize
;;;47     	xQueueDispatcher = xQueueCreate( 10, sizeof( dispatch_incoming_msg_t ) );		// Queue can contain 5 elements of type uint32_t
000002  2200              MOVS     r2,#0
000004  2108              MOVS     r1,#8
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4c82              LDR      r4,|L1.536|
00000e  6020              STR      r0,[r4,#0]  ; xQueueDispatcher
;;;48     	if( xQueueDispatcher == 0 )
000010  b1c8              CBZ      r0,|L1.70|
;;;49     	{
;;;50     		// Queue was not created and must not be used.
;;;51     		while(1);
;;;52     	}
;;;53     	
;;;54     	
;;;55     	//---------- Task init sequence ----------//
;;;56     	// Tasks suspended on this moment:
;;;57     	//		- vTaskConverter
;;;58     	
;;;59     	// Provide some time for hardware to stay idle
;;;60     	vTaskDelay( 500 / portTICK_RATE_MS);
000012  20fa              MOVS     r0,#0xfa
000014  f7fffffe          BL       vTaskDelay
;;;61     	
;;;62     	// EEPROM status (fake for now)
;;;63     	gui_msg.type = GUI_TASK_EEPROM_STATE;
000018  2004              MOVS     r0,#4
00001a  9001              STR      r0,[sp,#4]
;;;64     	gui_msg.data = 1;	// 1 = OK, 0 = FAIL
00001c  f04f0901          MOV      r9,#1
000020  f8cd9008          STR      r9,[sp,#8]
;;;65     	xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000024  4d7d              LDR      r5,|L1.540|
000026  2300              MOVS     r3,#0
000028  461a              MOV      r2,r3
00002a  a901              ADD      r1,sp,#4
00002c  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00002e  f7fffffe          BL       xQueueGenericSend
;;;66     	
;;;67     	// Init and start converter
;;;68     	ProcessButtons();
000032  f7fffffe          BL       ProcessButtons
;;;69     	if (buttons.raw_state & SW_CHANNEL)
000036  4f7a              LDR      r7,|L1.544|
000038  8838              LDRH     r0,[r7,#0]  ; buttons
00003a  0680              LSLS     r0,r0,#26
00003c  d504              BPL      |L1.72|
;;;70     		Converter_Init(CHANNEL_5V);
00003e  2001              MOVS     r0,#1
000040  f7fffffe          BL       Converter_Init
000044  e003              B        |L1.78|
                  |L1.70|
000046  e7fe              B        |L1.70|
                  |L1.72|
;;;71     	else
;;;72     		Converter_Init(CHANNEL_12V);
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       Converter_Init
                  |L1.78|
;;;73     	//vTaskResume(vTaskConverter);	
;;;74     	taskConverter_Enable = 1;
00004e  4875              LDR      r0,|L1.548|
000050  f8809000          STRB     r9,[r0,#0]
;;;75     	
;;;76     	// Wait a bit more
;;;77     	vTaskDelay( 200 / portTICK_RATE_MS);
000054  2064              MOVS     r0,#0x64
000056  f7fffffe          BL       vTaskDelay
;;;78     	
;;;79     	// Send GUI task message to read all settings and converter setup and update it's widgets.
;;;80     	gui_msg.type = GUI_TASK_RESTORE_ALL;
00005a  f04f0a03          MOV      r10,#3
00005e  f8cda004          STR      r10,[sp,#4]
;;;81     	xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000062  2300              MOVS     r3,#0
000064  461a              MOV      r2,r3
000066  a901              ADD      r1,sp,#4
000068  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00006a  f7fffffe          BL       xQueueGenericSend
;;;82     	
;;;83     	// Some tasks stay suspended. Start them.  - TODO
;;;84     	
;;;85     	// Sound notification
;;;86     	sound_msg = SND_CONV_SETTING_OK;
00006e  f44f3080          MOV      r0,#0x10000
000072  9000              STR      r0,[sp,#0]
;;;87     	xQueueSendToBack(xQueueSound, &sound_msg, 0);
000074  486c              LDR      r0,|L1.552|
000076  2300              MOVS     r3,#0
000078  461a              MOV      r2,r3
00007a  4669              MOV      r1,sp
00007c  6800              LDR      r0,[r0,#0]  ; xQueueSound
00007e  f7fffffe          BL       xQueueGenericSend
;;;88     	
;;;89     	// Clear message queue from tick messages and start normal operation
;;;90     	xQueueReset(xQueueDispatcher);
000082  2100              MOVS     r1,#0
000084  6820              LDR      r0,[r4,#0]  ; xQueueDispatcher
000086  f7fffffe          BL       xQueueGenericReset
;;;91     	
;;;92     	while(1)
;;;93     	{
;;;94     		xQueueReceive(xQueueDispatcher, &income_msg, portMAX_DELAY);
;;;95     		converter_msg.type = 0;
;;;96     		
;;;97     		switch (income_msg.type)
;;;98     		{
;;;99     			case DISPATCHER_TICK:
;;;100    			
;;;101    				ProcessButtons();	
;;;102    				UpdateEncoderDelta();
;;;103    				
;;;104    				//---------- Converter control -----------//
;;;105    				
;;;106    				// Feedback channel select
;;;107    				if (buttons.action_down & SW_CHANNEL)
;;;108    				{
;;;109    					// Send switch channel to 5V message
;;;110    					converter_msg.type = CONVERTER_SWITCH_TO_5VCH;
;;;111    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00008a  4e68              LDR      r6,|L1.556|
00008c  f04f0802          MOV      r8,#2                 ;97
000090  f04f0b00          MOV      r11,#0                ;47
                  |L1.148|
000094  4860              LDR      r0,|L1.536|
000096  2300              MOVS     r3,#0                 ;94
000098  1e5a              SUBS     r2,r3,#1              ;94
00009a  a906              ADD      r1,sp,#0x18           ;94
00009c  6800              LDR      r0,[r0,#0]            ;94  ; xQueueDispatcher
00009e  f7fffffe          BL       xQueueGenericReceive
0000a2  f8cdb00c          STR      r11,[sp,#0xc]         ;95
0000a6  9806              LDR      r0,[sp,#0x18]         ;97
0000a8  2809              CMP      r0,#9                 ;97
0000aa  d275              BCS      |L1.408|
0000ac  e8dff000          TBB      [pc,r0]               ;97
0000b0  058b8e91          DCB      0x05,0x8b,0x8e,0x91
0000b4  969ba980          DCB      0x96,0x9b,0xa9,0x80
0000b8  7500              DCB      0x75,0x00
0000ba  f7fffffe          BL       ProcessButtons
0000be  f7fffffe          BL       UpdateEncoderDelta
0000c2  8878              LDRH     r0,[r7,#2]            ;107  ; buttons
0000c4  0680              LSLS     r0,r0,#26             ;107
0000c6  d508              BPL      |L1.218|
0000c8  2004              MOVS     r0,#4                 ;110
0000ca  9003              STR      r0,[sp,#0xc]          ;110
0000cc  2300              MOVS     r3,#0
0000ce  461a              MOV      r2,r3
0000d0  a903              ADD      r1,sp,#0xc
0000d2  6830              LDR      r0,[r6,#0]  ; xQueueConverter
0000d4  f7fffffe          BL       xQueueGenericSend
0000d8  e00a              B        |L1.240|
                  |L1.218|
;;;112    				}
;;;113    				else if (buttons.action_up & SW_CHANNEL)
0000da  88b8              LDRH     r0,[r7,#4]  ; buttons
0000dc  0680              LSLS     r0,r0,#26
0000de  d507              BPL      |L1.240|
;;;114    				{
;;;115    					// Send switch channel to 12V message
;;;116    					converter_msg.type = CONVERTER_SWITCH_TO_12VCH;
0000e0  2005              MOVS     r0,#5
0000e2  9003              STR      r0,[sp,#0xc]
;;;117    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
0000e4  2300              MOVS     r3,#0
0000e6  461a              MOV      r2,r3
0000e8  a903              ADD      r1,sp,#0xc
0000ea  6830              LDR      r0,[r6,#0]  ; xQueueConverter
0000ec  f7fffffe          BL       xQueueGenericSend
                  |L1.240|
;;;118    				}
;;;119    				
;;;120    				if ((buttons.action_down & BTN_OFF) || (buttons.action_up & SW_EXTERNAL))
0000f0  8878              LDRH     r0,[r7,#2]  ; buttons
0000f2  0601              LSLS     r1,r0,#24
0000f4  d402              BMI      |L1.252|
0000f6  88b9              LDRH     r1,[r7,#4]  ; buttons
0000f8  05c9              LSLS     r1,r1,#23
0000fa  d508              BPL      |L1.270|
                  |L1.252|
;;;121    				{
;;;122    					// Send OFF mesage to converter task
;;;123    					converter_msg.type = CONVERTER_TURN_OFF;
0000fc  f8cda00c          STR      r10,[sp,#0xc]
;;;124    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000100  2300              MOVS     r3,#0
000102  461a              MOV      r2,r3
000104  a903              ADD      r1,sp,#0xc
000106  6830              LDR      r0,[r6,#0]  ; xQueueConverter
000108  f7fffffe          BL       xQueueGenericSend
00010c  e00a              B        |L1.292|
                  |L1.270|
;;;125    				}
;;;126    				else if ((buttons.action_down & BTN_ON) || (buttons.action_down & SW_EXTERNAL))
00010e  f4107fa0          TST      r0,#0x140
000112  d007              BEQ      |L1.292|
;;;127    				{
;;;128    					// Send ON mesage to converter task
;;;129    					converter_msg.type = CONVERTER_TURN_ON;
000114  f8cd800c          STR      r8,[sp,#0xc]
;;;130    					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000118  2300              MOVS     r3,#0
00011a  461a              MOV      r2,r3
00011c  a903              ADD      r1,sp,#0xc
00011e  6830              LDR      r0,[r6,#0]  ; xQueueConverter
000120  f7fffffe          BL       xQueueGenericSend
                  |L1.292|
;;;131    				}
;;;132    				
;;;133    				converter_msg.type  = 0;
000124  f8cdb00c          STR      r11,[sp,#0xc]
;;;134    				
;;;135    				//------------- GUI control --------------//
;;;136    				
;;;137    				// Serialize button events to GUI
;;;138    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
000128  f8cd9004          STR      r9,[sp,#4]
;;;139    				mask = 0x0001;
00012c  2401              MOVS     r4,#1
                  |L1.302|
;;;140    				while(mask)
;;;141    				{
;;;142    					if (buttons.action_down & mask)
00012e  8878              LDRH     r0,[r7,#2]  ; buttons
000130  4220              TST      r0,r4
000132  d008              BEQ      |L1.326|
;;;143    					{
;;;144    						gui_msg.data = mask | (BTN_EVENT_DOWN << 16);
000134  f4443080          ORR      r0,r4,#0x10000
000138  9002              STR      r0,[sp,#8]
;;;145    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
00013a  2300              MOVS     r3,#0
00013c  461a              MOV      r2,r3
00013e  a901              ADD      r1,sp,#4
000140  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000142  f7fffffe          BL       xQueueGenericSend
                  |L1.326|
;;;146    					}
;;;147    					if (buttons.action_up & mask)
000146  88b8              LDRH     r0,[r7,#4]  ; buttons
000148  4220              TST      r0,r4
00014a  d008              BEQ      |L1.350|
;;;148    					{
;;;149    						gui_msg.data = mask | (BTN_EVENT_UP << 16);
00014c  f4443000          ORR      r0,r4,#0x20000
000150  9002              STR      r0,[sp,#8]
;;;150    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000152  2300              MOVS     r3,#0
000154  461a              MOV      r2,r3
000156  a901              ADD      r1,sp,#4
000158  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00015a  f7fffffe          BL       xQueueGenericSend
                  |L1.350|
;;;151    					}
;;;152    					if (buttons.action_hold & mask)
00015e  88f8              LDRH     r0,[r7,#6]  ; buttons
000160  4220              TST      r0,r4
000162  d008              BEQ      |L1.374|
;;;153    					{
;;;154    						gui_msg.data = mask | (BTN_EVENT_HOLD << 16);
000164  f44420a0          ORR      r0,r4,#0x50000
000168  9002              STR      r0,[sp,#8]
;;;155    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
00016a  2300              MOVS     r3,#0
00016c  461a              MOV      r2,r3
00016e  a901              ADD      r1,sp,#4
000170  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000172  f7fffffe          BL       xQueueGenericSend
                  |L1.374|
;;;156    					}
;;;157    					mask <<= 1;
000176  0460              LSLS     r0,r4,#17
000178  0c04              LSRS     r4,r0,#16
00017a  2c00              CMP      r4,#0                 ;140
00017c  d1d7              BNE      |L1.302|
;;;158    				}
;;;159    				
;;;160    				// Send encoder events to GUI
;;;161    				if (encoder_delta)
00017e  482c              LDR      r0,|L1.560|
000180  f9b00000          LDRSH    r0,[r0,#0]  ; encoder_delta
000184  b140              CBZ      r0,|L1.408|
;;;162    				{
;;;163    					gui_msg.type = GUI_TASK_PROCESS_ENCODER;
000186  f8cd8004          STR      r8,[sp,#4]
;;;164    					gui_msg.data = (uint32_t)encoder_delta;
00018a  9002              STR      r0,[sp,#8]
;;;165    					xQueueSendToBack(xQueueGUI, &gui_msg, 0);
00018c  2300              MOVS     r3,#0
00018e  461a              MOV      r2,r3
000190  a901              ADD      r1,sp,#4
000192  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000194  f7fffffe          BL       xQueueGenericSend
                  |L1.408|
000198  e033              B        |L1.514|
;;;166    				}
;;;167    				
;;;168    				break;
;;;169    				
;;;170    			//----- button and encoder emulation -----//
;;;171    			case DISPATCHER_EMULATE_BUTTON:
;;;172    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
00019a  f8cd9004          STR      r9,[sp,#4]
;;;173    				gui_msg.data = income_msg.data;
00019e  9807              LDR      r0,[sp,#0x1c]
0001a0  9002              STR      r0,[sp,#8]
;;;174    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0001a2  2300              MOVS     r3,#0
0001a4  461a              MOV      r2,r3
0001a6  a901              ADD      r1,sp,#4
0001a8  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0001aa  f7fffffe          BL       xQueueGenericSend
;;;175    				break;
0001ae  e028              B        |L1.514|
;;;176    			case DP_EMU_ENC_DELTA:
;;;177    				gui_msg.type = GUI_TASK_PROCESS_ENCODER;
0001b0  f8cd8004          STR      r8,[sp,#4]
;;;178    				gui_msg.data = income_msg.data;
0001b4  9807              LDR      r0,[sp,#0x1c]
0001b6  9002              STR      r0,[sp,#8]
;;;179    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0001b8  2300              MOVS     r3,#0
0001ba  461a              MOV      r2,r3
0001bc  a901              ADD      r1,sp,#4
0001be  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0001c0  f7fffffe          BL       xQueueGenericSend
;;;180    				break;
0001c4  e01d              B        |L1.514|
;;;181    			
;;;182    			//----- converter control -----//
;;;183    			case DP_CONVERTER_TURN_ON:
;;;184    				converter_msg.type = CONVERTER_TURN_ON;
0001c6  f8cd800c          STR      r8,[sp,#0xc]
;;;185    				break;
0001ca  e01a              B        |L1.514|
;;;186    			case DP_CONVERTER_TURN_OFF:
;;;187    				converter_msg.type = CONVERTER_TURN_OFF;
0001cc  f8cda00c          STR      r10,[sp,#0xc]
;;;188    				break;
0001d0  e017              B        |L1.514|
;;;189    			case DP_CONVERTER_SET_VOLTAGE:
;;;190    				converter_msg.type = CONVERTER_SET_VOLTAGE;
0001d2  2007              MOVS     r0,#7
0001d4  9003              STR      r0,[sp,#0xc]
;;;191    				converter_msg.data.a = income_msg.data;
0001d6  9807              LDR      r0,[sp,#0x1c]
0001d8  9004              STR      r0,[sp,#0x10]
;;;192    				break;
0001da  e012              B        |L1.514|
;;;193    			case DP_CONVERTER_SET_CURRENT:
;;;194    				converter_msg.type = CONVERTER_SET_CURRENT;
0001dc  2009              MOVS     r0,#9
0001de  9003              STR      r0,[sp,#0xc]
;;;195    				converter_msg.data.a = income_msg.data;
0001e0  9807              LDR      r0,[sp,#0x1c]
0001e2  9004              STR      r0,[sp,#0x10]
;;;196    				break;
0001e4  e00d              B        |L1.514|
;;;197    			case DP_CONVERTER_SET_CURRENT_LIMIT:
;;;198    				converter_msg.type = CONVERTER_SET_CURRENT_RANGE;
0001e6  2006              MOVS     r0,#6
0001e8  9003              STR      r0,[sp,#0xc]
;;;199    				if (income_msg.data == 20)
0001ea  9807              LDR      r0,[sp,#0x1c]
0001ec  2814              CMP      r0,#0x14
0001ee  d003              BEQ      |L1.504|
;;;200    					converter_msg.data.a = CURRENT_RANGE_LOW;
;;;201    				else if (income_msg.data == 40)
0001f0  9807              LDR      r0,[sp,#0x1c]
0001f2  2828              CMP      r0,#0x28
0001f4  d003              BEQ      |L1.510|
0001f6  e004              B        |L1.514|
                  |L1.504|
0001f8  f8cdb010          STR      r11,[sp,#0x10]        ;200
0001fc  e001              B        |L1.514|
                  |L1.510|
;;;202    					converter_msg.data.a = CURRENT_RANGE_HIGH;
0001fe  f8cd9010          STR      r9,[sp,#0x10]
                  |L1.514|
;;;203    				break;
;;;204    		}
;;;205    		
;;;206    		
;;;207    		if (converter_msg.type)
000202  9803              LDR      r0,[sp,#0xc]
000204  2800              CMP      r0,#0
000206  f43faf45          BEQ      |L1.148|
;;;208    			xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00020a  2300              MOVS     r3,#0
00020c  461a              MOV      r2,r3
00020e  a903              ADD      r1,sp,#0xc
000210  6830              LDR      r0,[r6,#0]  ; xQueueConverter
000212  f7fffffe          BL       xQueueGenericSend
000216  e73d              B        |L1.148|
;;;209    	}
;;;210    	
;;;211    }
;;;212    
                          ENDP

                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
                          DCD      xQueueGUI
                  |L1.544|
                          DCD      buttons
                  |L1.548|
                          DCD      taskConverter_Enable
                  |L1.552|
                          DCD      xQueueSound
                  |L1.556|
                          DCD      xQueueConverter
                  |L1.560|
                          DCD      encoder_delta

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  dispatcher_tick_msg
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueDispatcher
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\dispatcher.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_dispatcher_c_16ca7314____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REVSH|
#line 130
|__asm___12_dispatcher_c_16ca7314____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
