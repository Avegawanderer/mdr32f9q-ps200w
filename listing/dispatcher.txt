; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\dispatcher.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\dispatcher.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\dispatcher.crf src\dispatcher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskDispatcher PROC
;;;37     
;;;38     void vTaskDispatcher(void *pvParameters) 
000000  b086              SUB      sp,sp,#0x18
;;;39     {
;;;40     	dispatch_incoming_msg_t income_msg;
;;;41     	int16_t encoder_delta;
;;;42     	conveter_message_t converter_msg;
;;;43     	uint32_t gui_msg;
;;;44     	
;;;45     	uint16_t button_emulation = 0;
000002  2400              MOVS     r4,#0
;;;46     	int16_t encoder_emulation = 0;
;;;47     	
;;;48     	// Initialize
;;;49     	xQueueDispatcher = xQueueCreate( 10, sizeof( dispatch_incoming_msg_t ) );		// Queue can contain 5 elements of type uint32_t
000004  2200              MOVS     r2,#0
000006  2108              MOVS     r1,#8
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       xQueueGenericCreate
00000e  f8df80fc          LDR      r8,|L1.268|
000012  f8c80000          STR      r0,[r8,#0]  ; xQueueDispatcher
;;;50     	if( xQueueDispatcher == 0 )
000016  b140              CBZ      r0,|L1.42|
;;;51     	{
;;;52     		// Queue was not created and must not be used.
;;;53     		while(1);
;;;54     	}
;;;55     	
;;;56     	
;;;57     	
;;;58     	while(1)
;;;59     	{
;;;60     		xQueueReceive(xQueueDispatcher, &income_msg, portMAX_DELAY);
;;;61     		converter_msg.type = 0;
;;;62     		
;;;63     		switch (income_msg.type)
;;;64     		{
;;;65     			case DISPATCHER_TICK:
;;;66     				ProcessButtons();
;;;67     				//encoder_delta = GetEncoderDelta();	
;;;68     				UpdateEncoderDelta();
;;;69     				
;;;70     				// Apply emulation
;;;71     				buttons.action_down |= button_emulation;
;;;72     				encoder_delta += encoder_emulation;
;;;73     				button_emulation = 0;
;;;74     				encoder_emulation = 0;
;;;75     			
;;;76     				
;;;77     			
;;;78     				// Feedback channel select
;;;79     				if (buttons.action_down & SW_CHANNEL)
;;;80     				{
;;;81     					// Send switch channel to 5V message
;;;82     					converter_msg.type = CONVERTER_SWITCH_TO_5VCH;
;;;83     				}
;;;84     				else if (buttons.action_up & SW_CHANNEL)
;;;85     				{
;;;86     					// Send switch channel to 12V message
;;;87     					converter_msg.type = CONVERTER_SWITCH_TO_12VCH;
;;;88     				}
;;;89     				else if ((buttons.action_down & BTN_OFF) || (buttons.action_up & SW_EXTERNAL))
;;;90     				{
;;;91     					// Send OFF mesage to converter task
;;;92     					converter_msg.type = CONVERTER_TURN_OFF;
;;;93     				}
;;;94     				else if ((buttons.action_down & BTN_ON) || (buttons.action_down & SW_EXTERNAL))
;;;95     				{
;;;96     					// Send ON mesage to converter task
;;;97     					converter_msg.type = CONVERTER_TURN_ON;
000018  2501              MOVS     r5,#1
00001a  4f3d              LDR      r7,|L1.272|
00001c  2602              MOVS     r6,#2                 ;92
00001e  46a1              MOV      r9,r4                 ;45
000020  f04f3bff          MOV      r11,#0xffffffff       ;60
000024  f2402a11          MOV      r10,#0x211            ;63
;;;98     				}
;;;99     			
;;;100    				
;;;101    					
;;;102    				//---------------------------//	
;;;103    				//---------------------------//
;;;104    
;;;105    				// Make GUI process buttons and encoder
;;;106    				gui_msg = GUI_PROCESS_BUTTONS;
;;;107    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
;;;108    			
;;;109    				break;
;;;110    				
;;;111    			//----- button and encoder emulation -----//
;;;112    			case DP_EMU_BTN_DOWN:
;;;113    				button_emulation |= income_msg.data;
;;;114    				break;
;;;115    			case DP_EMU_ENC_DELTA:
;;;116    				encoder_emulation += (int16_t)income_msg.data;
;;;117    				break;
;;;118    			
;;;119    				
;;;120    			//----- converter control -----//
;;;121    			case DP_CONVERTER_TURN_ON:
;;;122    				converter_msg.type = CONVERTER_TURN_ON;
;;;123    				break;
;;;124    			case DP_CONVERTER_TURN_OFF:
;;;125    				converter_msg.type = CONVERTER_TURN_OFF;
;;;126    				break;
;;;127    			case DP_CONVERTER_SET_VOLTAGE:
;;;128    				converter_msg.type = CONVERTER_SET_VOLTAGE;
;;;129    				converter_msg.data_a = income_msg.data;
;;;130    				break;
;;;131    			case DP_CONVERTER_SET_CURRENT:
;;;132    				converter_msg.type = CONVERTER_SET_CURRENT;
;;;133    				converter_msg.data_a = income_msg.data;
;;;134    				break;
;;;135    			case DP_CONVERTER_SET_CURRENT_LIMIT:
;;;136    				if (income_msg.data == 20)
;;;137    					converter_msg.type = SET_CURRENT_LIMIT_20A;
;;;138    				else if (income_msg.data == 40)
;;;139    					converter_msg.type = SET_CURRENT_LIMIT_40A;
;;;140    				break;
;;;141    		}
;;;142    		
;;;143    		
;;;144    		if (converter_msg.type)
;;;145    			xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000028  e060              B        |L1.236|
                  |L1.42|
00002a  e7fe              B        |L1.42|
                  |L1.44|
00002c  dc0a              BGT      |L1.68|
00002e  b180              CBZ      r0,|L1.82|
000030  f5b07f00          CMP      r0,#0x200             ;63
000034  d037              BEQ      |L1.166|
000036  f5a07000          SUB      r0,r0,#0x200          ;63
00003a  3801              SUBS     r0,#1                 ;63
00003c  d035              BEQ      |L1.170|
00003e  280f              CMP      r0,#0xf               ;63
000040  d14b              BNE      |L1.218|
000042  e034              B        |L1.174|
                  |L1.68|
000044  2901              CMP      r1,#1                 ;63
000046  d03c              BEQ      |L1.194|
000048  f5a17180          SUB      r1,r1,#0x100          ;63
00004c  39ef              SUBS     r1,r1,#0xef           ;63
00004e  d144              BNE      |L1.218|
000050  e025              B        |L1.158|
                  |L1.82|
000052  f7fffffe          BL       ProcessButtons
000056  f7fffffe          BL       UpdateEncoderDelta
00005a  8878              LDRH     r0,[r7,#2]            ;71  ; buttons
00005c  4320              ORRS     r0,r0,r4              ;71
00005e  8078              STRH     r0,[r7,#2]            ;71
000060  2400              MOVS     r4,#0                 ;73
000062  0681              LSLS     r1,r0,#26             ;79
000064  d502              BPL      |L1.108|
000066  2003              MOVS     r0,#3                 ;82
000068  9001              STR      r0,[sp,#4]            ;82
00006a  e00f              B        |L1.140|
                  |L1.108|
00006c  88b9              LDRH     r1,[r7,#4]            ;84  ; buttons
00006e  068a              LSLS     r2,r1,#26             ;84
000070  d502              BPL      |L1.120|
000072  2004              MOVS     r0,#4                 ;87
000074  9001              STR      r0,[sp,#4]            ;87
000076  e009              B        |L1.140|
                  |L1.120|
000078  0602              LSLS     r2,r0,#24             ;89
00007a  d401              BMI      |L1.128|
00007c  05c9              LSLS     r1,r1,#23             ;89
00007e  d501              BPL      |L1.132|
                  |L1.128|
000080  9601              STR      r6,[sp,#4]            ;92
000082  e003              B        |L1.140|
                  |L1.132|
000084  f4107fa0          TST      r0,#0x140             ;94
000088  d000              BEQ      |L1.140|
00008a  9501              STR      r5,[sp,#4]            ;97
                  |L1.140|
00008c  9500              STR      r5,[sp,#0]            ;106
00008e  4821              LDR      r0,|L1.276|
000090  2300              MOVS     r3,#0                 ;107
000092  461a              MOV      r2,r3                 ;107
000094  4669              MOV      r1,sp                 ;107
000096  6800              LDR      r0,[r0,#0]            ;107  ; xQueueGUI
000098  f7fffffe          BL       xQueueGenericSend
00009c  e01d              B        |L1.218|
                  |L1.158|
00009e  9805              LDR      r0,[sp,#0x14]         ;113
0000a0  4320              ORRS     r0,r0,r4              ;113
0000a2  b284              UXTH     r4,r0                 ;113
0000a4  e019              B        |L1.218|
                  |L1.166|
0000a6  9501              STR      r5,[sp,#4]            ;122
0000a8  e017              B        |L1.218|
                  |L1.170|
0000aa  9601              STR      r6,[sp,#4]            ;125
0000ac  e015              B        |L1.218|
                  |L1.174|
0000ae  2007              MOVS     r0,#7                 ;128
0000b0  9001              STR      r0,[sp,#4]            ;128
0000b2  9805              LDR      r0,[sp,#0x14]         ;129
0000b4  9002              STR      r0,[sp,#8]            ;129
0000b6  e010              B        |L1.218|
                  |L1.184|
0000b8  2008              MOVS     r0,#8                 ;132
0000ba  9001              STR      r0,[sp,#4]            ;132
0000bc  9805              LDR      r0,[sp,#0x14]         ;133
0000be  9002              STR      r0,[sp,#8]            ;133
0000c0  e00b              B        |L1.218|
                  |L1.194|
0000c2  9805              LDR      r0,[sp,#0x14]         ;136
0000c4  2814              CMP      r0,#0x14              ;136
0000c6  d003              BEQ      |L1.208|
0000c8  9805              LDR      r0,[sp,#0x14]         ;138
0000ca  2828              CMP      r0,#0x28              ;138
0000cc  d003              BEQ      |L1.214|
0000ce  e004              B        |L1.218|
                  |L1.208|
0000d0  2005              MOVS     r0,#5                 ;137
0000d2  9001              STR      r0,[sp,#4]            ;137
0000d4  e001              B        |L1.218|
                  |L1.214|
0000d6  2006              MOVS     r0,#6                 ;139
0000d8  9001              STR      r0,[sp,#4]            ;139
                  |L1.218|
0000da  9801              LDR      r0,[sp,#4]            ;144
0000dc  b130              CBZ      r0,|L1.236|
0000de  480e              LDR      r0,|L1.280|
0000e0  2300              MOVS     r3,#0
0000e2  461a              MOV      r2,r3
0000e4  a901              ADD      r1,sp,#4
0000e6  6800              LDR      r0,[r0,#0]  ; xQueueConverter
0000e8  f7fffffe          BL       xQueueGenericSend
                  |L1.236|
0000ec  2300              MOVS     r3,#0                 ;60
0000ee  465a              MOV      r2,r11                ;60
0000f0  a904              ADD      r1,sp,#0x10           ;60
0000f2  f8d80000          LDR      r0,[r8,#0]            ;60  ; xQueueDispatcher
0000f6  f7fffffe          BL       xQueueGenericReceive
0000fa  f8cd9004          STR      r9,[sp,#4]            ;61
0000fe  9804              LDR      r0,[sp,#0x10]         ;63
000100  f2a02111          SUB      r1,r0,#0x211          ;63
000104  4550              CMP      r0,r10                ;63
000106  d0d7              BEQ      |L1.184|
000108  e790              B        |L1.44|
;;;146    	}
;;;147    	
;;;148    }
;;;149    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      ||.data||
                  |L1.272|
                          DCD      buttons
                  |L1.276|
                          DCD      xQueueGUI
                  |L1.280|
                          DCD      xQueueConverter

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  dispatcher_tick_msg
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueDispatcher
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\dispatcher.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_dispatcher_c_16ca7314____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REVSH|
#line 130
|__asm___12_dispatcher_c_16ca7314____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
