; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\dispatcher.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\dispatcher.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\dispatcher.crf src\dispatcher.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskDispatcher PROC
;;;37     
;;;38     void vTaskDispatcher(void *pvParameters) 
000000  b088              SUB      sp,sp,#0x20
;;;39     {
;;;40     	dispatch_incoming_msg_t income_msg;
;;;41     	conveter_message_t converter_msg;
;;;42     	gui_incoming_msg_t gui_msg;
;;;43     	uint16_t mask;
;;;44     	
;;;45     	
;;;46     	// Initialize
;;;47     	xQueueDispatcher = xQueueCreate( 10, sizeof( dispatch_incoming_msg_t ) );		// Queue can contain 5 elements of type uint32_t
000002  2200              MOVS     r2,#0
000004  2108              MOVS     r1,#8
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       xQueueGenericCreate
00000c  f8dfb1a8          LDR      r11,|L1.440|
000010  f8cb0000          STR      r0,[r11,#0]  ; xQueueDispatcher
;;;48     	if( xQueueDispatcher == 0 )
000014  b148              CBZ      r0,|L1.42|
;;;49     	{
;;;50     		// Queue was not created and must not be used.
;;;51     		while(1);
;;;52     	}
;;;53     	
;;;54     	
;;;55     	while(1)
;;;56     	{
;;;57     		xQueueReceive(xQueueDispatcher, &income_msg, portMAX_DELAY);
;;;58     		converter_msg.type = 0;
;;;59     		
;;;60     		switch (income_msg.type)
;;;61     		{
;;;62     			case DISPATCHER_TICK:
;;;63     			
;;;64     				ProcessButtons();	
;;;65     				UpdateEncoderDelta();
;;;66     				
;;;67     				//---------- Converter control -----------//
;;;68     				
;;;69     				// Feedback channel select
;;;70     				if (buttons.action_down & SW_CHANNEL)
000016  4f69              LDR      r7,|L1.444|
;;;71     				{
;;;72     					// Send switch channel to 5V message
;;;73     					converter_msg.type = CONVERTER_SWITCH_TO_5VCH;
;;;74     					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
;;;75     				}
;;;76     				else if (buttons.action_up & SW_CHANNEL)
;;;77     				{
;;;78     					// Send switch channel to 12V message
;;;79     					converter_msg.type = CONVERTER_SWITCH_TO_12VCH;
;;;80     					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
;;;81     				}
;;;82     				
;;;83     				if ((buttons.action_down & BTN_OFF) || (buttons.action_up & SW_EXTERNAL))
;;;84     				{
;;;85     					// Send OFF mesage to converter task
;;;86     					converter_msg.type = CONVERTER_TURN_OFF;
;;;87     					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
;;;88     				}
;;;89     				else if ((buttons.action_down & BTN_ON) || (buttons.action_down & SW_EXTERNAL))
;;;90     				{
;;;91     					// Send ON mesage to converter task
;;;92     					converter_msg.type = CONVERTER_TURN_ON;
;;;93     					xQueueSendToBack(xQueueConverter, &converter_msg, 0);
;;;94     				}
;;;95     				
;;;96     				converter_msg.type  = 0;
;;;97     				
;;;98     				//------------- GUI control --------------//
;;;99     				
;;;100    				// Serialize button events to GUI
;;;101    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
;;;102    				mask = 0x0001;
;;;103    				while(mask)
;;;104    				{
;;;105    					if (buttons.action_down & mask)
;;;106    					{
;;;107    						gui_msg.data = mask | (BTN_EVENT_DOWN << 16);
;;;108    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000018  4d69              LDR      r5,|L1.448|
00001a  f04f0801          MOV      r8,#1                 ;92
00001e  f04f0902          MOV      r9,#2                 ;86
000022  4e68              LDR      r6,|L1.452|
000024  f04f0a00          MOV      r10,#0                ;47
000028  e0aa              B        |L1.384|
                  |L1.42|
00002a  e7fe              B        |L1.42|
                  |L1.44|
00002c  f7fffffe          BL       ProcessButtons
000030  f7fffffe          BL       UpdateEncoderDelta
000034  8878              LDRH     r0,[r7,#2]            ;70  ; buttons
000036  0680              LSLS     r0,r0,#26             ;70
000038  d508              BPL      |L1.76|
00003a  2003              MOVS     r0,#3                 ;73
00003c  9003              STR      r0,[sp,#0xc]          ;73
00003e  2300              MOVS     r3,#0                 ;74
000040  461a              MOV      r2,r3                 ;74
000042  a903              ADD      r1,sp,#0xc            ;74
000044  6830              LDR      r0,[r6,#0]            ;74  ; xQueueConverter
000046  f7fffffe          BL       xQueueGenericSend
00004a  e00a              B        |L1.98|
                  |L1.76|
00004c  88b8              LDRH     r0,[r7,#4]            ;76  ; buttons
00004e  0680              LSLS     r0,r0,#26             ;76
000050  d507              BPL      |L1.98|
000052  2004              MOVS     r0,#4                 ;79
000054  9003              STR      r0,[sp,#0xc]          ;79
000056  2300              MOVS     r3,#0                 ;80
000058  461a              MOV      r2,r3                 ;80
00005a  a903              ADD      r1,sp,#0xc            ;80
00005c  6830              LDR      r0,[r6,#0]            ;80  ; xQueueConverter
00005e  f7fffffe          BL       xQueueGenericSend
                  |L1.98|
000062  8878              LDRH     r0,[r7,#2]            ;83  ; buttons
000064  0601              LSLS     r1,r0,#24             ;83
000066  d402              BMI      |L1.110|
000068  88b9              LDRH     r1,[r7,#4]            ;83  ; buttons
00006a  05c9              LSLS     r1,r1,#23             ;83
00006c  d508              BPL      |L1.128|
                  |L1.110|
00006e  f8cd900c          STR      r9,[sp,#0xc]          ;86
000072  2300              MOVS     r3,#0                 ;87
000074  461a              MOV      r2,r3                 ;87
000076  a903              ADD      r1,sp,#0xc            ;87
000078  6830              LDR      r0,[r6,#0]            ;87  ; xQueueConverter
00007a  f7fffffe          BL       xQueueGenericSend
00007e  e00a              B        |L1.150|
                  |L1.128|
000080  f4107fa0          TST      r0,#0x140             ;89
000084  d007              BEQ      |L1.150|
000086  f8cd800c          STR      r8,[sp,#0xc]          ;92
00008a  2300              MOVS     r3,#0                 ;93
00008c  461a              MOV      r2,r3                 ;93
00008e  a903              ADD      r1,sp,#0xc            ;93
000090  6830              LDR      r0,[r6,#0]            ;93  ; xQueueConverter
000092  f7fffffe          BL       xQueueGenericSend
                  |L1.150|
000096  f8cda00c          STR      r10,[sp,#0xc]         ;96
00009a  f8cd8004          STR      r8,[sp,#4]            ;101
00009e  2401              MOVS     r4,#1                 ;102
                  |L1.160|
0000a0  8878              LDRH     r0,[r7,#2]            ;105  ; buttons
0000a2  4220              TST      r0,r4                 ;105
0000a4  d008              BEQ      |L1.184|
0000a6  f4443080          ORR      r0,r4,#0x10000        ;107
0000aa  9002              STR      r0,[sp,#8]            ;107
0000ac  2300              MOVS     r3,#0
0000ae  461a              MOV      r2,r3
0000b0  a901              ADD      r1,sp,#4
0000b2  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0000b4  f7fffffe          BL       xQueueGenericSend
                  |L1.184|
;;;109    					}
;;;110    					if (buttons.action_up & mask)
0000b8  88b8              LDRH     r0,[r7,#4]  ; buttons
0000ba  4220              TST      r0,r4
0000bc  d008              BEQ      |L1.208|
;;;111    					{
;;;112    						gui_msg.data = mask | (BTN_EVENT_UP << 16);
0000be  f4443000          ORR      r0,r4,#0x20000
0000c2  9002              STR      r0,[sp,#8]
;;;113    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0000c4  2300              MOVS     r3,#0
0000c6  461a              MOV      r2,r3
0000c8  a901              ADD      r1,sp,#4
0000ca  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0000cc  f7fffffe          BL       xQueueGenericSend
                  |L1.208|
;;;114    					}
;;;115    					if (buttons.action_hold & mask)
0000d0  88f8              LDRH     r0,[r7,#6]  ; buttons
0000d2  4220              TST      r0,r4
0000d4  d008              BEQ      |L1.232|
;;;116    					{
;;;117    						gui_msg.data = mask | (BTN_EVENT_HOLD << 16);
0000d6  f44420a0          ORR      r0,r4,#0x50000
0000da  9002              STR      r0,[sp,#8]
;;;118    						xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0000dc  2300              MOVS     r3,#0
0000de  461a              MOV      r2,r3
0000e0  a901              ADD      r1,sp,#4
0000e2  6828              LDR      r0,[r5,#0]  ; xQueueGUI
0000e4  f7fffffe          BL       xQueueGenericSend
                  |L1.232|
;;;119    					}
;;;120    					mask <<= 1;
0000e8  0460              LSLS     r0,r4,#17
0000ea  0c04              LSRS     r4,r0,#16
0000ec  2c00              CMP      r4,#0                 ;103
0000ee  d1d7              BNE      |L1.160|
;;;121    				}
;;;122    				
;;;123    				// Send encoder events to GUI
;;;124    				if (encoder_delta)
0000f0  4835              LDR      r0,|L1.456|
0000f2  f9b00000          LDRSH    r0,[r0,#0]  ; encoder_delta
0000f6  b308              CBZ      r0,|L1.316|
;;;125    				{
;;;126    					gui_msg.type = GUI_TASK_PROCESS_ENCODER;
0000f8  f8cd9004          STR      r9,[sp,#4]
;;;127    					gui_msg.data = (uint32_t)encoder_delta;
0000fc  9002              STR      r0,[sp,#8]
;;;128    					xQueueSendToBack(xQueueGUI, &gui_msg, 0);
0000fe  2300              MOVS     r3,#0
000100  461a              MOV      r2,r3
000102  a901              ADD      r1,sp,#4
000104  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000106  f7fffffe          BL       xQueueGenericSend
00010a  e031              B        |L1.368|
                  |L1.268|
;;;129    				}
;;;130    				
;;;131    				break;
;;;132    				
;;;133    			//----- button and encoder emulation -----//
;;;134    			case DISPATCHER_EMULATE_BUTTON:
;;;135    				gui_msg.type = GUI_TASK_PROCESS_BUTTONS;
00010c  f8cd8004          STR      r8,[sp,#4]
;;;136    				gui_msg.data = income_msg.data;
000110  9807              LDR      r0,[sp,#0x1c]
000112  9002              STR      r0,[sp,#8]
;;;137    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
000114  2300              MOVS     r3,#0
000116  461a              MOV      r2,r3
000118  a901              ADD      r1,sp,#4
00011a  6828              LDR      r0,[r5,#0]  ; xQueueGUI
00011c  f7fffffe          BL       xQueueGenericSend
;;;138    				break;
000120  e026              B        |L1.368|
                  |L1.290|
;;;139    			case DP_EMU_ENC_DELTA:
;;;140    				gui_msg.type = GUI_TASK_PROCESS_ENCODER;
000122  f8cd9004          STR      r9,[sp,#4]
;;;141    				gui_msg.data = income_msg.data;
000126  9807              LDR      r0,[sp,#0x1c]
000128  9002              STR      r0,[sp,#8]
;;;142    				xQueueSendToBack(xQueueGUI, &gui_msg, 0);
00012a  2300              MOVS     r3,#0
00012c  461a              MOV      r2,r3
00012e  a901              ADD      r1,sp,#4
000130  6828              LDR      r0,[r5,#0]  ; xQueueGUI
000132  f7fffffe          BL       xQueueGenericSend
;;;143    				break;
000136  e01b              B        |L1.368|
                  |L1.312|
;;;144    			
;;;145    			//----- converter control -----//
;;;146    			case DP_CONVERTER_TURN_ON:
;;;147    				converter_msg.type = CONVERTER_TURN_ON;
000138  f8cd800c          STR      r8,[sp,#0xc]
                  |L1.316|
;;;148    				break;
00013c  e018              B        |L1.368|
                  |L1.318|
;;;149    			case DP_CONVERTER_TURN_OFF:
;;;150    				converter_msg.type = CONVERTER_TURN_OFF;
00013e  f8cd900c          STR      r9,[sp,#0xc]
;;;151    				break;
000142  e015              B        |L1.368|
                  |L1.324|
;;;152    			case DP_CONVERTER_SET_VOLTAGE:
;;;153    				converter_msg.type = CONVERTER_SET_VOLTAGE;
000144  2007              MOVS     r0,#7
000146  9003              STR      r0,[sp,#0xc]
;;;154    				converter_msg.data_a = income_msg.data;
000148  9807              LDR      r0,[sp,#0x1c]
00014a  9004              STR      r0,[sp,#0x10]
;;;155    				break;
00014c  e010              B        |L1.368|
                  |L1.334|
;;;156    			case DP_CONVERTER_SET_CURRENT:
;;;157    				converter_msg.type = CONVERTER_SET_CURRENT;
00014e  2008              MOVS     r0,#8
000150  9003              STR      r0,[sp,#0xc]
;;;158    				converter_msg.data_a = income_msg.data;
000152  9807              LDR      r0,[sp,#0x1c]
000154  9004              STR      r0,[sp,#0x10]
;;;159    				break;
000156  e00b              B        |L1.368|
                  |L1.344|
;;;160    			case DP_CONVERTER_SET_CURRENT_LIMIT:
;;;161    				if (income_msg.data == 20)
000158  9807              LDR      r0,[sp,#0x1c]
00015a  2814              CMP      r0,#0x14
00015c  d003              BEQ      |L1.358|
;;;162    					converter_msg.type = SET_CURRENT_LIMIT_20A;
;;;163    				else if (income_msg.data == 40)
00015e  9807              LDR      r0,[sp,#0x1c]
000160  2828              CMP      r0,#0x28
000162  d003              BEQ      |L1.364|
000164  e004              B        |L1.368|
                  |L1.358|
000166  2005              MOVS     r0,#5                 ;162
000168  9003              STR      r0,[sp,#0xc]          ;162
00016a  e001              B        |L1.368|
                  |L1.364|
;;;164    					converter_msg.type = SET_CURRENT_LIMIT_40A;
00016c  2006              MOVS     r0,#6
00016e  9003              STR      r0,[sp,#0xc]
                  |L1.368|
;;;165    				break;
;;;166    		}
;;;167    		
;;;168    		
;;;169    		if (converter_msg.type)
000170  9803              LDR      r0,[sp,#0xc]
000172  b128              CBZ      r0,|L1.384|
;;;170    			xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000174  2300              MOVS     r3,#0
000176  461a              MOV      r2,r3
000178  a903              ADD      r1,sp,#0xc
00017a  6830              LDR      r0,[r6,#0]  ; xQueueConverter
00017c  f7fffffe          BL       xQueueGenericSend
                  |L1.384|
000180  2300              MOVS     r3,#0                 ;57
000182  1e5a              SUBS     r2,r3,#1              ;57
000184  a906              ADD      r1,sp,#0x18           ;57
000186  f8db0000          LDR      r0,[r11,#0]           ;57  ; xQueueDispatcher
00018a  f7fffffe          BL       xQueueGenericReceive
00018e  f8cda00c          STR      r10,[sp,#0xc]         ;58
000192  9806              LDR      r0,[sp,#0x18]         ;60
000194  2809              CMP      r0,#9                 ;60
000196  d2eb              BCS      |L1.368|
000198  e8dff000          TBB      [pc,r0]               ;60
00019c  0d0c0b0a          DCB      0x0d,0x0c,0x0b,0x0a
0001a0  09080706          DCB      0x09,0x08,0x07,0x06
0001a4  0500              DCB      0x05,0x00
0001a6  e7b1              B        |L1.268|
0001a8  e7bb              B        |L1.290|
0001aa  e7e1              B        |L1.368|
0001ac  e7d4              B        |L1.344|
0001ae  e7ce              B        |L1.334|
0001b0  e7c8              B        |L1.324|
0001b2  e7c4              B        |L1.318|
0001b4  e7c0              B        |L1.312|
0001b6  e739              B        |L1.44|
;;;171    	}
;;;172    	
;;;173    }
;;;174    
                          ENDP

                  |L1.440|
                          DCD      ||.data||
                  |L1.444|
                          DCD      buttons
                  |L1.448|
                          DCD      xQueueGUI
                  |L1.452|
                          DCD      xQueueConverter
                  |L1.456|
                          DCD      encoder_delta

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  dispatcher_tick_msg
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueDispatcher
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\dispatcher.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___12_dispatcher_c_16ca7314____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___12_dispatcher_c_16ca7314____REVSH|
#line 130
|__asm___12_dispatcher_c_16ca7314____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
