; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\sound_driver.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\sound_driver.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\sound_driver.crf src\sound_driver.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  decode_event PROC
;;;28     
;;;29     static const sample_t *decode_event(uint16_t event_code)
000000  2805              CMP      r0,#5
;;;30     {
;;;31     	const sample_t *psample;
;;;32     	if (event_code >= sizeof(event_table) / sizeof(sample_t *))
000002  d300              BCC      |L1.6|
;;;33     		event_code = 0;
000004  2000              MOVS     r0,#0
                  |L1.6|
;;;34     	psample = event_table[event_code];
000006  4947              LDR      r1,|L1.292|
000008  f8510020          LDR      r0,[r1,r0,LSL #2]
;;;35     	return psample;
;;;36     }
00000c  4770              BX       lr
;;;37     
                          ENDP

                  set_beeper_period PROC
;;;38     static void set_beeper_period(uint16_t period)
00000e  4946              LDR      r1,|L1.296|
;;;39     {
;;;40     	MDR_TIMER1->ARR = period - 1;	
000010  1e42              SUBS     r2,r0,#1
000012  608a              STR      r2,[r1,#8]
;;;41     	MDR_TIMER1->CCR2 = period / 2;		// 50% duty
000014  0840              LSRS     r0,r0,#1
000016  6148              STR      r0,[r1,#0x14]
;;;42     }
000018  4770              BX       lr
;;;43     
                          ENDP

                  set_beeper_output PROC
;;;44     static void set_beeper_output(uint8_t enable)
00001a  4a43              LDR      r2,|L1.296|
;;;45     {
;;;46     	uint32_t temp = MDR_TIMER1->CH2_CNTRL1;
00001c  6b51              LDR      r1,[r2,#0x34]
;;;47     	temp &= ~( (3 << TIMER_CH_CNTRL1_SELO_Pos) | (3 << TIMER_CH_CNTRL1_NSELO_Pos));
00001e  f640430c          MOV      r3,#0xc0c
000022  4399              BICS     r1,r1,r3
;;;48     	if (enable)
000024  b118              CBZ      r0,|L1.46|
;;;49     		temp |= (TIMER_CH_OutSrc_REF << TIMER_CH_CNTRL1_SELO_Pos) | (TIMER_CH_OutSrc_REF << TIMER_CH_CNTRL1_NSELO_Pos);
000026  f6400008          MOV      r0,#0x808
00002a  4301              ORRS     r1,r1,r0
00002c  e002              B        |L1.52|
                  |L1.46|
;;;50     	else
;;;51     		temp |= (TIMER_CH_OutSrc_Only_1 << TIMER_CH_CNTRL1_SELO_Pos) | (TIMER_CH_OutSrc_Only_1 << TIMER_CH_CNTRL1_NSELO_Pos);
00002e  f2404004          MOV      r0,#0x404
000032  4301              ORRS     r1,r1,r0
                  |L1.52|
;;;52     	MDR_TIMER1->CH2_CNTRL1 = temp;
000034  6351              STR      r1,[r2,#0x34]
;;;53     }
000036  4770              BX       lr
;;;54     
                          ENDP

                  vTaskSound PROC
;;;64     //-------------------------------------------------------//
;;;65     void vTaskSound(void *pvParameters) 
000038  b50e              PUSH     {r1-r3,lr}
;;;66     {
;;;67     	uint32_t income_msg;
;;;68     	uint16_t income_event_code;
;;;69     	uint16_t income_event_priority;
;;;70     	
;;;71     	uint16_t pending_event_code = 0;
00003a  2000              MOVS     r0,#0
00003c  9001              STR      r0,[sp,#4]
;;;72     	uint16_t pending_event_priority = 0;
00003e  4680              MOV      r8,r0
;;;73     	
;;;74     	uint16_t current_event_priority = 0;
000040  4683              MOV      r11,r0
;;;75     	
;;;76     	uint16_t state;
;;;77     	uint8_t fsm_exit;
;;;78     	
;;;79     	const sample_t *psample;
;;;80     	const tone_t *ptone;
;;;81     	const tone_t *current_tone_record;
;;;82     	uint16_t tone_repeats;
;;;83     	uint16_t current_tone_period;
;;;84     	uint16_t current_tone_duration;
;;;85     	
;;;86     	// Initialize
;;;87     	xQueueSound = xQueueCreate( 10, sizeof( uint32_t ) );		// Queue can contain 10 elements of type uint32_t
000042  2200              MOVS     r2,#0
000044  2104              MOVS     r1,#4
000046  200a              MOVS     r0,#0xa
000048  f7fffffe          BL       xQueueGenericCreate
00004c  4935              LDR      r1,|L1.292|
00004e  1f09              SUBS     r1,r1,#4
000050  6008              STR      r0,[r1,#0]  ; xQueueSound
;;;88     	if( xQueueSound == 0 )
000052  bb80              CBNZ     r0,|L1.182|
                  |L1.84|
;;;89     	{
;;;90     		// Queue was not created and must not be used.
;;;91     		while(1);
000054  e7fe              B        |L1.84|
                  |L1.86|
;;;92     	}
;;;93     	
;;;94     	while(1)
;;;95     	{
;;;96     		xQueueReceive(xQueueSound, &income_msg, portMAX_DELAY);
;;;97     		
;;;98     		if (income_msg != SYNC)
;;;99     		{
;;;100    			// Received some message
;;;101    			income_event_priority = (uint16_t)income_msg;
000056  b288              UXTH     r0,r1
;;;102    			income_event_code = (uint16_t)(income_msg >> 16);
000058  0c09              LSRS     r1,r1,#16
;;;103    			
;;;104    			if (income_event_priority > pending_event_priority)
00005a  4540              CMP      r0,r8
00005c  d954              BLS      |L1.264|
;;;105    			{
;;;106    				pending_event_priority = income_event_priority;
00005e  4680              MOV      r8,r0
;;;107    				pending_event_code = income_event_code;
000060  9101              STR      r1,[sp,#4]
000062  e051              B        |L1.264|
                  |L1.100|
;;;108    			}
;;;109    		}
;;;110    		else
;;;111    		{
;;;112    			if (pending_event_priority > current_event_priority)
000064  45d8              CMP      r8,r11
000066  d900              BLS      |L1.106|
;;;113    			{
;;;114    				// Override FSM state
;;;115    				state = START_NEW_SAMPLE;	
000068  2401              MOVS     r4,#1
                  |L1.106|
;;;116    			}
;;;117    			//---------------------------//
;;;118    			// Sound driver FSM
;;;119    			fsm_exit = 0;
00006a  f04f0a00          MOV      r10,#0
                  |L1.110|
;;;120    			while (fsm_exit == 0)
;;;121    			{
;;;122    				switch(state)
00006e  2c06              CMP      r4,#6
000070  d240              BCS      |L1.244|
000072  e8dff004          TBB      [pc,r4]
000076  3f03              DCB      0x3f,0x03
000078  0c1a2337          DCB      0x0c,0x1a,0x23,0x37
;;;123    				{
;;;124    					case START_NEW_SAMPLE:
;;;125    						psample = decode_event(pending_event_code);
00007c  9801              LDR      r0,[sp,#4]
00007e  f7fffffe          BL       decode_event
000082  4681              MOV      r9,r0
;;;126    						state = GET_NEXT_SAMPLE_RECORD;
000084  2402              MOVS     r4,#2
;;;127    						current_event_priority = pending_event_priority;
000086  46c3              MOV      r11,r8
;;;128    						pending_event_priority = 0;
000088  f04f0800          MOV      r8,#0
;;;129    						break;
00008c  e039              B        |L1.258|
;;;130    					case GET_NEXT_SAMPLE_RECORD:
;;;131    						ptone = psample->tones;
00008e  f8d90004          LDR      r0,[r9,#4]
000092  9000              STR      r0,[sp,#0]
;;;132    						tone_repeats = psample->num_repeats;
000094  f8997000          LDRB     r7,[r9,#0]
;;;133    						if ((ptone == 0) && (tone_repeats == 0))
000098  9800              LDR      r0,[sp,#0]
00009a  4338              ORRS     r0,r0,r7
00009c  d003              BEQ      |L1.166|
;;;134    						{
;;;135    							// Found zero sample - finished
;;;136    							state = IDLE;
;;;137    						}
;;;138    						else
;;;139    						{
;;;140    							psample++;
00009e  f1090908          ADD      r9,r9,#8
;;;141    							state = APPLY_CURRENT_SAMPLE_RECORD;
0000a2  2403              MOVS     r4,#3
0000a4  e02d              B        |L1.258|
                  |L1.166|
0000a6  2400              MOVS     r4,#0                 ;136
0000a8  e02b              B        |L1.258|
;;;142    						}
;;;143    						break;
;;;144    					case APPLY_CURRENT_SAMPLE_RECORD:
;;;145    						if (tone_repeats == 0)
0000aa  b12f              CBZ      r7,|L1.184|
;;;146    						{
;;;147    							state = GET_NEXT_SAMPLE_RECORD;
;;;148    						}
;;;149    						else
;;;150    						{
;;;151    							tone_repeats--;
0000ac  1e7f              SUBS     r7,r7,#1
0000ae  b2bf              UXTH     r7,r7
;;;152    							current_tone_record = ptone;
0000b0  9e00              LDR      r6,[sp,#0]
;;;153    							state = APPLY_NEXT_TONE_RECORD;
0000b2  2404              MOVS     r4,#4
0000b4  e025              B        |L1.258|
                  |L1.182|
0000b6  e027              B        |L1.264|
                  |L1.184|
0000b8  2402              MOVS     r4,#2                 ;147
0000ba  e022              B        |L1.258|
;;;154    						}
;;;155    						break;
;;;156    					case APPLY_NEXT_TONE_RECORD:
;;;157    						current_tone_period = current_tone_record->tone_period;
0000bc  8830              LDRH     r0,[r6,#0]
;;;158    						current_tone_duration = current_tone_record->duration;
0000be  8875              LDRH     r5,[r6,#2]
;;;159    						if ((current_tone_duration == 0) && (current_tone_period == 0))
0000c0  ea550100          ORRS     r1,r5,r0
0000c4  d007              BEQ      |L1.214|
;;;160    						{
;;;161    							state = APPLY_CURRENT_SAMPLE_RECORD;
;;;162    						}
;;;163    						else
;;;164    						{
;;;165    							current_tone_record++;
0000c6  1d36              ADDS     r6,r6,#4
;;;166    							if (current_tone_period != 0)
0000c8  b138              CBZ      r0,|L1.218|
;;;167    							{
;;;168    								set_beeper_period(current_tone_period);
0000ca  f7fffffe          BL       set_beeper_period
;;;169    								set_beeper_output(1);
0000ce  2001              MOVS     r0,#1
0000d0  f7fffffe          BL       set_beeper_output
0000d4  e004              B        |L1.224|
                  |L1.214|
0000d6  2403              MOVS     r4,#3                 ;161
0000d8  e013              B        |L1.258|
                  |L1.218|
;;;170    							}
;;;171    							else
;;;172    							{
;;;173    								set_beeper_output(0);
0000da  2000              MOVS     r0,#0
0000dc  f7fffffe          BL       set_beeper_output
                  |L1.224|
;;;174    							}
;;;175    							state = WAIT_FOR_CURRENT_TONE;
0000e0  2405              MOVS     r4,#5
0000e2  e00e              B        |L1.258|
;;;176    						}
;;;177    						break;
;;;178    					case WAIT_FOR_CURRENT_TONE:
;;;179    						if (current_tone_duration == 0)
0000e4  b125              CBZ      r5,|L1.240|
;;;180    						{
;;;181    							// Finished current tone
;;;182    							state = APPLY_NEXT_TONE_RECORD;
;;;183    						}
;;;184    						else
;;;185    						{
;;;186    							current_tone_duration--;
0000e6  1e6d              SUBS     r5,r5,#1
0000e8  b2ad              UXTH     r5,r5
;;;187    							fsm_exit = 1;
0000ea  f04f0a01          MOV      r10,#1
0000ee  e008              B        |L1.258|
                  |L1.240|
0000f0  2404              MOVS     r4,#4                 ;182
0000f2  e006              B        |L1.258|
                  |L1.244|
;;;188    						}
;;;189    						break;
;;;190    					default:
;;;191    						current_event_priority = 0;
0000f4  f04f0b00          MOV      r11,#0
;;;192    						set_beeper_output(0);
0000f8  2000              MOVS     r0,#0
0000fa  f7fffffe          BL       set_beeper_output
;;;193    						fsm_exit = 1;
0000fe  f04f0a01          MOV      r10,#1
                  |L1.258|
000102  f1ba0f00          CMP      r10,#0                ;120
000106  d0b2              BEQ      |L1.110|
                  |L1.264|
000108  4806              LDR      r0,|L1.292|
00010a  2300              MOVS     r3,#0                 ;96
00010c  1f00              SUBS     r0,r0,#4              ;96
00010e  1e5a              SUBS     r2,r3,#1              ;96
000110  a902              ADD      r1,sp,#8              ;96
000112  6800              LDR      r0,[r0,#0]            ;96  ; xQueueSound
000114  f7fffffe          BL       xQueueGenericReceive
000118  9902              LDR      r1,[sp,#8]            ;98
00011a  f5113f80          CMN      r1,#0x10000           ;98
00011e  d0a1              BEQ      |L1.100|
000120  e799              B        |L1.86|
;;;194    						break;
;;;195    				}
;;;196    			}
;;;197    			//---------------------------//
;;;198    		}
;;;199    	}
;;;200    }
;;;201    
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
                          DCD      ||.data||+0x4
                  |L1.296|
                          DCD      0x40070000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sound_driver_sync_msg
                          DCD      0xffff0000

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.constdata||
                  sound_instant_overload_msg
                          DCD      0x00040033

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueSound
                          DCD      0x00000000
                  event_table
                          DCD      sample_beep_600Hz_x2
                          DCD      sample_beep_1000Hz_50ms
                          DCD      sample_beep_800Hz_50ms
                          DCD      sample_beep_800Hz_x3
                          DCD      sample_beep_800Hz_20ms

;*** Start embedded assembler ***

#line 1 "src\\sound_driver.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_sound_driver_c_f3d02f9c____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_sound_driver_c_f3d02f9c____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_sound_driver_c_f3d02f9c____REVSH|
#line 130
|__asm___14_sound_driver_c_f3d02f9c____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
