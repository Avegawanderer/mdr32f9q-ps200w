; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\guigraphprimitives.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guigraphprimitives.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guigraphprimitives.crf src\gui\guiGraphics\guiGraphPrimitives.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LCD_SetFont PROC
;;;30     //-------------------------------------------------------//
;;;31     void LCD_SetFont(const tFont *newFont)
000000  49c3              LDR      r1,|L1.784|
;;;32     {
;;;33         if (newFont != LCD_currentFont)
000002  680a              LDR      r2,[r1,#0]  ; LCD_currentFont
000004  4290              CMP      r0,r2
000006  d000              BEQ      |L1.10|
;;;34             LCD_currentFont = newFont;
000008  6008              STR      r0,[r1,#0]  ; LCD_currentFont
                  |L1.10|
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  LCD_DrawRect PROC
;;;47     //-------------------------------------------------------//
;;;48     void LCD_DrawRect(uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, uint8_t pixelValue)
00000c  e92d41f0          PUSH     {r4-r8,lr}
;;;49     {
000010  4606              MOV      r6,r0
000012  9f06              LDR      r7,[sp,#0x18]
000014  460d              MOV      r5,r1
000016  4690              MOV      r8,r2
000018  461c              MOV      r4,r3
;;;50         LCD_DrawHorLine(x_pos,y_pos,width,pixelValue);
00001a  463b              MOV      r3,r7
00001c  4642              MOV      r2,r8
00001e  4629              MOV      r1,r5
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       LCD_DrawHorLine
;;;51         LCD_DrawHorLine(x_pos,y_pos + height - 1,width,pixelValue);
000026  1928              ADDS     r0,r5,r4
000028  1e40              SUBS     r0,r0,#1
00002a  b2c1              UXTB     r1,r0
00002c  463b              MOV      r3,r7
00002e  4642              MOV      r2,r8
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       LCD_DrawHorLine
;;;52         LCD_DrawVertLine(x_pos,y_pos,height - 1,pixelValue);
000036  1e64              SUBS     r4,r4,#1
000038  b2e2              UXTB     r2,r4
00003a  463b              MOV      r3,r7
00003c  4614              MOV      r4,r2
00003e  4629              MOV      r1,r5
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       LCD_DrawVertLine
;;;53         LCD_DrawVertLine(x_pos + width - 1,y_pos, height - 1,pixelValue);
000046  eb060008          ADD      r0,r6,r8
00004a  463b              MOV      r3,r7
00004c  4622              MOV      r2,r4
00004e  4629              MOV      r1,r5
000050  e8bd41f0          POP      {r4-r8,lr}
000054  1e40              SUBS     r0,r0,#1
000056  b2c0              UXTB     r0,r0
000058  f7ffbffe          B.W      LCD_DrawVertLine
;;;54     }
;;;55     
                          ENDP

                  LCD_GetFontItem PROC
;;;63     //-------------------------------------------------------//
;;;64     uint8_t LCD_GetFontItem(const tFont *font, uint8_t code, uint8_t *width, uint16_t *offset)
00005c  b5f0              PUSH     {r4-r7,lr}
;;;65     {
;;;66         uint8_t itemCode;
;;;67         uint8_t start_index = 0;
00005e  2500              MOVS     r5,#0
;;;68         uint8_t end_index;
;;;69         uint8_t i;
;;;70     
;;;71         if (font->codeTable == 0)
000060  f8d0c008          LDR      r12,[r0,#8]
;;;72         {
;;;73             // Font char set is a contiguous array
;;;74             start_index = font->firstCharCode;
;;;75             end_index = start_index + (font->charCount - 1);
000064  7886              LDRB     r6,[r0,#2]
000066  f1bc0f00          CMP      r12,#0                ;71
00006a  d12e              BNE      |L1.202|
00006c  7944              LDRB     r4,[r0,#5]            ;74
00006e  1e65              SUBS     r5,r4,#1
000070  4435              ADD      r5,r5,r6
000072  b2ed              UXTB     r5,r5
;;;76             if ((code < start_index) || (code > end_index))
000074  42a1              CMP      r1,r4
000076  d301              BCC      |L1.124|
000078  42a9              CMP      r1,r5
00007a  d901              BLS      |L1.128|
                  |L1.124|
;;;77                 return 0;
00007c  2000              MOVS     r0,#0
;;;78             else
;;;79             {
;;;80                 i = code-start_index;
;;;81                 if (offset != 0)
;;;82                 {
;;;83                     if (font->offsetTable == 0)
;;;84                         *offset = (uint16_t)i * font->bytesPerChar;
;;;85                     else
;;;86                         *offset = font->offsetTable[i];
;;;87                 }
;;;88                 if (font->widthTable == 0)
;;;89                     *width = font->width;
;;;90                 else
;;;91                     *width = font->widthTable[i];
;;;92                 return 1;
;;;93             }
;;;94         }
;;;95         else
;;;96         {
;;;97             end_index = font->charCount;
;;;98             // Font char set is defined by charTable
;;;99             while (start_index < end_index)
;;;100            {
;;;101                i = start_index + (end_index - start_index) / 2;
;;;102                itemCode = font->codeTable[i];
;;;103                if (code < itemCode)
;;;104                    end_index = i;
;;;105                else if (code > itemCode)
;;;106                    start_index = i+1;
;;;107                else
;;;108                {
;;;109                    // Found
;;;110                    if (offset != 0)
;;;111                        // Font must have valid offsetTable when codeTable is used
;;;112                        *offset = font->offsetTable[i];
;;;113                    if (font->widthTable == 0)
;;;114                        *width = font->width;
;;;115                    else
;;;116                        *width = font->widthTable[i];
;;;117                    return 1;
;;;118                }
;;;119            }
;;;120        }
;;;121        return 0;
;;;122    }
00007e  bdf0              POP      {r4-r7,pc}
                  |L1.128|
000080  1b09              SUBS     r1,r1,r4              ;80
000082  b2c9              UXTB     r1,r1                 ;80
000084  b123              CBZ      r3,|L1.144|
000086  6904              LDR      r4,[r0,#0x10]         ;83
000088  b144              CBZ      r4,|L1.156|
00008a  f8344011          LDRH     r4,[r4,r1,LSL #1]     ;86
00008e  801c              STRH     r4,[r3,#0]            ;86
                  |L1.144|
000090  68c3              LDR      r3,[r0,#0xc]          ;88
000092  b13b              CBZ      r3,|L1.164|
000094  5c58              LDRB     r0,[r3,r1]            ;91
000096  7010              STRB     r0,[r2,#0]            ;91
                  |L1.152|
000098  2001              MOVS     r0,#1                 ;92
00009a  bdf0              POP      {r4-r7,pc}
                  |L1.156|
00009c  7904              LDRB     r4,[r0,#4]            ;84
00009e  434c              MULS     r4,r1,r4              ;84
0000a0  801c              STRH     r4,[r3,#0]            ;84
0000a2  e7f5              B        |L1.144|
                  |L1.164|
0000a4  7840              LDRB     r0,[r0,#1]            ;89
0000a6  7010              STRB     r0,[r2,#0]            ;89
0000a8  e7f6              B        |L1.152|
                  |L1.170|
0000aa  1b74              SUBS     r4,r6,r5              ;101
0000ac  eb0474d4          ADD      r4,r4,r4,LSR #31      ;101
0000b0  eb050464          ADD      r4,r5,r4,ASR #1       ;101
0000b4  b2e4              UXTB     r4,r4                 ;101
0000b6  f81c7004          LDRB     r7,[r12,r4]           ;102
0000ba  42b9              CMP      r1,r7                 ;103
0000bc  d201              BCS      |L1.194|
0000be  4626              MOV      r6,r4                 ;104
0000c0  e003              B        |L1.202|
                  |L1.194|
0000c2  d906              BLS      |L1.210|
0000c4  f1040401          ADD      r4,r4,#1              ;106
0000c8  b2e5              UXTB     r5,r4                 ;106
                  |L1.202|
0000ca  42b5              CMP      r5,r6                 ;99
0000cc  d3ed              BCC      |L1.170|
0000ce  2000              MOVS     r0,#0                 ;121
0000d0  bdf0              POP      {r4-r7,pc}
                  |L1.210|
0000d2  b11b              CBZ      r3,|L1.220|
0000d4  6901              LDR      r1,[r0,#0x10]         ;112
0000d6  f8311014          LDRH     r1,[r1,r4,LSL #1]     ;112
0000da  8019              STRH     r1,[r3,#0]            ;112
                  |L1.220|
0000dc  68c1              LDR      r1,[r0,#0xc]          ;113
0000de  b119              CBZ      r1,|L1.232|
0000e0  5d08              LDRB     r0,[r1,r4]            ;116
0000e2  7010              STRB     r0,[r2,#0]            ;116
                  |L1.228|
0000e4  2001              MOVS     r0,#1                 ;117
0000e6  bdf0              POP      {r4-r7,pc}
                  |L1.232|
0000e8  7840              LDRB     r0,[r0,#1]            ;114
0000ea  7010              STRB     r0,[r2,#0]            ;114
0000ec  e7fa              B        |L1.228|
;;;123    
                          ENDP

                  LCD_GetStringWidth PROC
;;;127    //-------------------------------------------------------//
;;;128    uint8_t LCD_GetStringWidth(const tFont *font, char *string)
0000ee  e92d41f8          PUSH     {r3-r8,lr}
;;;129    {
0000f2  4607              MOV      r7,r0
0000f4  4688              MOV      r8,r1
;;;130        uint8_t length = 0;
0000f6  2500              MOVS     r5,#0
;;;131        uint8_t index = 0;
0000f8  2400              MOVS     r4,#0
;;;132        uint8_t charWidth;
;;;133        char c;
;;;134    
;;;135        while((c = string[index++]))
;;;136        {
;;;137            if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, 0))
0000fa  4e85              LDR      r6,|L1.784|
;;;138                length += charWidth + font->spacing;
0000fc  e00b              B        |L1.278|
                  |L1.254|
0000fe  2300              MOVS     r3,#0                 ;137
000100  466a              MOV      r2,sp                 ;137
000102  6830              LDR      r0,[r6,#0]            ;137  ; LCD_currentFont
000104  f7fffffe          BL       LCD_GetFontItem
000108  b128              CBZ      r0,|L1.278|
00010a  f89d1000          LDRB     r1,[sp,#0]
00010e  78f8              LDRB     r0,[r7,#3]
000110  4429              ADD      r1,r1,r5
000112  4408              ADD      r0,r0,r1
000114  b2c5              UXTB     r5,r0
                  |L1.278|
000116  4620              MOV      r0,r4                 ;135
000118  1c64              ADDS     r4,r4,#1              ;135
00011a  f8181000          LDRB     r1,[r8,r0]            ;135
00011e  b2e4              UXTB     r4,r4                 ;135
000120  2900              CMP      r1,#0                 ;135
000122  d1ec              BNE      |L1.254|
;;;139        }
;;;140    
;;;141        length -= font->spacing;
000124  78f8              LDRB     r0,[r7,#3]
000126  1a28              SUBS     r0,r5,r0
000128  b2c0              UXTB     r0,r0
;;;142        return length;
;;;143    }
00012a  e8bd81f8          POP      {r3-r8,pc}
;;;144    
                          ENDP

                  LCD_PrintString PROC
;;;151    //-------------------------------------------------------//
;;;152    void LCD_PrintString(char *str, uint8_t x, uint8_t y, uint8_t mode)
00012e  e92d47ff          PUSH     {r0-r10,lr}
;;;153    {
000132  4606              MOV      r6,r0
000134  460d              MOV      r5,r1
000136  4691              MOV      r9,r2
000138  461f              MOV      r7,r3
;;;154        uint8_t index = 0;
00013a  2400              MOVS     r4,#0
;;;155        uint8_t charWidth;
;;;156        uint16_t charOffset;
;;;157        char c;
;;;158    
;;;159        while((c = str[index++]))
;;;160        {
;;;161    
;;;162            if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, &charOffset))
00013c  f8df81d0          LDR      r8,|L1.784|
000140  e01d              B        |L1.382|
                  |L1.322|
000142  ab02              ADD      r3,sp,#8
000144  aa03              ADD      r2,sp,#0xc
000146  f8d80000          LDR      r0,[r8,#0]  ; LCD_currentFont
00014a  f7fffffe          BL       LCD_GetFontItem
00014e  b1b0              CBZ      r0,|L1.382|
;;;163            {
;;;164                LCD_DrawImage(&LCD_currentFont->data[charOffset], x, y, charWidth, LCD_currentFont->height, mode);
000150  f8d81000          LDR      r1,[r8,#0]  ; LCD_currentFont
000154  f89d300c          LDRB     r3,[sp,#0xc]
000158  464a              MOV      r2,r9
00015a  7808              LDRB     r0,[r1,#0]
00015c  e9cd0700          STRD     r0,r7,[sp,#0]
000160  6948              LDR      r0,[r1,#0x14]
000162  f8bd1008          LDRH     r1,[sp,#8]
000166  4408              ADD      r0,r0,r1
000168  4629              MOV      r1,r5
00016a  f7fffffe          BL       LCD_DrawImage
;;;165                x += charWidth + LCD_currentFont->spacing;
00016e  f8d80000          LDR      r0,[r8,#0]  ; LCD_currentFont
000172  f89d100c          LDRB     r1,[sp,#0xc]
000176  78c0              LDRB     r0,[r0,#3]
000178  4429              ADD      r1,r1,r5
00017a  4408              ADD      r0,r0,r1
00017c  b2c5              UXTB     r5,r0
                  |L1.382|
00017e  4620              MOV      r0,r4                 ;159
000180  1c64              ADDS     r4,r4,#1              ;159
000182  5c31              LDRB     r1,[r6,r0]            ;159
000184  b2e4              UXTB     r4,r4                 ;159
000186  2900              CMP      r1,#0                 ;159
000188  d1db              BNE      |L1.322|
                  |L1.394|
;;;166            }
;;;167        }
;;;168    }
00018a  e8bd87ff          POP      {r0-r10,pc}
;;;169    
                          ENDP

                  LCD_PrintStringAligned PROC
;;;178    //-------------------------------------------------------//
;;;179    void LCD_PrintStringAligned(char *str, rect_t *rect, uint8_t alignment, uint8_t mode)
00018e  e92d47ff          PUSH     {r0-r10,lr}
;;;180    {
000192  4680              MOV      r8,r0
000194  460d              MOV      r5,r1
000196  4692              MOV      r10,r2
000198  4699              MOV      r9,r3
;;;181        uint8_t index = 0;
00019a  2600              MOVS     r6,#0
;;;182        uint8_t charWidth;
;;;183        uint16_t charOffset;
;;;184        char c;
;;;185        int16_t x_aligned, y_aligned;
;;;186        int16_t strWidthPx;
;;;187    
;;;188        // Find horizontal position
;;;189        if (alignment & ALIGN_LEFT)
;;;190        {
;;;191            x_aligned = rect->x1;       // pretty simple - take left rect border as starting point
;;;192        }
;;;193        else
;;;194        {
;;;195            // We need to compute length of whole string in pixels
;;;196            strWidthPx = LCD_GetStringWidth(LCD_currentFont,str);
00019c  4f5c              LDR      r7,|L1.784|
00019e  ea5f70ca          LSLS     r0,r10,#31            ;189
0001a2  d001              BEQ      |L1.424|
0001a4  782c              LDRB     r4,[r5,#0]            ;191
0001a6  e015              B        |L1.468|
                  |L1.424|
0001a8  4641              MOV      r1,r8
0001aa  6838              LDR      r0,[r7,#0]  ; LCD_currentFont
0001ac  f7fffffe          BL       LCD_GetStringWidth
;;;197            if (alignment & ALIGN_RIGHT)
0001b0  ea5f718a          LSLS     r1,r10,#30
0001b4  d504              BPL      |L1.448|
;;;198                x_aligned = (int16_t)rect->x2 + 1 - strWidthPx;
0001b6  78a9              LDRB     r1,[r5,#2]
0001b8  1a08              SUBS     r0,r1,r0
0001ba  1c40              ADDS     r0,r0,#1
0001bc  b204              SXTH     r4,r0
0001be  e009              B        |L1.468|
                  |L1.448|
;;;199            else
;;;200                x_aligned = rect->x1 + ((int16_t)(rect->x2 - rect->x1 + 1) - strWidthPx) / 2;
0001c0  78aa              LDRB     r2,[r5,#2]
0001c2  7829              LDRB     r1,[r5,#0]
0001c4  1a52              SUBS     r2,r2,r1
0001c6  1a10              SUBS     r0,r2,r0
0001c8  1c40              ADDS     r0,r0,#1
0001ca  eb0070d0          ADD      r0,r0,r0,LSR #31
0001ce  eb010060          ADD      r0,r1,r0,ASR #1
0001d2  b204              SXTH     r4,r0
                  |L1.468|
;;;201        }
;;;202    
;;;203        // Find vertical position
;;;204        if (alignment & ALIGN_TOP)
0001d4  ea5f704a          LSLS     r0,r10,#29
0001d8  d501              BPL      |L1.478|
;;;205        {
;;;206            y_aligned = rect->y1;
0001da  786d              LDRB     r5,[r5,#1]
0001dc  e02f              B        |L1.574|
                  |L1.478|
;;;207        }
;;;208        else if (alignment & ALIGN_BOTTOM)
0001de  ea5f700a          LSLS     r0,r10,#28
0001e2  d505              BPL      |L1.496|
;;;209        {
;;;210            y_aligned = (int16_t)rect->y2 + 1 - LCD_currentFont->height;
0001e4  6839              LDR      r1,[r7,#0]  ; LCD_currentFont
0001e6  78e8              LDRB     r0,[r5,#3]
0001e8  7809              LDRB     r1,[r1,#0]
0001ea  1a45              SUBS     r5,r0,r1
0001ec  1c6d              ADDS     r5,r5,#1
0001ee  e026              B        |L1.574|
                  |L1.496|
;;;211        }
;;;212        else
;;;213        {
;;;214            y_aligned = rect->y1 + ((int16_t)(rect->y2 - rect->y1 + 1) - LCD_currentFont->height) / 2;
0001f0  683a              LDR      r2,[r7,#0]  ; LCD_currentFont
0001f2  78e8              LDRB     r0,[r5,#3]
0001f4  7869              LDRB     r1,[r5,#1]
0001f6  7812              LDRB     r2,[r2,#0]
0001f8  1a40              SUBS     r0,r0,r1
0001fa  1a80              SUBS     r0,r0,r2
0001fc  1c40              ADDS     r0,r0,#1
0001fe  eb0070d0          ADD      r0,r0,r0,LSR #31
000202  eb010560          ADD      r5,r1,r0,ASR #1
000206  e01a              B        |L1.574|
                  |L1.520|
;;;215        }
;;;216    
;;;217        // Now print string
;;;218        while((c = str[index++]))
;;;219        {
;;;220            if (LCD_GetFontItem(LCD_currentFont, c, &charWidth, &charOffset))
000208  ab02              ADD      r3,sp,#8
00020a  aa03              ADD      r2,sp,#0xc
00020c  6838              LDR      r0,[r7,#0]  ; LCD_currentFont
00020e  f7fffffe          BL       LCD_GetFontItem
000212  b1a0              CBZ      r0,|L1.574|
;;;221            {
;;;222                LCD_DrawImage(&LCD_currentFont->data[charOffset], x_aligned, y_aligned, charWidth, LCD_currentFont->height, mode);
000214  6839              LDR      r1,[r7,#0]  ; LCD_currentFont
000216  f89d300c          LDRB     r3,[sp,#0xc]
00021a  b2ea              UXTB     r2,r5
00021c  7808              LDRB     r0,[r1,#0]
00021e  e9cd0900          STRD     r0,r9,[sp,#0]
000222  6948              LDR      r0,[r1,#0x14]
000224  f8bd1008          LDRH     r1,[sp,#8]
000228  4408              ADD      r0,r0,r1
00022a  b2e1              UXTB     r1,r4
00022c  f7fffffe          BL       LCD_DrawImage
;;;223                x_aligned += charWidth + LCD_currentFont->spacing;
000230  6838              LDR      r0,[r7,#0]  ; LCD_currentFont
000232  f89d100c          LDRB     r1,[sp,#0xc]
000236  78c0              LDRB     r0,[r0,#3]
000238  4421              ADD      r1,r1,r4
00023a  4408              ADD      r0,r0,r1
00023c  b204              SXTH     r4,r0
                  |L1.574|
00023e  4630              MOV      r0,r6                 ;218
000240  1c76              ADDS     r6,r6,#1              ;218
000242  f8181000          LDRB     r1,[r8,r0]            ;218
000246  b2f6              UXTB     r6,r6                 ;218
000248  2900              CMP      r1,#0                 ;218
00024a  d1dd              BNE      |L1.520|
;;;224            }
;;;225        }
;;;226    }
00024c  e79d              B        |L1.394|
;;;227    
                          ENDP

                  LCD_DrawLine PROC
;;;228    
;;;229    void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t mode)
00024e  e92d5ff0          PUSH     {r4-r12,lr}
;;;230    {
000252  4604              MOV      r4,r0
000254  460d              MOV      r5,r1
000256  4693              MOV      r11,r2
000258  461e              MOV      r6,r3
;;;231        int16_t dy = 0;
;;;232        int16_t dx = 0;
;;;233        int16_t stepx = 0;
;;;234        int16_t stepy = 0;
;;;235        int16_t fraction = 0;
;;;236    
;;;237    //       if (x1>LCD_X_RES || x2>LCD_X_RES || y1>LCD_Y_RES || y2>LCD_Y_RES) return;
;;;238    
;;;239        dy = y2 - y1;
00025a  1b70              SUBS     r0,r6,r5
00025c  b201              SXTH     r1,r0
;;;240        dx = x2 - x1;
00025e  ebab0004          SUB      r0,r11,r4
000262  b200              SXTH     r0,r0
;;;241        if (dy < 0)
;;;242        {
;;;243            dy = -dy;
;;;244            stepy = -1;
000264  f04f39ff          MOV      r9,#0xffffffff
000268  2900              CMP      r1,#0                 ;241
00026a  da03              BGE      |L1.628|
00026c  4249              RSBS     r1,r1,#0              ;243
00026e  b209              SXTH     r1,r1                 ;243
000270  46ca              MOV      r10,r9
000272  e001              B        |L1.632|
                  |L1.628|
;;;245        }
;;;246        else stepy = 1;
000274  f04f0a01          MOV      r10,#1
                  |L1.632|
;;;247        if (dx < 0)
000278  2800              CMP      r0,#0
00027a  da02              BGE      |L1.642|
;;;248        {
;;;249            dx = -dx;
00027c  4240              RSBS     r0,r0,#0
00027e  b200              SXTH     r0,r0
;;;250            stepx = -1;
000280  e001              B        |L1.646|
                  |L1.642|
;;;251        }
;;;252        else stepx = 1;
000282  f04f0901          MOV      r9,#1
                  |L1.646|
;;;253        dy <<= 1;
000286  0049              LSLS     r1,r1,#1
000288  b20f              SXTH     r7,r1
;;;254        dx <<= 1;
00028a  0040              LSLS     r0,r0,#1
00028c  fa0ff880          SXTH     r8,r0
;;;255        LCD_PutPixel(x1,y1,mode);
000290  b2e9              UXTB     r1,r5
000292  b2e0              UXTB     r0,r4
000294  9a0a              LDR      r2,[sp,#0x28]
000296  f7fffffe          BL       LCD_PutPixel
;;;256        if (dx > dy)
00029a  45b8              CMP      r8,r7
00029c  dd19              BLE      |L1.722|
;;;257        {
;;;258            fraction = dy - (dx >> 1);
00029e  eba70068          SUB      r0,r7,r8,ASR #1
0002a2  b206              SXTH     r6,r0
;;;259            while (x1 != x2)
0002a4  e011              B        |L1.714|
                  |L1.678|
;;;260            {
;;;261                if (fraction >= 0)
0002a6  2e00              CMP      r6,#0
0002a8  db05              BLT      |L1.694|
;;;262                {
;;;263                    y1 += stepy;
0002aa  eb05000a          ADD      r0,r5,r10
0002ae  b205              SXTH     r5,r0
;;;264                    fraction -= dx;
0002b0  eba60008          SUB      r0,r6,r8
0002b4  b206              SXTH     r6,r0
                  |L1.694|
;;;265                }
;;;266                x1 += stepx;
0002b6  eb040009          ADD      r0,r4,r9
0002ba  b204              SXTH     r4,r0
;;;267                fraction += dy;
0002bc  19f0              ADDS     r0,r6,r7
0002be  b206              SXTH     r6,r0
;;;268                LCD_PutPixel(x1,y1,mode);
0002c0  b2e9              UXTB     r1,r5
0002c2  b2e0              UXTB     r0,r4
0002c4  9a0a              LDR      r2,[sp,#0x28]
0002c6  f7fffffe          BL       LCD_PutPixel
                  |L1.714|
0002ca  455c              CMP      r4,r11                ;259
0002cc  d1eb              BNE      |L1.678|
                  |L1.718|
;;;269            }
;;;270        }
;;;271        else
;;;272        {
;;;273            fraction = dx - (dy >> 1);
;;;274            while (y1 != y2)
;;;275            {
;;;276                if (fraction >= 0)
;;;277                {
;;;278                    x1 += stepx;
;;;279                    fraction -= dy;
;;;280                }
;;;281                y1 += stepy;
;;;282                fraction += dx;
;;;283                LCD_PutPixel(x1,y1,mode);
;;;284            }
;;;285        }
;;;286    }
0002ce  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.722|
0002d2  eba80067          SUB      r0,r8,r7,ASR #1       ;273
0002d6  fa0ffb80          SXTH     r11,r0                ;273
0002da  e015              B        |L1.776|
                  |L1.732|
0002dc  f1bb0f00          CMP      r11,#0                ;276
0002e0  db06              BLT      |L1.752|
0002e2  eb040009          ADD      r0,r4,r9              ;278
0002e6  b204              SXTH     r4,r0                 ;278
0002e8  ebab0007          SUB      r0,r11,r7             ;279
0002ec  fa0ffb80          SXTH     r11,r0                ;279
                  |L1.752|
0002f0  eb05000a          ADD      r0,r5,r10             ;281
0002f4  b205              SXTH     r5,r0                 ;281
0002f6  eb0b0008          ADD      r0,r11,r8             ;282
0002fa  fa0ffb80          SXTH     r11,r0                ;282
0002fe  b2e9              UXTB     r1,r5                 ;283
000300  b2e0              UXTB     r0,r4                 ;283
000302  9a0a              LDR      r2,[sp,#0x28]         ;283
000304  f7fffffe          BL       LCD_PutPixel
                  |L1.776|
000308  42b5              CMP      r5,r6                 ;274
00030a  d1e7              BNE      |L1.732|
00030c  e7df              B        |L1.718|
;;;287    
                          ENDP

00030e  0000              DCW      0x0000
                  |L1.784|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_currentFont
                          DCD      0x00000000
