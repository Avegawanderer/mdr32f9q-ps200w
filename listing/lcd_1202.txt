; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\lcd_1202.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\lcd_1202.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\lcd_1202.crf src\lcd_1202.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  LcdWrite PROC
;;;42     //==============================================================//
;;;43     void LcdWrite(uint8_t val, uint8_t mode)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;45     	uint16_t temp = val;
000006  4626              MOV      r6,r4
;;;46     	if (mode == DATA)		
000008  2d01              CMP      r5,#1
00000a  d101              BNE      |L1.16|
;;;47     		temp |= 0x0100;;	// set D/C bit (MSB of the packet)
00000c  f4467680          ORR      r6,r6,#0x100
                  |L1.16|
;;;48     	// Wait if TX FIFO is full
;;;49     	while( SSP_GetFlagStatus(MDR_SSP2,SSP_FLAG_TNF)!= SET );
000010  bf00              NOP      
                  |L1.18|
000012  2102              MOVS     r1,#2
000014  486b              LDR      r0,|L1.452|
000016  f7fffffe          BL       SSP_GetFlagStatus
00001a  2801              CMP      r0,#1
00001c  d1f9              BNE      |L1.18|
;;;50     	SSP_SendData (MDR_SSP2,temp);
00001e  4631              MOV      r1,r6
000020  4868              LDR      r0,|L1.452|
000022  f7fffffe          BL       SSP_SendData
;;;51     }
000026  bd70              POP      {r4-r6,pc}
;;;52     
                          ENDP

                  LcdDelayUs PROC
;;;56     //==============================================================//
;;;57     void LcdDelayUs(uint16_t us)
000028  b570              PUSH     {r4-r6,lr}
;;;58     {
00002a  4604              MOV      r4,r0
;;;59     	uint32_t time_delay = DWT_StartDelayUs(us);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       DWT_StartDelayUs
000032  4605              MOV      r5,r0
;;;60     	while(DWT_DelayInProgress(time_delay));
000034  bf00              NOP      
                  |L1.54|
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       DWT_DelayInProgress
00003c  2800              CMP      r0,#0
00003e  d1fa              BNE      |L1.54|
;;;61     }
000040  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP

                  LcdSelect PROC
;;;66     //==============================================================//
;;;67     void LcdSelect(uint8_t lcd)
000042  b510              PUSH     {r4,lr}
;;;68     {
000044  4604              MOV      r4,r0
;;;69     	(lcd==LCD0) ? PORT_SetBits(MDR_PORTE, 1<<LCD_SEL) : PORT_ResetBits(MDR_PORTE, 1<<LCD_SEL);
000046  2c01              CMP      r4,#1
000048  d104              BNE      |L1.84|
00004a  2104              MOVS     r1,#4
00004c  485e              LDR      r0,|L1.456|
00004e  f7fffffe          BL       PORT_SetBits
000052  e003              B        |L1.92|
                  |L1.84|
000054  2104              MOVS     r1,#4
000056  485c              LDR      r0,|L1.456|
000058  f7fffffe          BL       PORT_ResetBits
                  |L1.92|
;;;70     	LcdDelayUs(20);
00005c  2014              MOVS     r0,#0x14
00005e  f7fffffe          BL       LcdDelayUs
;;;71     }
000062  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  LcdSingleInit PROC
;;;76     //==============================================================//
;;;77     void LcdSingleInit(void)
000064  b510              PUSH     {r4,lr}
;;;78     {
;;;79     	uint16_t i;
;;;80     	// Software reset
;;;81     	LcdWrite(CMD_RESET,CMD);	
000066  2100              MOVS     r1,#0
000068  20e2              MOVS     r0,#0xe2
00006a  f7fffffe          BL       LcdWrite
;;;82     	//---- Ignored by china LCDs ----//
;;;83     	// Charge pump
;;;84     	LcdWrite(CMD_CHARGE_PUMP_MUL,CMD);
00006e  2100              MOVS     r1,#0
000070  203d              MOVS     r0,#0x3d
000072  f7fffffe          BL       LcdWrite
;;;85     	LcdWrite(0x01,CMD);					// A bit lower VLCD for 3.3V
000076  2100              MOVS     r1,#0
000078  2001              MOVS     r0,#1
00007a  f7fffffe          BL       LcdWrite
;;;86     	// Set VOP (contrast)
;;;87     	LcdWrite(CMD_SET_VOP,CMD);
00007e  2100              MOVS     r1,#0
000080  20e1              MOVS     r0,#0xe1
000082  f7fffffe          BL       LcdWrite
;;;88     	LcdWrite(0x00,CMD);					// default
000086  2100              MOVS     r1,#0
000088  4608              MOV      r0,r1
00008a  f7fffffe          BL       LcdWrite
;;;89     	// V0 - voltage range
;;;90     	LcdWrite(CMD_SET_VO_RANGE | V0R_8V12,CMD);	// default
00008e  2100              MOVS     r1,#0
000090  2024              MOVS     r0,#0x24
000092  f7fffffe          BL       LcdWrite
;;;91     	// Electronic volume
;;;92     	LcdWrite(CMD_SET_EV | 0x10,CMD);	// default
000096  2100              MOVS     r1,#0
000098  2090              MOVS     r0,#0x90
00009a  f7fffffe          BL       LcdWrite
;;;93     	// X-axis reverse
;;;94     	#ifdef HORIZONTAL_REVERSE	
;;;95     		LcdWrite(CMD_SELECT_SEGMENT_DIR | SEGMENT_REVERSE, CMD);
;;;96     	#else 
;;;97     		LcdWrite(CMD_SELECT_SEGMENT_DIR | SEGMENT_NORMAL, CMD);
00009e  2100              MOVS     r1,#0
0000a0  20a0              MOVS     r0,#0xa0
0000a2  f7fffffe          BL       LcdWrite
;;;98     	#endif
;;;99     	//------------------------------//
;;;100    	// Y-axis reverse
;;;101    	#ifdef VERTICAL_REVERSE	
;;;102    		LcdWrite(CMD_SELECT_COMMON_DIR | COMMON_REVERSE, CMD);
0000a6  2100              MOVS     r1,#0
0000a8  20c8              MOVS     r0,#0xc8
0000aa  f7fffffe          BL       LcdWrite
;;;103    	#else 
;;;104    		LcdWrite(CMD_SELECT_COMMON_DIR | COMMON_NORMAL, CMD);
;;;105    	#endif
;;;106    	// Display inversion
;;;107    	#ifdef LCD_INVERSE
;;;108    		LcdWrite(CMD_NORM_INVERSE | DISPLAY_INVERSE,CMD);	
;;;109    	#else
;;;110    		LcdWrite(CMD_NORM_INVERSE | DISPLAY_NORMAL,CMD);	
0000ae  2100              MOVS     r1,#0
0000b0  20a6              MOVS     r0,#0xa6
0000b2  f7fffffe          BL       LcdWrite
;;;111      #endif	
;;;112    	// Power saver OFF
;;;113    	LcdWrite(CMD_ALL_POINTS_ON_OFF | POINTS_NORMAL,CMD);	
0000b6  2100              MOVS     r1,#0
0000b8  20a4              MOVS     r0,#0xa4
0000ba  f7fffffe          BL       LcdWrite
;;;114    	// Internal voltage enable
;;;115    	LcdWrite(CMD_SET_POWER | ALL_ENABLE,CMD);
0000be  2100              MOVS     r1,#0
0000c0  202f              MOVS     r0,#0x2f
0000c2  f7fffffe          BL       LcdWrite
;;;116    	// Start line 0
;;;117    	LcdWrite(CMD_SET_START_LINE | 0x00, CMD);
0000c6  2100              MOVS     r1,#0
0000c8  2040              MOVS     r0,#0x40
0000ca  f7fffffe          BL       LcdWrite
;;;118    	
;;;119    	// Others deafults
;;;120    	LcdWrite(CMD_SET_ICON_MODE | ICON_MODE_DISABLE,CMD);
0000ce  2100              MOVS     r1,#0
0000d0  20f8              MOVS     r0,#0xf8
0000d2  f7fffffe          BL       LcdWrite
;;;121    	LcdWrite(CMD_LINES_NUMBER | 0x00,CMD);
0000d6  2100              MOVS     r1,#0
0000d8  20d0              MOVS     r0,#0xd0
0000da  f7fffffe          BL       LcdWrite
;;;122    	LcdWrite(CMD_SET_BIAS | 0x00,CMD);
0000de  2100              MOVS     r1,#0
0000e0  2030              MOVS     r0,#0x30
0000e2  f7fffffe          BL       LcdWrite
;;;123    	
;;;124    	// Add memory init code here
;;;125    	
;;;126    	// clear LCD
;;;127    	LcdSetRow(0);
0000e6  2100              MOVS     r1,#0
0000e8  20b0              MOVS     r0,#0xb0
0000ea  f7fffffe          BL       LcdWrite
;;;128      LcdSetCol(0);
0000ee  2100              MOVS     r1,#0
0000f0  2010              MOVS     r0,#0x10
0000f2  f7fffffe          BL       LcdWrite
0000f6  2100              MOVS     r1,#0
0000f8  4608              MOV      r0,r1
0000fa  f7fffffe          BL       LcdWrite
;;;129    	for(i=0; i<LCD_BUFFER_SIZE-1; i++)
0000fe  2400              MOVS     r4,#0
000100  e005              B        |L1.270|
                  |L1.258|
;;;130      	LcdWrite(0,DATA);
000102  2101              MOVS     r1,#1
000104  2000              MOVS     r0,#0
000106  f7fffffe          BL       LcdWrite
00010a  1c60              ADDS     r0,r4,#1              ;129
00010c  b284              UXTH     r4,r0                 ;129
                  |L1.270|
00010e  f240305f          MOV      r0,#0x35f             ;129
000112  4284              CMP      r4,r0                 ;129
000114  dbf5              BLT      |L1.258|
;;;131      
;;;132    	// Display ON
;;;133    	LcdWrite(CMD_ON_OFF | DISPLAY_ON,CMD);
000116  2100              MOVS     r1,#0
000118  20af              MOVS     r0,#0xaf
00011a  f7fffffe          BL       LcdWrite
;;;134    }
00011e  bd10              POP      {r4,pc}
;;;135    
                          ENDP

                  LcdInit PROC
;;;139    //==============================================================//
;;;140    void LcdInit(void)
000120  b510              PUSH     {r4,lr}
;;;141    {
;;;142      // Hardware reset
;;;143    	#ifdef USE_HARDWARE_RESET
;;;144    		lcd_clear_reset_line;
000122  2101              MOVS     r1,#1
000124  4828              LDR      r0,|L1.456|
000126  f7fffffe          BL       PORT_ResetBits
;;;145    		LcdDelayUs(10000);
00012a  f2427010          MOV      r0,#0x2710
00012e  f7fffffe          BL       LcdDelayUs
;;;146    		lcd_set_reset_line;
000132  2101              MOVS     r1,#1
000134  4824              LDR      r0,|L1.456|
000136  f7fffffe          BL       PORT_SetBits
;;;147    		LcdDelayUs(10000);
00013a  f2427010          MOV      r0,#0x2710
00013e  f7fffffe          BL       LcdDelayUs
;;;148    	#endif
;;;149      // Initialize LCD #0
;;;150    	LcdSelect(LCD0);
000142  2001              MOVS     r0,#1
000144  f7fffffe          BL       LcdSelect
;;;151    	LcdSingleInit();
000148  f7fffffe          BL       LcdSingleInit
;;;152    	// wait until all words are sent
;;;153    	while (!LCD_TX_DONE);	
00014c  bf00              NOP      
                  |L1.334|
00014e  2110              MOVS     r1,#0x10
000150  481c              LDR      r0,|L1.452|
000152  f7fffffe          BL       SSP_GetFlagStatus
000156  2800              CMP      r0,#0
000158  d1f9              BNE      |L1.334|
;;;154    	// Initialize LCD #1
;;;155    	LcdSelect(LCD1);
00015a  2002              MOVS     r0,#2
00015c  f7fffffe          BL       LcdSelect
;;;156    	LcdSingleInit();
000160  f7fffffe          BL       LcdSingleInit
;;;157    	// wait until all words are sent
;;;158    	while (!LCD_TX_DONE);	
000164  bf00              NOP      
                  |L1.358|
000166  2110              MOVS     r1,#0x10
000168  4816              LDR      r0,|L1.452|
00016a  f7fffffe          BL       SSP_GetFlagStatus
00016e  2800              CMP      r0,#0
000170  d1f9              BNE      |L1.358|
;;;159    }
000172  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  LcdUpdateByCore PROC
;;;169    //==============================================================//
;;;170    void LcdUpdateByCore(uint8_t display, uint16_t* lcd_buffer)
000174  b570              PUSH     {r4-r6,lr}
;;;171    {
000176  4606              MOV      r6,r0
000178  460d              MOV      r5,r1
;;;172    	uint16_t i;
;;;173    	
;;;174    	LcdSelect(display);
00017a  4630              MOV      r0,r6
00017c  f7fffffe          BL       LcdSelect
;;;175    	LcdSetRow(0);
000180  2100              MOVS     r1,#0
000182  20b0              MOVS     r0,#0xb0
000184  f7fffffe          BL       LcdWrite
;;;176    	LcdSetCol(0);
000188  2100              MOVS     r1,#0
00018a  2010              MOVS     r0,#0x10
00018c  f7fffffe          BL       LcdWrite
000190  2100              MOVS     r1,#0
000192  4608              MOV      r0,r1
000194  f7fffffe          BL       LcdWrite
;;;177    	for (i=0; i<LCD_BUFFER_SIZE; i++)
000198  2400              MOVS     r4,#0
00019a  e007              B        |L1.428|
                  |L1.412|
;;;178    		LcdWrite(lcd_buffer[i],DATA);
00019c  f8351014          LDRH     r1,[r5,r4,LSL #1]
0001a0  b2c8              UXTB     r0,r1
0001a2  2101              MOVS     r1,#1
0001a4  f7fffffe          BL       LcdWrite
0001a8  1c60              ADDS     r0,r4,#1              ;177
0001aa  b284              UXTH     r4,r0                 ;177
                  |L1.428|
0001ac  f5b47f58          CMP      r4,#0x360             ;177
0001b0  dbf4              BLT      |L1.412|
;;;179    	// wait until all words are sent
;;;180    	while (!LCD_TX_DONE);	
0001b2  bf00              NOP      
                  |L1.436|
0001b4  2110              MOVS     r1,#0x10
0001b6  4803              LDR      r0,|L1.452|
0001b8  f7fffffe          BL       SSP_GetFlagStatus
0001bc  2800              CMP      r0,#0
0001be  d1f9              BNE      |L1.436|
;;;181    }
0001c0  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

0001c2  0000              DCW      0x0000
                  |L1.452|
                          DCD      0x400a0000
                  |L1.456|
                          DCD      0x400c8000

;*** Start embedded assembler ***

#line 1 "src\\lcd_1202.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_lcd_1202_c_LcdWrite____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_lcd_1202_c_LcdWrite____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_lcd_1202_c_LcdWrite____REVSH|
#line 130
|__asm___10_lcd_1202_c_LcdWrite____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
