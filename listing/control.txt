; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\control.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\control.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\control.crf src\control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GetOverloadStatus PROC
;;;20     //-------------------------------------------------------//
;;;21     uint8_t GetOverloadStatus(void)
000000  481b              LDR      r0,|L1.112|
;;;22     {
;;;23     	return (MDR_PORTA->RXTX & (1<<OVERLD)) ? NORMAL : OVERLOAD;
000002  6800              LDR      r0,[r0,#0]
000004  f3400000          SBFX     r0,r0,#0,#1
000008  1c40              ADDS     r0,r0,#1
;;;24     }
00000a  4770              BX       lr
;;;25     
                          ENDP

                  GetACLineStatus PROC
;;;26     // 220V AC input line state
;;;27     uint8_t GetACLineStatus(void)
00000c  4819              LDR      r0,|L1.116|
;;;28     {
;;;29     	return (MDR_PORTB->RXTX & (1<<PG)) ? OFFLINE : ONLINE; 
00000e  6800              LDR      r0,[r0,#0]
000010  f3402080          SBFX     r0,r0,#10,#1
000014  1c40              ADDS     r0,r0,#1
;;;30     }
000016  4770              BX       lr
;;;31     
                          ENDP

                  SetConverterState PROC
;;;37     //-------------------------------------------------------//
;;;38     void SetConverterState(uint8_t newState)
000018  4a17              LDR      r2,|L1.120|
;;;39     {
;;;40     	if (newState == CONVERTER_ON)
00001a  2801              CMP      r0,#1
00001c  d003              BEQ      |L1.38|
;;;41     		PORT_SetBits(MDR_PORTF, 1<<EN);
;;;42     	else
;;;43     		PORT_ResetBits(MDR_PORTF, 1<<EN);
00001e  2104              MOVS     r1,#4
000020  4610              MOV      r0,r2
000022  f7ffbffe          B.W      PORT_ResetBits
                  |L1.38|
000026  2104              MOVS     r1,#4                 ;41
000028  4610              MOV      r0,r2                 ;41
00002a  f7ffbffe          B.W      PORT_SetBits
;;;44     }
;;;45     
                          ENDP

                  SetFeedbackChannel PROC
;;;48     //-------------------------------------------------------//
;;;49     void SetFeedbackChannel(uint8_t newChannel)
00002e  4a12              LDR      r2,|L1.120|
;;;50     {
;;;51     	if (newChannel == CHANNEL_5V)
000030  2801              CMP      r0,#1
000032  d003              BEQ      |L1.60|
;;;52     		PORT_SetBits(MDR_PORTF, 1<<STAB_SEL);
;;;53     	else
;;;54     		PORT_ResetBits(MDR_PORTF, 1<<STAB_SEL);
000034  2108              MOVS     r1,#8
000036  4610              MOV      r0,r2
000038  f7ffbffe          B.W      PORT_ResetBits
                  |L1.60|
00003c  2108              MOVS     r1,#8                 ;52
00003e  4610              MOV      r0,r2                 ;52
000040  f7ffbffe          B.W      PORT_SetBits
;;;55     }
;;;56     
                          ENDP

                  SetCurrentRange PROC
;;;59     //-------------------------------------------------------//
;;;60     void SetCurrentRange(uint8_t newRange)
000044  4a0a              LDR      r2,|L1.112|
;;;61     {
;;;62     	if (newRange == CURRENT_RANGE_HIGH)
000046  2801              CMP      r0,#1
000048  d003              BEQ      |L1.82|
;;;63     		PORT_SetBits(MDR_PORTA, 1<<CLIM_SEL);
;;;64     	else
;;;65     		PORT_ResetBits(MDR_PORTA, 1<<CLIM_SEL);
00004a  2102              MOVS     r1,#2
00004c  4610              MOV      r0,r2
00004e  f7ffbffe          B.W      PORT_ResetBits
                  |L1.82|
000052  2102              MOVS     r1,#2                 ;63
000054  4610              MOV      r0,r2                 ;63
000056  f7ffbffe          B.W      PORT_SetBits
;;;66     }
;;;67     
                          ENDP

                  SetOutputLoad PROC
;;;70     //-------------------------------------------------------//
;;;71     void SetOutputLoad(uint8_t newLoad)
00005a  4a08              LDR      r2,|L1.124|
;;;72     {
;;;73     	if (newLoad == LOAD_DISABLE)
00005c  2801              CMP      r0,#1
00005e  d003              BEQ      |L1.104|
;;;74     		PORT_SetBits(MDR_PORTE, 1<<LDIS);
;;;75     	else
;;;76     		PORT_ResetBits(MDR_PORTE, 1<<LDIS);	
000060  2140              MOVS     r1,#0x40
000062  4610              MOV      r0,r2
000064  f7ffbffe          B.W      PORT_ResetBits
                  |L1.104|
000068  2140              MOVS     r1,#0x40              ;74
00006a  4610              MOV      r0,r2                 ;74
00006c  f7ffbffe          B.W      PORT_SetBits
;;;77     }
;;;78     
                          ENDP

                  |L1.112|
                          DCD      0x400a8000
                  |L1.116|
                          DCD      0x400b0000
                  |L1.120|
                          DCD      0x400e8000
                  |L1.124|
                          DCD      0x400c8000

;*** Start embedded assembler ***

#line 1 "src\\control.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_8657b4f9____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_8657b4f9____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_8657b4f9____REVSH|
#line 130
|__asm___9_control_c_8657b4f9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
