L 1 "src\gui\guiGraphics\font_6x8_mono.c"
N/*****************************************************
N    Font generation template
N
NChipEnable.Ru
N Шрифт 6 на 8 пикселов.
N Повторяет шрифт Terminal Microsoft Windows.
N Изображение символа хранится в формате:
N Каждый байт описывает столбец изображения символа.
N Столбцы описываются слева-направо.
N Младший бит байта описывается верхнюю строку стобца,
N старший бит - нижнюю строку.
N*****************************************************/
N
N#include <stdint.h>
L 1 "C:\Keil\ARM\RV31\Inc\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 15 "src\gui\guiGraphics\font_6x8_mono.c" 2
N#include "guiFonts.h"
L 1 "src\gui\guiGraphics\guiFonts.h" 1
N#ifndef __GUI_FONTS_H_
N#define __GUI_FONTS_H_
N
N#include <stdint.h>
N
N/*
N    A font may have all chars present, or only some subset of chars.
N    If a font has contiguous set of chars, starting with some char code,
N    it is indicated by setting charTable to 0 and defining firstCharCode value.
N    Field charCount tells how many chars the font has.
N    Accessing some char with char code c in this case is trivial and looks like this:
N        c -= font.firstCharCode;
N        char_data = font.data[c * font.bytesPerChar];
N    If a font has non-contiguous set of chars, their char codes are specified in codeTable,
N    and offset relative to font.data is specified in offsetTable.
N
N    A font may be monospaced or variable-spaced.
N    If a font is monospaced, widthTable must be set to 0. All chars will have the same width = font.width.
N    If font is variable-spaced, widthTable is used - it contains width for every char.
N
N    If font has non-contiguous set of chars, or font is variable-spaced, font processing routines need to know,
N    where particular char image is located. This information provides offsetTable.
N
N    So, a font can be one of the following:
N        - monospaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     -
N            offsetTable:    -
N        - monospaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     -
N            offsetTable:    present
N        - variable-spaced, char subset is contiguous:
N            codeTable:      -
N            widthTable:     present
N            offsetTable:    present
N        - variable-spaced, char subset is non-contiguous:
N            codeTable:      present
N            widthTable:     present
N            offsetTable:    present
N
N        Font MUST have valid offsetTable when codeTable or widthTable are used.
N*/
N
N
N//---------------------------------------------//
N// Fonts typedefs
N
Ntypedef struct 
N{
N    uint8_t height;                     // font chars height
N    uint8_t width;                      // actual for monospaced, ignored for variable-width fonts
N    uint8_t charCount;                  // Total number of chars in the font
N    uint8_t spacing;                    // Additional space between chars
N    uint8_t bytesPerChar;               // Actual for monospaced, ignored for variable-length fonts
N    uint8_t firstCharCode;              // Used if there is no charTable - specifies first avaliable char code in the font.
N    const uint8_t *codeTable;           // Used if not all symbols are prensent in the font. Otherwise must be 0.
N    const uint8_t *widthTable;          // Used if font is not monospaced. Otherwise must be 0.
N    const uint16_t *offsetTable;        // Used with codeTable or widthTable
N    const uint8_t *data;                // Font data - contiguous byte array
N} tFont;
N
N
Nextern const tFont font_h11;
Nextern const tFont font_h32;
Nextern const tFont font_h10;
Nextern const tFont font_h10_bold;
Nextern const tFont font_6x8_mono;
Nextern const tFont font_h16;
N
N
N#endif
L 16 "src\gui\guiGraphics\font_6x8_mono.c" 2
N
N
Nstatic const uint8_t font_6x8_data [] =
N{
N    // 0x00 - пустое знакоместо.
N    //  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N      // 0x01 - лицо с улыбкой.
N      0x00, 0x3e, 0x45, 0x51, 0x45, 0x3e,
N
N      // 0x02 - лицо с улыбкой закрашенное.
N      0x00, 0x3e, 0x6b, 0x6f, 0x6b, 0x3e,
N
N      // 0x03 - червы (сердце).
N      0x00, 0x1c, 0x3e, 0x7c, 0x3e, 0x1c,
N
N      // 0x04 - бубны.
N      0x00, 0x18, 0x3c, 0x7e, 0x3c, 0x18,
N
N      // 0x05 - крести.
N      0x00, 0x30, 0x36, 0x7f, 0x36, 0x30,
N
N      // 0x06 - вини.
N      0x00, 0x18, 0x5c, 0x7e, 0x5c, 0x18,
N
N      // 0x07 - закрашенный круг по центру.
N      0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
N
N      // 0x08 - закрашенный круг по центру в инверсии.
N      0xff, 0xff, 0xe7, 0xe7, 0xff, 0xff,
N
N      // 0x09 - незакрашенный круг по центру.
N      0x00, 0x3c, 0x24, 0x24, 0x3c, 0x00,
N
N      // 0x0a - незакрашенный круг по центру в инверсии (кольцо).
N      0xff, 0xc3, 0xdb, 0xdb, 0xc3, 0xff,
N
N      // 0x0b - мужской символ (круг со стрелкой вверх).
N      0x00, 0x30, 0x48, 0x4a, 0x36, 0x0e,
N
N      // 0x0c - женский символ (круг с крестом внизу).
N      0x00, 0x06, 0x29, 0x79, 0x29, 0x06,
N
N      // 0x0d - нота I.
N      0x00, 0x60, 0x70, 0x3f, 0x02, 0x04,
N
N      // 0x0e - нота II.
N      0x00, 0x60, 0x7e, 0x0a, 0x35, 0x3f,
N
N      // 0x0f - солнце (круг с расходящимися лучами).
N      0x00, 0x2a, 0x1c, 0x36, 0x1c, 0x2a,
N
N      // 0x10 - толстая стрелка вправо.
N      0x00, 0x00, 0x7f, 0x3e, 0x1c, 0x08,
N
N      // 0x11 - толстая стрелка влево.
N      0x00, 0x08, 0x1c, 0x3e, 0x7f, 0x00,
N
N      // 0x12 - тонкая стрелка вверх-вниз.
N      0x00, 0x14, 0x36, 0x7f, 0x36, 0x14,
N
N      // 0x13 - два восклицательных знака.
N      0x00, 0x00, 0x5f, 0x00, 0x5f, 0x00,
N
N      // 0x14 - символ "Пи".
N      0x00, 0x06, 0x09, 0x7f, 0x01, 0x7f,
N
N      // 0x15 - символ параграфа.
N      0x00, 0x22, 0x4d, 0x55, 0x59, 0x22,
N
N      // 0x16 - широкое подчеркивание.
N      0x00, 0x60, 0x60, 0x60, 0x60, 0x00,
N
N      // 0x17 - тонкая стрелка вверх-вниз с подчеркиванием.
N      0x00, 0x14, 0xb6, 0xff, 0xb6, 0x14,
N
N      // 0x18 - тонкая стрелка вверх.
N      0x00, 0x04, 0x06, 0x7f, 0x06, 0x04,
N
N      // 0x19 - тонкая стрелка вниз.
N      0x00, 0x10, 0x30, 0x7f, 0x30, 0x10,
N
N      // 0x1a - тонкая стрелка вправо.
N      0x00, 0x08, 0x08, 0x3e, 0x1c, 0x08,
N
N      // 0x1b - тонкая стрелка влево.
N      0x00, 0x08, 0x1c, 0x3e, 0x08, 0x08,
N
N      // 0x1c - символ отступа.
N      0x00, 0x78, 0x40, 0x40, 0x40, 0x40,
N
N      // 0x1d - тонкая стрелка влево-вправо.
N      0x00, 0x08, 0x3e, 0x08, 0x3e, 0x08,
N
N      // 0x1e - толстая стрелка вверх.
N      0x00, 0x30, 0x3c, 0x3f, 0x3c, 0x30,
N
N      // 0x1f - толстая стрелка вниз.
N      0x00, 0x03, 0x0f, 0x3f, 0x0f, 0x03,
N
N      // 0x20 - пробел (пустое знакоместо).
N      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N      // 0x21 - восклицательный знак.
N      0x00, 0x00, 0x06, 0x5f, 0x06, 0x00,
N
N      // 0x22 - двойная кавычка.
N      0x00, 0x07, 0x03, 0x00, 0x07, 0x03,
N
N      // 0x23 - решетка.
N      0x00, 0x24, 0x7e, 0x24, 0x7e, 0x24,
N
N      // 0x24 - доллар.
N      0x00, 0x24, 0x2b, 0x6a, 0x12, 0x00,
N
N      // 0x25 - процент.
N      0x00, 0x63, 0x13, 0x08, 0x64, 0x63,
N
N      // 0x26 - амперсанд.
N      0x00, 0x36, 0x49, 0x56, 0x20, 0x50,
N
N      // 0x27 - апостроф.
N      0x00, 0x00, 0x07, 0x03, 0x00, 0x00,
N
N      // 0x28 - открывающая скобка.
N      0x00, 0x00, 0x3e, 0x41, 0x00, 0x00,
N
N      // 0x29 - закрывающая скобка.
N      0x00, 0x00, 0x41, 0x3e, 0x00, 0x00,
N
N      // 0x2a - звездочка (умножение).
N      0x00, 0x08, 0x3e, 0x1c, 0x3e, 0x08,
N
N      // 0x2b - плюс.
N      0x00, 0x08, 0x08, 0x3e, 0x08, 0x08,
N
N      // 0x2c - запятая.
N      0x00, 0x00, 0xe0, 0x60, 0x00, 0x00,
N
N      // 0x2d - тире.
N      0x00, 0x08, 0x08, 0x08, 0x08, 0x08,
N
N      // 0x2e - точка.
N      0x00, 0x00, 0x60, 0x60, 0x00, 0x00,
N
N      // 0x2f - слеш слева-направо ('/').
N      0x00, 0x20, 0x10, 0x08, 0x04, 0x02,
N
N      // 0x30 - '0'.
N      0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,
N
N      // 0x31 - '1'.
N      0x00, 0x00, 0x42, 0x7f, 0x40, 0x00,
N
N      // 0x32 - '2'.
N      0x00, 0x62, 0x51, 0x49, 0x49, 0x46,
N
N      // 0x33 - '3'.
N      0x00, 0x22, 0x49, 0x49, 0x49, 0x36,
N
N      // 0x34 - '4'.
N      0x00, 0x18, 0x14, 0x12, 0x7f, 0x10,
N
N      // 0x35 - '5'.
N      0x00, 0x2f, 0x49, 0x49, 0x49, 0x31,
N
N      // 0x36 - '6'.
N      0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30,
N
N      // 0x37 - '7'.
N      0x00, 0x01, 0x71, 0x09, 0x05, 0x03,
N
N      // 0x38 - '8'.
N      0x00, 0x36, 0x49, 0x49, 0x49, 0x36,
N
N      // 0x39 - '9'.
N      0x00, 0x06, 0x49, 0x49, 0x29, 0x1e,
N
N      // 0x3a - двоеточие.
N      0x00, 0x00, 0x6c, 0x6c, 0x00, 0x00,
N
N      // 0x3b - точка с запятой.
N      0x00, 0x00, 0xec, 0x6c, 0x00, 0x00,
N
N      // 0x3c - меньше.
N      0x00, 0x08, 0x14, 0x22, 0x41, 0x00,
N
N      // 0x3d - равно.
N      0x00, 0x24, 0x24, 0x24, 0x24, 0x24,
N
N      // 0x3e - больше.
N      0x00, 0x00, 0x41, 0x22, 0x14, 0x08,
N
N      // 0x3f - вопросительный знак.
N      0x00, 0x02, 0x01, 0x59, 0x09, 0x06,
N
N      // 0x40 - "собака" ('@').
N      0x00, 0x3e, 0x41, 0x5d, 0x55, 0x1e,
N
N      // 0x41 - 'A'.
N      0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,
N
N      // 0x42 - 'B'.
N      0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,
N
N      // 0x43 - 'C'.
N      0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,
N
N      // 0x44 - 'D'.
N      0x00, 0x7f, 0x41, 0x41, 0x41, 0x3e,
N
N      // 0x45 - 'E'.
N      0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,
N
N      // 0x46 - 'F'.
N      0x00, 0x7f, 0x09, 0x09, 0x09, 0x01,
N
N      // 0x47 - 'G'.
N      0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a,
N
N      // 0x48 - 'H'.
N      0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,
N
N      // 0x49 - 'I'.
N      0x00, 0x00, 0x41, 0x7f, 0x41, 0x00,
N
N      // 0x4a - 'J'.
N      0x00, 0x30, 0x40, 0x40, 0x40, 0x3f,
N
N      // 0x4b - 'K'.
N      0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,
N
N      // 0x4c - 'L'.
N      0x00, 0x7f, 0x40, 0x40, 0x40, 0x40,
N
N      // 0x4d - 'M'.
N      0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,
N
N      // 0x4e - 'N'.
N      0x00, 0x7f, 0x02, 0x04, 0x08, 0x7f,
N
N      // 0x4f - 'O'.
N      0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,
N
N      // 0x50 - 'P'.
N      0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,
N
N      // 0x51 - 'Q'.
N      0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e,
N
N      // 0x52 - 'R'.
N      0x00, 0x7f, 0x09, 0x09, 0x19, 0x66,
N
N      // 0x53 - 'S'.
N      0x00, 0x26, 0x49, 0x49, 0x49, 0x32,
N
N      // 0x54 - 'T'.
N      0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,
N
N      // 0x55 - 'U'.
N      0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f,
N
N      // 0x56 - 'V'.
N      0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f,
N
N      // 0x57 - 'W'.
N      0x00, 0x3f, 0x40, 0x3c, 0x40, 0x3f,
N
N      // 0x58 - 'X'.
N      0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
N
N      // 0x59 - 'Y'.
N      0x00, 0x07, 0x08, 0x70, 0x08, 0x07,
N
N      // 0x5a - 'Z'.
N      0x00, 0x71, 0x49, 0x45, 0x43, 0x00,
N
N      // 0x5b - '['.
N      0x00, 0x00, 0x7f, 0x41, 0x41, 0x00,
N
N      // 0x5c - '\'.
N      0x00, 0x02, 0x04, 0x08, 0x10, 0x20,
N
N      // 0x5d - ']'.
N      0x00, 0x00, 0x41, 0x41, 0x7f, 0x00,
N
N      // 0x5e - '^'.
N      0x00, 0x04, 0x02, 0x01, 0x02, 0x04,
N
N      // 0x5f - '_'.
N      0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
N
N      // 0x60 - обратный апостроф.
N      0x00, 0x00, 0x03, 0x07, 0x00, 0x00,
N
N      // 0x61 - 'a'.
N      0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
N
N      // 0x62 - 'b'.
N      0x00, 0x7f, 0x44, 0x44, 0x44, 0x38,
N
N      // 0x63 - 'c'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0x28,
N
N      // 0x64 - 'd'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0x7f,
N
N      // 0x65 - 'e'.
N      0x00, 0x38, 0x54, 0x54, 0x54, 0x08,
N
N      // 0x66 - 'f'.
N      0x00, 0x08, 0x7e, 0x09, 0x09, 0x00,
N
N      // 0x67 - 'g'.
N      0x00, 0x18, 0xa4, 0xa4, 0xa4, 0x7c,
N
N      // 0x68 - 'h'.
N      0x00, 0x7f, 0x04, 0x04, 0x78, 0x00,
N
N      // 0x69 - 'i'.
N      0x00, 0x00, 0x00, 0x7d, 0x40, 0x00,
N
N      // 0x6a - 'j'.
N      0x00, 0x40, 0x80, 0x84, 0x7d, 0x00,
N
N      // 0x6b - 'k'.
N      0x00, 0x7f, 0x10, 0x28, 0x44, 0x00,
N
N      // 0x6c - 'l'.
N      0x00, 0x00, 0x00, 0x7f, 0x40, 0x00,
N
N      // 0x6d - 'm'.
N      0x00, 0x7c, 0x04, 0x18, 0x04, 0x78,
N
N      // 0x6e - 'n'.
N      0x00, 0x7c, 0x04, 0x04, 0x78, 0x00,
N
N      // 0x6f - 'o'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0x38,
N
N      // 0x70 - 'p'.
N      0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,
N
N      // 0x71 - 'q'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0xfc,
N
N      // 0x72 - 'r'.
N      0x00, 0x44, 0x78, 0x44, 0x04, 0x08,
N
N      // 0x73 - 's'.
N      0x00, 0x08, 0x54, 0x54, 0x54, 0x20,
N
N      // 0x74 - 't'.
N      0x00, 0x04, 0x3e, 0x44, 0x24, 0x00,
N
N      // 0x75 - 'u'.
N      0x00, 0x3c, 0x40, 0x20, 0x7c, 0x00,
N
N      // 0x76 - 'v'.
N      0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c,
N
N      // 0x77 - 'w'.
N      0x00, 0x3c, 0x60, 0x30, 0x60, 0x3c,
N
N      // 0x78 - 'x'.
N      0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,
N
N      // 0x79 - 'y'.
N      0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,
N
N      // 0x7a - 'z'.
N      0x00, 0x64, 0x54, 0x54, 0x4c, 0x00,
N
N      // 0x7b - '{'.
N      0x00, 0x08, 0x3e, 0x41, 0x41, 0x00,
N
N      // 0x7c - '|'.
N      0x00, 0x00, 0x00, 0x77, 0x00, 0x00,
N
N      // 0x7d - '}'.
N      0x00, 0x00, 0x41, 0x41, 0x3e, 0x08,
N
N      // 0x7e - '~'.
N      0x00, 0x02, 0x01, 0x02, 0x01, 0x00,
N
N      // 0x7f - "домик".
N      0x00, 0x3c, 0x26, 0x23, 0x26, 0x3c,
N
N      // 0x80 - сетка из точек разреженная.
N      0x44, 0x11, 0x44, 0x11, 0x44, 0x11,
N
N      // 0x81 - сетка из точек густая.
N      0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55,
N
N      // 0x82 - сетка из черточек.
N      0xbb, 0xee, 0xbb, 0xee, 0xbb, 0xee,
N
N      // 0x83 - символы рамок псевдографики - вертикальная черта.
N      0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
N
N      // 0x84 - псевдографика - вертикальная черта с отводом по центру влево.
N      0x08, 0x08, 0x08, 0xff, 0x00, 0x00,
N
N      // 0x85 - псевдографика - вертикальная черта с двойным отводом по центру влево.
N      0x0a, 0x0a, 0x0a, 0xff, 0x00, 0x00,
N
N      // 0x86 - псевдографика - двойная вертикальная черта с отводом по центру влево.
N      0x08, 0xff, 0x00, 0xff, 0x00, 0x00,
N
N      // 0x87 - псевдографика - верхний правый угол с двойной вертикальной чертой.
N      0x08, 0xf8, 0x08, 0xf8, 0x00, 0x00,
N
N      // 0x88 - псевдографика - верхний правый угол с двойной горизонтальной чертой.
N      0x0a, 0x0a, 0x0a, 0xfe, 0x00, 0x00,
N
N      // 0x89 - псевдографика - двойная вертикальная черта с двойным отводом по центру влево.
N      0x0a, 0xfb, 0x00, 0xff, 0x00, 0x00,
N
N      // 0x8a - псевдографика - двойная вертикальная черта.
N      0x00, 0xff, 0x00, 0xff, 0x00, 0x00,
N
N      // 0x8b - псевдографика - двойной верхний правый угол.
N      0x0a, 0xfa, 0x02, 0xfe, 0x00, 0x00,
N
N      // 0x8c - псевдографика - двойной нижний правый угол.
N      0x0a, 0x0b, 0x08, 0x0f, 0x00, 0x00,
N
N      // 0x8d - псевдографика - нижний правый угол с двойной вертикальной чертой.
N      0x08, 0x0f, 0x08, 0x0f, 0x00, 0x00,
N
N      // 0x8e - псевдографика - нижний правый угол с двойной горизонтальной чертой.
N      0x0a, 0x0a, 0x0a, 0x0f, 0x00, 0x00,
N
N      // 0x8f - псевдографика - верхний правый угол.
N      0x08, 0x08, 0x08, 0xf8, 0x00, 0x00,
N
N      // 0x90 - псевдографика - нижний левый угол.
N      0x00, 0x00, 0x00, 0x0f, 0x08, 0x08,
N
N      // 0x91 - псевдографика - горизонтальная черта с отводом по центру вверх.
N      0x08, 0x08, 0x08, 0x0f, 0x08, 0x08,
N
N      // 0x92 - псевдографика - горизонтальная черта с отводом по центру вниз.
N      0x08, 0x08, 0x08, 0xf8, 0x08, 0x08,
N
N      // 0x93 - псевдографика - вертикальная черта с отводом по центру вправо.
N      0x00, 0x00, 0x00, 0xff, 0x08, 0x08,
N
N      // 0x94 - псевдографика - горизонтальная черта по центру.
N      0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
N
N      // 0x95 - псевдографика - перекрестие.
N      0x08, 0x08, 0x08, 0xff, 0x08, 0x08,
N
N      // 0x96 - псевдографика - вертикальная черта с двойным отводом по центру вправо.
N      0x00, 0x00, 0x00, 0xff, 0x0a, 0x0a,
N
N      // 0x97 - псевдографика - двойная вертикальная черта с отводом по центру вправо.
N      0x00, 0xff, 0x00, 0xff, 0x08, 0x08,
N
N      // 0x98 - псевдографика - двойной нижний левый угол.
N      0x00, 0x0f, 0x08, 0x0b, 0x0a, 0x0a,
N
N      // 0x99 - псевдографика - двойной верхний левый угол.
N      0x00, 0xfe, 0x02, 0xfa, 0x0a, 0x0a,
N
N      // 0x9a - псевдографика - двойная горизонтальная черта с двойным отводом по центру вверх.
N      0x0a, 0x0b, 0x08, 0x0b, 0x0a, 0x0a,
N
N      // 0x9b - псевдографика - двойная горизонтальная черта с двойным отводом по центру вниз.
N      0x0a, 0xfa, 0x02, 0xfa, 0x0a, 0x0a,
N
N      // 0x9c - псевдографика - двойная вертикальная черта с двойным отводом по центру вправо.
N      0x00, 0xff, 0x00, 0xfb, 0x0a, 0x0a,
N
N      // 0x9d - псевдографика - двойная горизонтальная черта по центру.
N      0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
N
N      // 0x9e - псевдографика - двойное перекрестие.
N      0x0a, 0xfb, 0x00, 0xfb, 0x0a, 0x0a,
N
N      // 0x9f - псевдографика - двойная горизонтальная черта с отводом по центру вверх.
N      0x0a, 0x0a, 0x0a, 0x0b, 0x0a, 0x0a,
N
N      // 0xa0 - псевдографика - горизонтальная черта с двойным отводом по центру вверх.
N      0x08, 0x0f, 0x08, 0x0f, 0x08, 0x08,
N
N      // 0xa1 - псевдографика - двойная горизонтальная черта с отводом по центру вниз.
N      0x0a, 0x0a, 0x0a, 0xfa, 0x0a, 0x0a,
N
N      // 0xa2 - псевдографика - горизонтальная черта с двойным отводом по центру вниз.
N      0x08, 0xf8, 0x08, 0xf8, 0x08, 0x08,
N
N      // 0xa3 - псевдографика - нижний левый угол, двойная вертикальная черта.
N      0x00, 0x0f, 0x08, 0x0f, 0x08, 0x08,
N
N      // 0xa4 - псевдографика - нижний левый угол, двойная горизонтальная черта.
N      0x00, 0x00, 0x00, 0x0f, 0x0a, 0x0a,
N
N      // 0xa5 - псевдографика - верхний левый угол, двойная горизонтальная черта.
N      0x00, 0x00, 0x00, 0xfe, 0x0a, 0x0a,
N
N      // 0xa6 - псевдографика - верхний левый угол, двойная вертикальная черта.
N      0x00, 0xf8, 0x08, 0xf8, 0x08, 0x08,
N
N      // 0xa7 - псевдографика - двойная вертикальная черта по центру с отводами вправо и влево.
N      0x08, 0xff, 0x08, 0xff, 0x08, 0x08,
N
N      // 0xa8 - 'Ё'.
N      0x00, 0x7e, 0x4b, 0x4a, 0x4b, 0x42,
N
N      // 0xa9 - псевдографика - двойная горизонтальная черта по центру с отводами вверх и вниз.
N      0x0a, 0x0a, 0x0a, 0xff, 0x0a, 0x0a,
N
N      // 0xaa - псевдографика - нижний правый угол.
N      0x08, 0x08, 0x08, 0x0f, 0x00, 0x00,
N
N      // 0xab - псевдографика - верхний левый угол.
N      0x00, 0x00, 0x00, 0xf8, 0x08, 0x08,
N
N      // 0xac - псевдографика - закрашенное знакоместо.
N      0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
N
N      // 0xad - псевдографика - закрашенная нижняя половина знакоместа.
N      0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
N
N      // 0xae - псевдографика - закрашенная левая половина знакоместа.
N      0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
N
N      // 0xaf - псевдографика - закрашенная правая половина знакоместа.
N      0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
N
N      // 0xb0 - псевдографика - закрашенная верхняя половина знакоместа.
N      0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
N
N      // 0xb1 - зеркальная 'Э'.
N      0x00, 0x3e, 0x49, 0x49, 0x41, 0x22,
N
N      // 0xb2 - зеркальная 'э'.
N      0x00, 0x38, 0x54, 0x54, 0x44, 0x28,
N
N      // 0xb3 - 'I' с двумя точками вверху.
N      0x00, 0x01, 0x40, 0x7e, 0x40, 0x01,
N
N      // 0xb4 - 'i' с двумя точками вверху.
N      0x00, 0x00, 0x01, 0x7c, 0x41, 0x00,
N
N      // 0xb5 - 'Y' с тильдой вверху ('~').
N      0x00, 0x27, 0x48, 0x4b, 0x48, 0x3f,
N
N      // 0xb6 - 'y' с тильдой вверху ('~').
N      0x00, 0x9d, 0xa2, 0x62, 0x3d, 0x00,
N
N      // 0xb7 - маленький кружок вверху.
N      0x00, 0x06, 0x09, 0x09, 0x06, 0x00,
N
N      // 0xb8 - 'ё'.
N      0x00, 0x38, 0x55, 0x54, 0x55, 0x08,
N
N      // 0xb9 - большой закрашенный круг по центру.
N      0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
N
N      // 0xba - маленький закрашенный круг по центру.
N      0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
N
N      // 0xbb - символ корня квадратного.
N      0x00, 0x30, 0x40, 0x3e, 0x02, 0x02,
N
N      // 0xbc - '№'.
N      0x7f, 0x06, 0x18, 0x7f, 0x13, 0x13,
N
N      // 0xbd - "солнце".
N      0x2a, 0x3e, 0x14, 0x14, 0x3e, 0x2a,
N
N      // 0xbe - закрашенный квадрат по центру.
N      0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00,
N
N      // 0xbf - пустое знакоместо.
N      0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
N
N      // 0xc0 - 'А'.
N      0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e,
N
N      // 0xc1 - 'Б'.
N      0x00, 0x7f, 0x49, 0x49, 0x49, 0x31,
N
N      // 0xc2 - 'В'.
N      0x00, 0x7f, 0x49, 0x49, 0x49, 0x36,
N
N      // 0xc3 - 'Г'.
N      0x00, 0x7f, 0x01, 0x01, 0x01, 0x01,
N
N      // 0xc4 - 'Д'.
N      0xc0, 0x7e, 0x41, 0x41, 0x7f, 0xc0,
N
N      // 0xc5 - 'Е'.
N      0x00, 0x7f, 0x49, 0x49, 0x49, 0x41,
N
N      // 0xc6 - 'Ж'.
N      0x00, 0x77, 0x08, 0x7f, 0x08, 0x77,
N
N      // 0xc7 - 'З'.
N      0x22, 0x49, 0x49, 0x49, 0x36, 0x00,
N
N      // 0xc8 - 'И'.
N      0x00, 0x7f, 0x20, 0x10, 0x08, 0x7f,
N
N      // 0xc9 - 'Й'.
N      0x00, 0x7e, 0x21, 0x11, 0x09, 0x7e,
N
N      // 0xca - 'К'.
N      0x00, 0x7f, 0x08, 0x14, 0x22, 0x41,
N
N      // 0xcb - 'Л'.
N      0x00, 0x40, 0x7e, 0x01, 0x01, 0x7f,
N
N      // 0xcc - 'М'.
N      0x00, 0x7f, 0x02, 0x04, 0x02, 0x7f,
N
N      // 0xcd - 'Н'.
N      0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f,
N
N      // 0xce - 'О'.
N      0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e,
N
N      // 0xcf - 'П'.
N      0x00, 0x7f, 0x01, 0x01, 0x01, 0x7f,
N
N      // 0xd0 - 'Р'.
N      0x00, 0x7f, 0x09, 0x09, 0x09, 0x06,
N
N      // 0xd1 - 'С'.
N      0x00, 0x3e, 0x41, 0x41, 0x41, 0x22,
N
N      // 0xd2 - 'Т'.
N      0x00, 0x01, 0x01, 0x7f, 0x01, 0x01,
N
N      // 0xd3 - 'У'.
N      0x00, 0x27, 0x48, 0x48, 0x48, 0x3f,
N
N      // 0xd4 - 'Ф'.
N      0x00, 0x0e, 0x11, 0x7f, 0x11, 0x0e,
N
N      // 0xd5 - 'Х'.
N      0x00, 0x63, 0x14, 0x08, 0x14, 0x63,
N
N      // 0xd6 - 'Ц'.
N      0x00, 0x7f, 0x40, 0x40, 0x7f, 0xc0,
N
N      // 0xd7 - 'Ч'.
N      0x00, 0x07, 0x08, 0x08, 0x08, 0x7f,
N
N      // 0xd8 - 'Ш'.
N      0x00, 0x7f, 0x40, 0x7f, 0x40, 0x7f,
N
N      // 0xd9 - 'Щ'.
N      0x00, 0x7f, 0x40, 0x7f, 0x40, 0xff,
N
N      // 0xda - 'Ъ'.
N      0x03, 0x01, 0x7f, 0x48, 0x48, 0x30,
N
N      // 0xdb - 'Ы'.
N      0x00, 0x7f, 0x48, 0x48, 0x30, 0x7f,
N
N      // 0xdc - 'Ь'.
N      0x00, 0x7f, 0x48, 0x48, 0x48, 0x30,
N
N      // 0xdd - 'Э'.
N      0x00, 0x22, 0x41, 0x49, 0x49, 0x3e,
N
N      // 0xde - 'Ю'.
N      0x00, 0x7f, 0x08, 0x3e, 0x41, 0x3e,
N
N      // 0xdf - 'Я'.
N      0x00, 0x66, 0x19, 0x09, 0x09, 0x7f,
N
N      // 0xe0 - 'а'.
N      0x00, 0x20, 0x54, 0x54, 0x54, 0x78,
N
N      // 0xe1 - 'б'.
N      0x00, 0x3c, 0x4a, 0x4a, 0x4a, 0x31,
N
N      // 0xe2 - 'в'.
N      0x00, 0x7c, 0x54, 0x54, 0x54, 0x28,
N
N      // 0xe3 - 'г'.
N      0x00, 0x7c, 0x04, 0x04, 0x0c, 0x00,
N
N      // 0xe4 - 'д'.
N      0xc0, 0x78, 0x44, 0x44, 0x7c, 0xc0,
N
N      // 0xe5 - 'е'.
N      0x00, 0x38, 0x54, 0x54, 0x54, 0x08,
N
N      // 0xe6 - 'ж'.
N      0x00, 0x6c, 0x10, 0x7c, 0x10, 0x6c,
N
N      // 0xe7 - 'з'.
N      0x00, 0x28, 0x44, 0x54, 0x54, 0x28,
N
N      // 0xe8 - 'и'.
N      0x00, 0x7c, 0x20, 0x10, 0x08, 0x7c,
N
N      // 0xe9 - 'й'.
N      0x00, 0x7c, 0x20, 0x12, 0x0a, 0x7c,
N
N      // 0xea - 'к'.
N      0x00, 0x7c, 0x10, 0x28, 0x44, 0x00,
N
N      // 0xeb - 'л'.
N      0x40, 0x38, 0x04, 0x04, 0x7c, 0x00,
N
N      // 0xec - 'м'.
N      0x00, 0x7c, 0x08, 0x10, 0x08, 0x7c,
N
N      // 0xed - 'н'.
N      0x00, 0x7c, 0x10, 0x10, 0x10, 0x7c,
N
N      // 0xee - 'о'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0x38,
N
N      // 0xef - 'п'.
N      0x00, 0x7c, 0x04, 0x04, 0x04, 0x7c,
N
N      // 0xf0 - 'р'.
N      0x00, 0xfc, 0x44, 0x44, 0x44, 0x38,
N
N      // 0xf1 - 'с'.
N      0x00, 0x38, 0x44, 0x44, 0x44, 0x28,
N
N      // 0xf2 - 'т'.
N      0x00, 0x04, 0x04, 0x7c, 0x04, 0x04,
N
N      // 0xf3 - 'у'.
N      0x00, 0x9c, 0xa0, 0x60, 0x3c, 0x00,
N
N      // 0xf4 - 'ф'.
N      0x00, 0x18, 0x24, 0x7c, 0x24, 0x18,
N
N      // 0xf5 - 'х'.
N      0x00, 0x6c, 0x10, 0x10, 0x6c, 0x00,
N
N      // 0xf6 - 'ц'.
N      0x00, 0x7c, 0x40, 0x40, 0x7c, 0xc0,
N
N      // 0xf7 - 'ч'.
N      0x00, 0x0c, 0x10, 0x10, 0x10, 0x7c,
N
N      // 0xf8 - 'ш'.
N      0x00, 0x7c, 0x40, 0x7c, 0x40, 0x7c,
N
N      // 0xf9 - 'щ'.
N      0x00, 0x7c, 0x40, 0x7c, 0x40, 0xfc,
N
N      // 0xfa - 'ъ'.
N      0x0c, 0x04, 0x7c, 0x50, 0x50, 0x20,
N
N      // 0xfb - 'ы'.
N      0x00, 0x7c, 0x50, 0x50, 0x20, 0x7c,
N
N      // 0xfc - 'ь'.
N      0x00, 0x7c, 0x50, 0x50, 0x50, 0x20,
N
N      // 0xfd - 'э'.
N      0x00, 0x28, 0x44, 0x54, 0x54, 0x38,
N
N      // 0xfe - 'ю'.
N      0x00, 0x7c, 0x10, 0x38, 0x44, 0x38,
N
N      // 0xff - 'я'.
N      0x00, 0x48, 0x34, 0x14, 0x14, 0x7c
N
N};
N
N
Nconst tFont font_6x8_mono =
N{
N    8,                      // font height
N    6,                      // font width
N    255,                    // total chars count
N    0,                      // spacing
N    6,                      // bytes per char
N    0x01,                   // first char code
N    0,                      // not using codeTable
N    0,                      // not using widthTable
N    0,                      // not using offsetTable
N    font_6x8_data           // font data
N};
N
