; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\guitop.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guitop.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guitop.crf src\guiTop.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  encodeGuiKey PROC
;;;41     // Encode physical buttons into GUI virtual keys
;;;42     static uint8_t encodeGuiKey(uint16_t btnCode)
000000  2804              CMP      r0,#4
;;;43     {
;;;44     	switch (btnCode)
000002  d011              BEQ      |L1.40|
000004  dc04              BGT      |L1.16|
000006  2801              CMP      r0,#1
000008  d008              BEQ      |L1.28|
00000a  2802              CMP      r0,#2
00000c  d104              BNE      |L1.24|
00000e  e009              B        |L1.36|
                  |L1.16|
000010  2808              CMP      r0,#8
000012  d005              BEQ      |L1.32|
000014  2810              CMP      r0,#0x10
000016  d009              BEQ      |L1.44|
                  |L1.24|
;;;45     	{
;;;46     		case BTN_ESC:
;;;47     			return GUI_KEY_ESC;
;;;48     		case BTN_OK:
;;;49     			return GUI_KEY_OK;
;;;50     		case BTN_LEFT:
;;;51     			return GUI_KEY_LEFT;
;;;52     		case BTN_RIGHT:
;;;53     			return GUI_KEY_RIGHT;
;;;54     		case BTN_ENCODER:
;;;55     			return GUI_KEY_ENCODER;
;;;56     		default: 
;;;57     			return 0;
000018  2000              MOVS     r0,#0
;;;58     	}
;;;59     }
00001a  4770              BX       lr
                  |L1.28|
00001c  2001              MOVS     r0,#1                 ;47
00001e  4770              BX       lr
                  |L1.32|
000020  2002              MOVS     r0,#2                 ;49
000022  4770              BX       lr
                  |L1.36|
000024  2003              MOVS     r0,#3                 ;51
000026  4770              BX       lr
                  |L1.40|
000028  2004              MOVS     r0,#4                 ;53
00002a  4770              BX       lr
                  |L1.44|
00002c  2007              MOVS     r0,#7                 ;55
00002e  4770              BX       lr
;;;60     
                          ENDP

                  encodeGuiKeyEvent PROC
;;;61     // Encode physical buttons events into GUI virtual events
;;;62     static uint8_t encodeGuiKeyEvent(uint16_t btnEvent)
000030  b2c0              UXTB     r0,r0
;;;63     {
;;;64     	return (uint8_t)btnEvent;
;;;65     }
000032  4770              BX       lr
;;;66     
                          ENDP

                  vTaskGUI PROC
;;;69     
;;;70     void vTaskGUI(void *pvParameters) 
000034  b51c              PUSH     {r2-r4,lr}
;;;71     {
;;;72     	gui_incoming_msg_t msg;
;;;73     	uint8_t guiKeyCode;
;;;74     	uint8_t guiKeyEvent;
;;;75     	int16_t encoder_delta;
;;;76     	
;;;77     	// Initialize
;;;78     	xQueueGUI = xQueueCreate( 10, sizeof( gui_incoming_msg_t ) );		// GUI queue can contain 10 elements of type gui_incoming_msg_t
000036  2200              MOVS     r2,#0
000038  2108              MOVS     r1,#8
00003a  200a              MOVS     r0,#0xa
00003c  f7fffffe          BL       xQueueGenericCreate
000040  4d53              LDR      r5,|L1.400|
000042  6028              STR      r0,[r5,#0]  ; xQueueGUI
;;;79     	if( xQueueGUI == 0 )
000044  b328              CBZ      r0,|L1.146|
;;;80     	{
;;;81     		// Queue was not created and must not be used.
;;;82     		while(1);
;;;83     	}
;;;84     	
;;;85     	// GUI initialize
;;;86     	guiMainForm_Initialize();
000046  f7fffffe          BL       guiMainForm_Initialize
;;;87         guiCore_Init((guiGenericWidget_t *)&guiMainForm);
00004a  4852              LDR      r0,|L1.404|
00004c  f7fffffe          BL       guiCore_Init
;;;88     	// TODO - add restoring values from EEPROM
;;;89     	
;;;90     	//setVoltageSetting(regulation_setting_p->set_voltage);
;;;91     	//setCurrentSetting(regulation_setting_p->set_current);
;;;92     	//setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
;;;93     	//setFeedbackChannelIndicator(regulation_setting_p->CHANNEL);
;;;94     	
;;;95     	while(1)
;;;96     	{
;;;97     		xQueueReceive(xQueueGUI, &msg, portMAX_DELAY);
;;;98     		switch (msg.type)
;;;99     		{
;;;100    			case GUI_TASK_REDRAW:
;;;101    				// Draw GUI
;;;102    				guiCore_RedrawAll();
;;;103    				// Flush buffer to LCDs
;;;104    				LcdUpdateBothByCore(lcdBuffer);
;;;105    				break;
;;;106    			case GUI_TASK_PROCESS_BUTTONS:
;;;107    				// msg.data[31:16] = key code, 	msg.data[15:0] = key event type
;;;108    				guiKeyCode = encodeGuiKey((uint16_t)msg.data);
;;;109    				if (guiKeyCode == 0)
;;;110    					break;
;;;111    				guiKeyEvent = encodeGuiKeyEvent((uint16_t)(msg.data >> 16));
;;;112    				if (guiKeyEvent == 0)
;;;113    					break;
;;;114    				guiCore_ProcessKeyEvent(guiKeyCode, guiKeyEvent);
;;;115    				break;
;;;116    			case GUI_TASK_PROCESS_ENCODER:
;;;117    				encoder_delta = (int16_t)msg.data;
;;;118    				if (encoder_delta)
;;;119    					guiCore_ProcessEncoderEvent(encoder_delta);
;;;120    				break;
;;;121    			case GUI_TASK_UPDATE_VOLTAGE_CURRENT:
;;;122    				setVoltageIndicator(voltage_adc);
;;;123    				setCurrentIndicator(current_adc);
;;;124    				setPowerIndicator(power_adc);
;;;125    				break;
;;;126    			case GUI_TASK_UPDATE_VOLTAGE_SETTING:
;;;127    				setVoltageSetting(regulation_setting_p->set_voltage);
000050  4c51              LDR      r4,|L1.408|
000052  f04f36ff          MOV      r6,#0xffffffff        ;97
                  |L1.86|
000056  2300              MOVS     r3,#0                 ;97
000058  4632              MOV      r2,r6                 ;97
00005a  4669              MOV      r1,sp                 ;97
00005c  6828              LDR      r0,[r5,#0]            ;97  ; xQueueGUI
00005e  f7fffffe          BL       xQueueGenericReceive
000062  9800              LDR      r0,[sp,#0]            ;98
000064  2811              CMP      r0,#0x11              ;98
000066  d054              BEQ      |L1.274|
000068  dc14              BGT      |L1.148|
00006a  b300              CBZ      r0,|L1.174|
00006c  2801              CMP      r0,#1                 ;98
00006e  d024              BEQ      |L1.186|
000070  2802              CMP      r0,#2                 ;98
000072  d034              BEQ      |L1.222|
000074  2810              CMP      r0,#0x10              ;98
000076  d1ee              BNE      |L1.86|
000078  4848              LDR      r0,|L1.412|
00007a  8800              LDRH     r0,[r0,#0]            ;122  ; voltage_adc
00007c  f7fffffe          BL       setVoltageIndicator
000080  4847              LDR      r0,|L1.416|
000082  8800              LDRH     r0,[r0,#0]            ;123  ; current_adc
000084  f7fffffe          BL       setCurrentIndicator
000088  4846              LDR      r0,|L1.420|
00008a  6800              LDR      r0,[r0,#0]            ;124  ; power_adc
00008c  f7fffffe          BL       setPowerIndicator
000090  e7e1              B        |L1.86|
                  |L1.146|
000092  e7fe              B        |L1.146|
                  |L1.148|
000094  2812              CMP      r0,#0x12              ;98
000096  d052              BEQ      |L1.318|
000098  2813              CMP      r0,#0x13              ;98
00009a  d02c              BEQ      |L1.246|
00009c  2814              CMP      r0,#0x14              ;98
00009e  d025              BEQ      |L1.236|
0000a0  2815              CMP      r0,#0x15              ;98
0000a2  d1d8              BNE      |L1.86|
;;;128    				break;
;;;129    			case GUI_TASK_UPDATE_CURRENT_SETTING:
;;;130    				setCurrentSetting(regulation_setting_p->set_current);
0000a4  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
0000a6  8a40              LDRH     r0,[r0,#0x12]
0000a8  f7fffffe          BL       setCurrentSetting
;;;131    				break;
0000ac  e7d3              B        |L1.86|
                  |L1.174|
0000ae  f7fffffe          BL       guiCore_RedrawAll
0000b2  483d              LDR      r0,|L1.424|
0000b4  f7fffffe          BL       LcdUpdateBothByCore
0000b8  e7cd              B        |L1.86|
                  |L1.186|
0000ba  9801              LDR      r0,[sp,#4]            ;108
0000bc  b280              UXTH     r0,r0                 ;108
0000be  f7fffffe          BL       encodeGuiKey
0000c2  4607              MOV      r7,r0                 ;108
0000c4  2f00              CMP      r7,#0                 ;109
0000c6  d0c6              BEQ      |L1.86|
0000c8  9801              LDR      r0,[sp,#4]            ;111
0000ca  0c00              LSRS     r0,r0,#16             ;111
0000cc  f7fffffe          BL       encodeGuiKeyEvent
0000d0  4601              MOV      r1,r0                 ;111
0000d2  2900              CMP      r1,#0                 ;112
0000d4  d0bf              BEQ      |L1.86|
0000d6  4638              MOV      r0,r7                 ;114
0000d8  f7fffffe          BL       guiCore_ProcessKeyEvent
0000dc  e7bb              B        |L1.86|
                  |L1.222|
0000de  9801              LDR      r0,[sp,#4]            ;117
0000e0  b200              SXTH     r0,r0                 ;117
0000e2  2800              CMP      r0,#0                 ;118
0000e4  d0b7              BEQ      |L1.86|
0000e6  f7fffffe          BL       guiCore_ProcessEncoderEvent
0000ea  e7b4              B        |L1.86|
                  |L1.236|
0000ec  6820              LDR      r0,[r4,#0]            ;127  ; regulation_setting_p
0000ee  8840              LDRH     r0,[r0,#2]            ;127
0000f0  f7fffffe          BL       setVoltageSetting
0000f4  e7af              B        |L1.86|
                  |L1.246|
;;;132    			case GUI_TASK_UPDATE_CURRENT_LIMIT:
;;;133    				setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
0000f6  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
0000f8  7c40              LDRB     r0,[r0,#0x11]
0000fa  2801              CMP      r0,#1
0000fc  d007              BEQ      |L1.270|
0000fe  2000              MOVS     r0,#0
                  |L1.256|
000100  f7fffffe          BL       setCurrentLimitIndicator
;;;134    				// CHECKME - possibly conveter module has to send GUI_TASK_UPDATE_CURRENT_SETTING message when updating limit
;;;135    				setCurrentSetting(regulation_setting_p->set_current);			
000104  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
000106  8a40              LDRH     r0,[r0,#0x12]
000108  f7fffffe          BL       setCurrentSetting
;;;136    				break;
00010c  e7a3              B        |L1.86|
                  |L1.270|
00010e  2001              MOVS     r0,#1                 ;133
000110  e7f6              B        |L1.256|
                  |L1.274|
;;;137    			case GUI_TASK_UPDATE_FEEDBACK_CHANNEL:
;;;138    				setFeedbackChannelIndicator(regulation_setting_p->CHANNEL);
000112  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
000114  7800              LDRB     r0,[r0,#0]
000116  f7fffffe          BL       setFeedbackChannelIndicator
;;;139    				// CHECKME - same as above
;;;140    				setVoltageSetting(regulation_setting_p->set_voltage);
00011a  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
00011c  8840              LDRH     r0,[r0,#2]
00011e  f7fffffe          BL       setVoltageSetting
;;;141    				setCurrentSetting(regulation_setting_p->set_current);
000122  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
000124  8a40              LDRH     r0,[r0,#0x12]
000126  f7fffffe          BL       setCurrentSetting
;;;142    				setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
00012a  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
00012c  7c40              LDRB     r0,[r0,#0x11]
00012e  2801              CMP      r0,#1
000130  d003              BEQ      |L1.314|
000132  2000              MOVS     r0,#0
                  |L1.308|
000134  f7fffffe          BL       setCurrentLimitIndicator
;;;143    				break;
000138  e78d              B        |L1.86|
                  |L1.314|
00013a  2001              MOVS     r0,#1                 ;142
00013c  e7fa              B        |L1.308|
                  |L1.318|
;;;144    			case GUI_TASK_UPDATE_TEMPERATURE_INDICATOR:
;;;145    				setTemperatureIndicator(converter_temp_celsius);
00013e  481b              LDR      r0,|L1.428|
000140  f9b00000          LDRSH    r0,[r0,#0]  ; converter_temp_celsius
000144  f7fffffe          BL       setTemperatureIndicator
;;;146    				break;
000148  e785              B        |L1.86|
;;;147    		}
;;;148    	}
;;;149    }
;;;150    
                          ENDP

                  applyGuiVoltageSetting PROC
;;;156    // Apply voltage setting from GUI
;;;157    void applyGuiVoltageSetting(uint16_t new_set_voltage)
00014a  4919              LDR      r1,|L1.432|
;;;158    {
;;;159    	converter_msg.type = CONVERTER_SET_VOLTAGE;
00014c  2207              MOVS     r2,#7
00014e  600a              STR      r2,[r1,#0]  ; converter_msg
;;;160    	converter_msg.data_a = new_set_voltage;
000150  6048              STR      r0,[r1,#4]  ; converter_msg
;;;161    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000152  4818              LDR      r0,|L1.436|
000154  2300              MOVS     r3,#0
000156  461a              MOV      r2,r3
000158  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00015a  f7ffbffe          B.W      xQueueGenericSend
;;;162    }
;;;163    
                          ENDP

                  applyGuiCurrentSetting PROC
;;;164    // Apply current setting from GUI
;;;165    void applyGuiCurrentSetting(uint16_t new_set_current)
00015e  4914              LDR      r1,|L1.432|
;;;166    {
;;;167    	converter_msg.type = CONVERTER_SET_CURRENT;
000160  2208              MOVS     r2,#8
000162  600a              STR      r2,[r1,#0]  ; converter_msg
;;;168    	converter_msg.data_a = new_set_current;
000164  6048              STR      r0,[r1,#4]  ; converter_msg
;;;169    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000166  4813              LDR      r0,|L1.436|
000168  2300              MOVS     r3,#0
00016a  461a              MOV      r2,r3
00016c  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00016e  f7ffbffe          B.W      xQueueGenericSend
;;;170    }
;;;171    
                          ENDP

                  applyGuiCurrentLimit PROC
;;;172    // Apply new selected feedback channel
;;;173    void applyGuiCurrentLimit(uint8_t new_current_limit)
000172  490f              LDR      r1,|L1.432|
;;;174    {
;;;175    	if (new_current_limit == GUI_CURRENT_LIM_HIGH)
000174  2801              CMP      r0,#1
000176  d008              BEQ      |L1.394|
;;;176    		converter_msg.type = SET_CURRENT_LIMIT_40A;
;;;177    	else
;;;178    		converter_msg.type = SET_CURRENT_LIMIT_20A;
000178  2005              MOVS     r0,#5
00017a  6008              STR      r0,[r1,#0]  ; converter_msg
                  |L1.380|
;;;179    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00017c  480d              LDR      r0,|L1.436|
00017e  2300              MOVS     r3,#0
000180  461a              MOV      r2,r3
000182  490b              LDR      r1,|L1.432|
000184  6800              LDR      r0,[r0,#0]  ; xQueueConverter
000186  f7ffbffe          B.W      xQueueGenericSend
                  |L1.394|
00018a  2006              MOVS     r0,#6                 ;176
00018c  6008              STR      r0,[r1,#0]            ;176  ; converter_msg
00018e  e7f5              B        |L1.380|
;;;180    }
;;;181    
                          ENDP

                  |L1.400|
                          DCD      ||.data||
                  |L1.404|
                          DCD      guiMainForm
                  |L1.408|
                          DCD      regulation_setting_p
                  |L1.412|
                          DCD      voltage_adc
                  |L1.416|
                          DCD      current_adc
                  |L1.420|
                          DCD      power_adc
                  |L1.424|
                          DCD      lcdBuffer
                  |L1.428|
                          DCD      converter_temp_celsius
                  |L1.432|
                          DCD      ||.bss||
                  |L1.436|
                          DCD      xQueueConverter

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  converter_msg
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueGUI
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\guiTop.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_guiTop_c_vTaskGUI____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_guiTop_c_vTaskGUI____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_guiTop_c_vTaskGUI____REVSH|
#line 130
|__asm___8_guiTop_c_vTaskGUI____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
