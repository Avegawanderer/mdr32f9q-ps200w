; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list -c --asm --interleave -o.\FLASH\guitop.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guitop.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guitop.crf src\guiTop.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTaskGUI PROC
;;;40     
;;;41     void vTaskGUI(void *pvParameters) 
000000  b508              PUSH     {r3,lr}
;;;42     {
;;;43     	uint32_t msg;
;;;44     	uint8_t button_spec;
;;;45     	
;;;46     	// Initialize
;;;47     	xQueueGUI = xQueueCreate( 10, sizeof( uint32_t ) );		// GUI queue can contain 10 elements of type uint32_t
000002  2200              MOVS     r2,#0
000004  2104              MOVS     r1,#4
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4e5d              LDR      r6,|L1.388|
00000e  6030              STR      r0,[r6,#0]  ; xQueueGUI
;;;48     	if( xQueueGUI == 0 )
000010  b370              CBZ      r0,|L1.112|
;;;49     	{
;;;50     		// Queue was not created and must not be used.
;;;51     		while(1);
;;;52     	}
;;;53     	
;;;54     	// GUI initialize
;;;55     	guiMainForm_Initialize();
000012  f7fffffe          BL       guiMainForm_Initialize
;;;56         guiCore_Init((guiGenericWidget_t *)&guiMainForm);
000016  485c              LDR      r0,|L1.392|
000018  f7fffffe          BL       guiCore_Init
;;;57     	// TODO - add restoring values from EEPROM
;;;58     	
;;;59     	//setVoltageSetting(regulation_setting_p->set_voltage);
;;;60     	//setCurrentSetting(regulation_setting_p->set_current);
;;;61     	//setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
;;;62     	//setFeedbackChannelIndicator(regulation_setting_p->CHANNEL);
;;;63     	
;;;64     	while(1)
;;;65     	{
;;;66     		xQueueReceive(xQueueGUI, &msg, portMAX_DELAY);
;;;67     		switch (msg)
;;;68     		{
;;;69     			case GUI_TASK_REDRAW:
;;;70     				// Draw GUI
;;;71     				guiCore_RedrawAll();
;;;72     				// Flush buffer to LCDs
;;;73     				LcdUpdateBothByCore(lcdBuffer);
;;;74     				break;
;;;75     			case GUI_TASK_PROCESS_BUTTONS:
;;;76     				// Serialize button events
;;;77     				button_spec = GUI_KEY_EVENT_DOWN;
;;;78     				if (buttons.action_down & BTN_ESC)
00001c  4d5b              LDR      r5,|L1.396|
;;;79     					guiCore_ProcessKeyEvent(GUI_KEY_ESC, button_spec);
;;;80     				if (buttons.action_down & BTN_OK)
;;;81     					guiCore_ProcessKeyEvent(GUI_KEY_OK, button_spec);
;;;82     				if (buttons.action_down & BTN_LEFT)
;;;83     					guiCore_ProcessKeyEvent(GUI_KEY_LEFT, button_spec);
;;;84     				if (buttons.action_down & BTN_RIGHT)
;;;85     					guiCore_ProcessKeyEvent(GUI_KEY_RIGHT, button_spec);
;;;86     				if (buttons.action_down & BTN_ENCODER)
;;;87     					guiCore_ProcessKeyEvent(GUI_KEY_ENCODER, button_spec);
;;;88     				// Encoder
;;;89     				if (encoder_delta)
00001e  4f5c              LDR      r7,|L1.400|
;;;90     					guiCore_ProcessEncoderEvent(encoder_delta);
;;;91     				break;
;;;92     			case GUI_TASK_UPDATE_VOLTAGE_CURRENT:
;;;93     				setVoltageIndicator(voltage_adc);
;;;94     				setCurrentIndicator(current_adc);
;;;95     				setPowerIndicator(power_adc);
;;;96     				break;
;;;97     			case GUI_TASK_UPDATE_VOLTAGE_SETTING:
;;;98     				setVoltageSetting(regulation_setting_p->set_voltage);
000020  4c5c              LDR      r4,|L1.404|
000022  f04f38ff          MOV      r8,#0xffffffff        ;66
                  |L1.38|
000026  2300              MOVS     r3,#0                 ;66
000028  4642              MOV      r2,r8                 ;66
00002a  4669              MOV      r1,sp                 ;66
00002c  6830              LDR      r0,[r6,#0]            ;66  ; xQueueGUI
00002e  f7fffffe          BL       xQueueGenericReceive
000032  9800              LDR      r0,[sp,#0]            ;67
000034  2812              CMP      r0,#0x12              ;67
000036  d07c              BEQ      |L1.306|
000038  dc1b              BGT      |L1.114|
00003a  b328              CBZ      r0,|L1.136|
00003c  2801              CMP      r0,#1                 ;67
00003e  d029              BEQ      |L1.148|
000040  2810              CMP      r0,#0x10              ;67
000042  d053              BEQ      |L1.236|
000044  2811              CMP      r0,#0x11              ;67
000046  d1ee              BNE      |L1.38|
;;;99     				break;
;;;100    			case GUI_TASK_UPDATE_CURRENT_SETTING:
;;;101    				setCurrentSetting(regulation_setting_p->set_current);
;;;102    				break;
;;;103    			case GUI_TASK_UPDATE_CURRENT_LIMIT:
;;;104    				setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
;;;105    				// CHECKME - possibly conveter module has to send GUI_TASK_UPDATE_CURRENT_SETTING message when updating limit
;;;106    				setCurrentSetting(regulation_setting_p->set_current);			
;;;107    				break;
;;;108    			case GUI_TASK_UPDATE_FEEDBACK_CHANNEL:
;;;109    				setFeedbackChannelIndicator(regulation_setting_p->CHANNEL);
000048  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
00004a  7800              LDRB     r0,[r0,#0]
00004c  f7fffffe          BL       setFeedbackChannelIndicator
;;;110    				// CHECKME - same as above
;;;111    				setVoltageSetting(regulation_setting_p->set_voltage);
000050  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
000052  8840              LDRH     r0,[r0,#2]
000054  f7fffffe          BL       setVoltageSetting
;;;112    				setCurrentSetting(regulation_setting_p->set_current);
000058  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
00005a  8a40              LDRH     r0,[r0,#0x12]
00005c  f7fffffe          BL       setCurrentSetting
;;;113    				setCurrentLimitIndicator( (regulation_setting_p->current_limit == CURRENT_LIM_HIGH) ? GUI_CURRENT_LIM_HIGH : GUI_CURRENT_LIM_LOW );
000060  6820              LDR      r0,[r4,#0]  ; regulation_setting_p
000062  7c40              LDRB     r0,[r0,#0x11]
000064  2801              CMP      r0,#1
000066  d062              BEQ      |L1.302|
000068  2000              MOVS     r0,#0
                  |L1.106|
00006a  f7fffffe          BL       setCurrentLimitIndicator
;;;114    				break;
00006e  e7da              B        |L1.38|
                  |L1.112|
000070  e7fe              B        |L1.112|
                  |L1.114|
000072  2813              CMP      r0,#0x13              ;67
000074  d04c              BEQ      |L1.272|
000076  2814              CMP      r0,#0x14              ;67
000078  d045              BEQ      |L1.262|
00007a  2815              CMP      r0,#0x15              ;67
00007c  d1d3              BNE      |L1.38|
00007e  6820              LDR      r0,[r4,#0]            ;101  ; regulation_setting_p
000080  8a40              LDRH     r0,[r0,#0x12]         ;101
000082  f7fffffe          BL       setCurrentSetting
000086  e7ce              B        |L1.38|
                  |L1.136|
000088  f7fffffe          BL       guiCore_RedrawAll
00008c  4842              LDR      r0,|L1.408|
00008e  f7fffffe          BL       LcdUpdateBothByCore
000092  e7c8              B        |L1.38|
                  |L1.148|
000094  f04f0901          MOV      r9,#1                 ;77
000098  8868              LDRH     r0,[r5,#2]            ;78  ; buttons
00009a  07c0              LSLS     r0,r0,#31             ;78
00009c  d003              BEQ      |L1.166|
00009e  4649              MOV      r1,r9                 ;79
0000a0  2001              MOVS     r0,#1                 ;79
0000a2  f7fffffe          BL       guiCore_ProcessKeyEvent
                  |L1.166|
0000a6  8868              LDRH     r0,[r5,#2]            ;80  ; buttons
0000a8  0700              LSLS     r0,r0,#28             ;80
0000aa  d503              BPL      |L1.180|
0000ac  4649              MOV      r1,r9                 ;81
0000ae  2002              MOVS     r0,#2                 ;81
0000b0  f7fffffe          BL       guiCore_ProcessKeyEvent
                  |L1.180|
0000b4  8868              LDRH     r0,[r5,#2]            ;82  ; buttons
0000b6  0780              LSLS     r0,r0,#30             ;82
0000b8  d503              BPL      |L1.194|
0000ba  4649              MOV      r1,r9                 ;83
0000bc  2003              MOVS     r0,#3                 ;83
0000be  f7fffffe          BL       guiCore_ProcessKeyEvent
                  |L1.194|
0000c2  8868              LDRH     r0,[r5,#2]            ;84  ; buttons
0000c4  0740              LSLS     r0,r0,#29             ;84
0000c6  d503              BPL      |L1.208|
0000c8  4649              MOV      r1,r9                 ;85
0000ca  2004              MOVS     r0,#4                 ;85
0000cc  f7fffffe          BL       guiCore_ProcessKeyEvent
                  |L1.208|
0000d0  8868              LDRH     r0,[r5,#2]            ;86  ; buttons
0000d2  06c0              LSLS     r0,r0,#27             ;86
0000d4  d503              BPL      |L1.222|
0000d6  4649              MOV      r1,r9                 ;87
0000d8  2007              MOVS     r0,#7                 ;87
0000da  f7fffffe          BL       guiCore_ProcessKeyEvent
                  |L1.222|
0000de  f9b70000          LDRSH    r0,[r7,#0]            ;89  ; encoder_delta
0000e2  2800              CMP      r0,#0                 ;89
0000e4  d09f              BEQ      |L1.38|
0000e6  f7fffffe          BL       guiCore_ProcessEncoderEvent
0000ea  e79c              B        |L1.38|
                  |L1.236|
0000ec  482b              LDR      r0,|L1.412|
0000ee  8800              LDRH     r0,[r0,#0]            ;93  ; voltage_adc
0000f0  f7fffffe          BL       setVoltageIndicator
0000f4  482a              LDR      r0,|L1.416|
0000f6  8800              LDRH     r0,[r0,#0]            ;94  ; current_adc
0000f8  f7fffffe          BL       setCurrentIndicator
0000fc  4829              LDR      r0,|L1.420|
0000fe  6800              LDR      r0,[r0,#0]            ;95  ; power_adc
000100  f7fffffe          BL       setPowerIndicator
000104  e78f              B        |L1.38|
                  |L1.262|
000106  6820              LDR      r0,[r4,#0]            ;98  ; regulation_setting_p
000108  8840              LDRH     r0,[r0,#2]            ;98
00010a  f7fffffe          BL       setVoltageSetting
00010e  e78a              B        |L1.38|
                  |L1.272|
000110  6820              LDR      r0,[r4,#0]            ;104  ; regulation_setting_p
000112  7c40              LDRB     r0,[r0,#0x11]         ;104
000114  2801              CMP      r0,#1                 ;104
000116  d008              BEQ      |L1.298|
000118  2000              MOVS     r0,#0                 ;104
                  |L1.282|
00011a  f7fffffe          BL       setCurrentLimitIndicator
00011e  6820              LDR      r0,[r4,#0]            ;106  ; regulation_setting_p
000120  8a40              LDRH     r0,[r0,#0x12]         ;106
000122  f7fffffe          BL       setCurrentSetting
000126  e77e              B        |L1.38|
000128  e003              B        |L1.306|
                  |L1.298|
00012a  2001              MOVS     r0,#1                 ;104
00012c  e7f5              B        |L1.282|
                  |L1.302|
00012e  2001              MOVS     r0,#1                 ;113
000130  e79b              B        |L1.106|
                  |L1.306|
;;;115    			case GUI_TASK_UPDATE_TEMPERATURE_INDICATOR:
;;;116    				setTemperatureIndicator(converter_temp_celsius);
000132  481d              LDR      r0,|L1.424|
000134  f9b00000          LDRSH    r0,[r0,#0]  ; converter_temp_celsius
000138  f7fffffe          BL       setTemperatureIndicator
;;;117    				break;
00013c  e773              B        |L1.38|
;;;118    		}
;;;119    	}
;;;120    }
;;;121    
                          ENDP

                  applyGuiVoltageSetting PROC
;;;127    // Apply voltage setting from GUI
;;;128    void applyGuiVoltageSetting(uint16_t new_set_voltage)
00013e  491b              LDR      r1,|L1.428|
;;;129    {
;;;130    	converter_msg.type = CONVERTER_SET_VOLTAGE;
000140  2207              MOVS     r2,#7
000142  600a              STR      r2,[r1,#0]  ; converter_msg
;;;131    	converter_msg.data_a = new_set_voltage;
000144  6048              STR      r0,[r1,#4]  ; converter_msg
;;;132    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000146  481a              LDR      r0,|L1.432|
000148  2300              MOVS     r3,#0
00014a  461a              MOV      r2,r3
00014c  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00014e  f7ffbffe          B.W      xQueueGenericSend
;;;133    }
;;;134    
                          ENDP

                  applyGuiCurrentSetting PROC
;;;135    // Apply current setting from GUI
;;;136    void applyGuiCurrentSetting(uint16_t new_set_current)
000152  4916              LDR      r1,|L1.428|
;;;137    {
;;;138    	converter_msg.type = CONVERTER_SET_CURRENT;
000154  2208              MOVS     r2,#8
000156  600a              STR      r2,[r1,#0]  ; converter_msg
;;;139    	converter_msg.data_a = new_set_current;
000158  6048              STR      r0,[r1,#4]  ; converter_msg
;;;140    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
00015a  4815              LDR      r0,|L1.432|
00015c  2300              MOVS     r3,#0
00015e  461a              MOV      r2,r3
000160  6800              LDR      r0,[r0,#0]  ; xQueueConverter
000162  f7ffbffe          B.W      xQueueGenericSend
;;;141    }
;;;142    
                          ENDP

                  applyGuiCurrentLimit PROC
;;;143    // Apply new selected feedback channel
;;;144    void applyGuiCurrentLimit(uint8_t new_current_limit)
000166  4911              LDR      r1,|L1.428|
;;;145    {
;;;146    	if (new_current_limit == GUI_CURRENT_LIM_HIGH)
000168  2801              CMP      r0,#1
00016a  d008              BEQ      |L1.382|
;;;147    		converter_msg.type = SET_CURRENT_LIMIT_40A;
;;;148    	else
;;;149    		converter_msg.type = SET_CURRENT_LIMIT_20A;
00016c  2005              MOVS     r0,#5
00016e  6008              STR      r0,[r1,#0]  ; converter_msg
                  |L1.368|
;;;150    	xQueueSendToBack(xQueueConverter, &converter_msg, 0);
000170  480f              LDR      r0,|L1.432|
000172  2300              MOVS     r3,#0
000174  461a              MOV      r2,r3
000176  490d              LDR      r1,|L1.428|
000178  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00017a  f7ffbffe          B.W      xQueueGenericSend
                  |L1.382|
00017e  2006              MOVS     r0,#6                 ;147
000180  6008              STR      r0,[r1,#0]            ;147  ; converter_msg
000182  e7f5              B        |L1.368|
;;;151    }
;;;152    
                          ENDP

                  |L1.388|
                          DCD      ||.data||
                  |L1.392|
                          DCD      guiMainForm
                  |L1.396|
                          DCD      buttons
                  |L1.400|
                          DCD      encoder_delta
                  |L1.404|
                          DCD      regulation_setting_p
                  |L1.408|
                          DCD      lcdBuffer
                  |L1.412|
                          DCD      voltage_adc
                  |L1.416|
                          DCD      current_adc
                  |L1.420|
                          DCD      power_adc
                  |L1.424|
                          DCD      converter_temp_celsius
                  |L1.428|
                          DCD      ||.bss||
                  |L1.432|
                          DCD      xQueueConverter

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  converter_msg
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  xQueueGUI
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\guiTop.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_guiTop_c_vTaskGUI____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_guiTop_c_vTaskGUI____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_guiTop_c_vTaskGUI____REVSH|
#line 130
|__asm___8_guiTop_c_vTaskGUI____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
