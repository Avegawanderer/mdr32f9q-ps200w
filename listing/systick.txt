; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\systick.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\systick.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\systick.crf src\systick.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vApplicationTickHook PROC
;;;39     //-----------------------------------------------------------------//
;;;40     void vApplicationTickHook( void )
000000  b57c              PUSH     {r2-r6,lr}
;;;41     {
;;;42     	static uint32_t tmr_gui_update = GUI_UPDATE_INTERVAL;
;;;43     	static uint32_t tmr_converter_tick = CONVERTER_TICK_INTERVAL;
;;;44     	static uint32_t tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
;;;45     	static uint32_t tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
;;;46     	portBASE_TYPE xHigherPriorityTaskWokenByPost;
;;;47     	uint32_t msg;
;;;48     	// Time profiling
;;;49     	uint32_t time_mark = DWT_Get();
000002  f7fffffe          BL       DWT_Get
000006  4605              MOV      r5,r0
;;;50     	uint32_t ticks_count;
;;;51     		
;;;52     	// We have not woken a task at the start of the ISR.
;;;53     	xHigherPriorityTaskWokenByPost = pdFALSE;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;54     	
;;;55     	if (enable_task_ticks)
00000c  4c3c              LDR      r4,|L1.256|
00000e  7821              LDRB     r1,[r4,#0]  ; enable_task_ticks
000010  b3a1              CBZ      r1,|L1.124|
;;;56     	{
;;;57     		if (--tmr_gui_update == 0)
000012  6861              LDR      r1,[r4,#4]  ; tmr_gui_update
000014  1e49              SUBS     r1,r1,#1
000016  6061              STR      r1,[r4,#4]  ; tmr_gui_update
000018  d109              BNE      |L1.46|
;;;58     		{
;;;59     			msg = GUI_TASK_REDRAW;
00001a  9000              STR      r0,[sp,#0]
;;;60     			xQueueSendToBackFromISR(xQueueGUI, &msg, &xHigherPriorityTaskWokenByPost);
00001c  4839              LDR      r0,|L1.260|
00001e  2300              MOVS     r3,#0
000020  aa01              ADD      r2,sp,#4
000022  4669              MOV      r1,sp
000024  6800              LDR      r0,[r0,#0]  ; xQueueGUI
000026  f7fffffe          BL       xQueueGenericSendFromISR
;;;61     			tmr_gui_update = GUI_UPDATE_INTERVAL;
00002a  2019              MOVS     r0,#0x19
00002c  6060              STR      r0,[r4,#4]  ; tmr_gui_update
                  |L1.46|
;;;62     		}
;;;63     		
;;;64     		if (--tmr_converter_tick == 0)
00002e  68a1              LDR      r1,[r4,#8]  ; tmr_converter_tick
000030  1e49              SUBS     r1,r1,#1
000032  60a1              STR      r1,[r4,#8]  ; tmr_converter_tick
000034  d108              BNE      |L1.72|
;;;65     		{
;;;66     			//msg = CONVERTER_TICK;
;;;67     			xQueueSendToBackFromISR(xQueueConverter, &converter_tick_message, &xHigherPriorityTaskWokenByPost);
000036  4835              LDR      r0,|L1.268|
000038  2300              MOVS     r3,#0
00003a  aa01              ADD      r2,sp,#4
00003c  4932              LDR      r1,|L1.264|
00003e  6800              LDR      r0,[r0,#0]  ; xQueueConverter
000040  f7fffffe          BL       xQueueGenericSendFromISR
;;;68     			tmr_converter_tick = CONVERTER_TICK_INTERVAL;
000044  2032              MOVS     r0,#0x32
000046  60a0              STR      r0,[r4,#8]  ; tmr_converter_tick
                  |L1.72|
;;;69     		}
;;;70     		
;;;71     		if (--tmr_dispatcher_tick == 0)
000048  68e1              LDR      r1,[r4,#0xc]  ; tmr_dispatcher_tick
00004a  1e49              SUBS     r1,r1,#1
00004c  60e1              STR      r1,[r4,#0xc]  ; tmr_dispatcher_tick
00004e  d108              BNE      |L1.98|
;;;72     		{
;;;73     			xQueueSendToBackFromISR(xQueueDispatcher, &dispatcher_tick_msg, &xHigherPriorityTaskWokenByPost);
000050  4830              LDR      r0,|L1.276|
000052  2300              MOVS     r3,#0
000054  aa01              ADD      r2,sp,#4
000056  492e              LDR      r1,|L1.272|
000058  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
00005a  f7fffffe          BL       xQueueGenericSendFromISR
;;;74     			tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
00005e  200a              MOVS     r0,#0xa
000060  60e0              STR      r0,[r4,#0xc]  ; tmr_dispatcher_tick
                  |L1.98|
;;;75     		}
;;;76     		
;;;77     		if (--tmr_sound_driver_tick == 0)
000062  6921              LDR      r1,[r4,#0x10]  ; tmr_sound_driver_tick
000064  1e49              SUBS     r1,r1,#1
000066  6121              STR      r1,[r4,#0x10]  ; tmr_sound_driver_tick
000068  d108              BNE      |L1.124|
;;;78     		{
;;;79     			xQueueSendToBackFromISR(xQueueSound, &sound_driver_sync_msg, &xHigherPriorityTaskWokenByPost);
00006a  482c              LDR      r0,|L1.284|
00006c  2300              MOVS     r3,#0
00006e  aa01              ADD      r2,sp,#4
000070  4929              LDR      r1,|L1.280|
000072  6800              LDR      r0,[r0,#0]  ; xQueueSound
000074  f7fffffe          BL       xQueueGenericSendFromISR
;;;80     			tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
000078  2005              MOVS     r0,#5
00007a  6120              STR      r0,[r4,#0x10]  ; tmr_sound_driver_tick
                  |L1.124|
;;;81     		}
;;;82     	}
;;;83     	
;;;84     	// Force context switching if required
;;;85     	// CHECKME
;;;86     	portEND_SWITCHING_ISR(xHigherPriorityTaskWokenByPost);
00007c  9801              LDR      r0,[sp,#4]
00007e  b118              CBZ      r0,|L1.136|
000080  4927              LDR      r1,|L1.288|
000082  f04f5080          MOV      r0,#0x10000000
000086  6008              STR      r0,[r1,#0]
                  |L1.136|
;;;87     	
;;;88     	// Update time
;;;89     	ticks_count = DWT_GetDeltaForNow(time_mark);
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       DWT_GetDeltaForNow
;;;90     	if (ticks_count > time_profile.max_ticks_in_Systick_hook)
00008e  491c              LDR      r1,|L1.256|
000090  3114              ADDS     r1,r1,#0x14
000092  680a              LDR      r2,[r1,#0]  ; time_profile
000094  4282              CMP      r2,r0
000096  d200              BCS      |L1.154|
;;;91     		time_profile.max_ticks_in_Systick_hook = ticks_count;
000098  6008              STR      r0,[r1,#0]  ; time_profile
                  |L1.154|
;;;92     }
00009a  bd7c              POP      {r2-r6,pc}
;;;93     
                          ENDP

                  Timer2_IRQHandler PROC
;;;146    //---------------------------------------------//
;;;147    void Timer2_IRQHandler(void) 
00009c  b510              PUSH     {r4,lr}
;;;148    {
;;;149    	static uint16_t hw_adc_counter = HW_ADC_CALL_PERIOD;
;;;150    	static uint16_t hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD - 1;
;;;151    	static uint16_t hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD - 2;
;;;152    	uint16_t temp;
;;;153    	// Time profiling
;;;154    	uint32_t time_mark1 = 0;
;;;155    	uint32_t time_mark2 = 0;
;;;156    	uint32_t ticks_count;
;;;157    	
;;;158    	time_mark1 = DWT_Get();
00009e  f7fffffe          BL       DWT_Get
0000a2  4604              MOV      r4,r0
;;;159    /*	
;;;160    	// Debug
;;;161    	if (MDR_PORTA->RXTX & (1<<TXD1))
;;;162    		PORT_ResetBits(MDR_PORTA, 1<<TXD1);
;;;163    	else
;;;164    		PORT_SetBits(MDR_PORTA, 1<<TXD1);
;;;165    */	
;;;166    	ProcessPowerOff();				// Check AC line disconnection
0000a4  f7fffffe          BL       ProcessPowerOff
;;;167    	if (--hw_adc_counter == 0)
0000a8  4915              LDR      r1,|L1.256|
0000aa  8848              LDRH     r0,[r1,#2]  ; hw_adc_counter
0000ac  1e40              SUBS     r0,r0,#1
0000ae  0400              LSLS     r0,r0,#16
0000b0  0c00              LSRS     r0,r0,#16
0000b2  8048              STRH     r0,[r1,#2]
0000b4  d103              BNE      |L1.190|
;;;168    	{
;;;169    		hw_adc_counter = HW_ADC_CALL_PERIOD;
0000b6  2005              MOVS     r0,#5
0000b8  8048              STRH     r0,[r1,#2]
;;;170    		//-------------------------------//
;;;171    		// 286
;;;172    		Converter_HW_ADCProcess();	// Converter low-level ADC control
0000ba  f7fffffe          BL       Converter_HW_ADCProcess
                  |L1.190|
;;;173    		//-------------------------------//
;;;174    	}
;;;175    /*	
;;;176    	//-------------------------------//
;;;177    	// 2369
;;;178    	if (--hw_uart2_rx_counter == 0)
;;;179    	{
;;;180    		hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD;
;;;181    		//-------------------------------//
;;;182    		// 373
;;;183    		processUartRX();			// UART2 receiver service
;;;184    		//-------------------------------//
;;;185    	}
;;;186    	if (--hw_uart2_tx_counter == 0)
;;;187    	{
;;;188    		hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD;
;;;189    		time_mark1 = DWT_Get();
;;;190    		//-------------------------------//
;;;191    		// 2320
;;;192    		processUartTX();			// UART2 transmitter service
;;;193    		//-------------------------------//
;;;194    		time_mark2 = DWT_Get();
;;;195    	}
;;;196    	//-------------------------------//
;;;197    */	
;;;198    	
;;;199    	//-------------------------------//
;;;200    	// 608
;;;201    	Converter_HWProcess();			// Converter low-level ON/OFF control and overload handling
0000be  f7fffffe          BL       Converter_HWProcess
;;;202    	//-------------------------------//
;;;203    	
;;;204    	
;;;205    	
;;;206    	//-------------------------------//
;;;207    	// 198
;;;208    	ProcessEncoder();				// Poll encoder				
0000c2  f7fffffe          BL       ProcessEncoder
;;;209    
;;;210    	// Reinit timer2 CCR
;;;211    	temp = MDR_TIMER2->CCR2 + HW_IRQ_PERIOD;	
0000c6  4a17              LDR      r2,|L1.292|
0000c8  6950              LDR      r0,[r2,#0x14]
0000ca  f5006048          ADD      r0,r0,#0xc80
0000ce  b280              UXTH     r0,r0
;;;212    	MDR_TIMER2->CCR2 = (temp > MDR_TIMER2->ARR) ? temp - MDR_TIMER2->ARR : temp;
0000d0  6891              LDR      r1,[r2,#8]
0000d2  4281              CMP      r1,r0
0000d4  d201              BCS      |L1.218|
0000d6  6891              LDR      r1,[r2,#8]
0000d8  1a40              SUBS     r0,r0,r1
                  |L1.218|
0000da  6150              STR      r0,[r2,#0x14]
;;;213    	TIMER_ClearFlag(MDR_TIMER2, TIMER_STATUS_CCR_REF_CH2);
0000dc  f44f6180          MOV      r1,#0x400
0000e0  4610              MOV      r0,r2
0000e2  f7fffffe          BL       TIMER_ClearFlag
;;;214    	//-------------------------------//
;;;215    	
;;;216    	time_mark2 = DWT_Get();
0000e6  f7fffffe          BL       DWT_Get
0000ea  4601              MOV      r1,r0
;;;217    	
;;;218    	
;;;219    	// Update time
;;;220    	ticks_count = DWT_GetDelta(time_mark1, time_mark2);
0000ec  4620              MOV      r0,r4
0000ee  f7fffffe          BL       DWT_GetDelta
;;;221    	if (ticks_count > time_profile.max_ticks_in_Timer2_ISR)
0000f2  4903              LDR      r1,|L1.256|
0000f4  3114              ADDS     r1,r1,#0x14
0000f6  684a              LDR      r2,[r1,#4]  ; time_profile
0000f8  4282              CMP      r2,r0
0000fa  d200              BCS      |L1.254|
;;;222    		time_profile.max_ticks_in_Timer2_ISR = ticks_count;
0000fc  6048              STR      r0,[r1,#4]  ; time_profile
                  |L1.254|
;;;223    }
0000fe  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  |L1.256|
                          DCD      ||.data||
                  |L1.260|
                          DCD      xQueueGUI
                  |L1.264|
                          DCD      converter_tick_message
                  |L1.268|
                          DCD      xQueueConverter
                  |L1.272|
                          DCD      dispatcher_tick_msg
                  |L1.276|
                          DCD      xQueueDispatcher
                  |L1.280|
                          DCD      sound_driver_sync_msg
                  |L1.284|
                          DCD      xQueueSound
                  |L1.288|
                          DCD      0xe000ed04
                  |L1.292|
                          DCD      0x40078000

                          AREA ||.data||, DATA, ALIGN=2

                  enable_task_ticks
000000  0000              DCB      0x00,0x00
                  hw_adc_counter
000002  0005              DCW      0x0005
                  tmr_gui_update
                          DCD      0x00000019
                  tmr_converter_tick
                          DCD      0x00000032
                  tmr_dispatcher_tick
                          DCD      0x0000000a
                  tmr_sound_driver_tick
                          DCD      0x00000005
                  time_profile
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\systick.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_a30b289d____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_systick_c_a30b289d____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_a30b289d____REVSH|
#line 130
|__asm___9_systick_c_a30b289d____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
