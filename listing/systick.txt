; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\systick.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\systick.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\systick.crf src\systick.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vApplicationTickHook PROC
;;;36     //-----------------------------------------------------------------//
;;;37     void vApplicationTickHook( void )
000000  b57c              PUSH     {r2-r6,lr}
;;;38     {
;;;39     	static uint32_t tmr_gui_update = GUI_UPDATE_INTERVAL;
;;;40     	static uint32_t tmr_converter_tick = CONVERTER_TICK_INTERVAL;
;;;41     	static uint32_t tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
;;;42     	static uint32_t tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
;;;43     	portBASE_TYPE xHigherPriorityTaskWokenByPost;
;;;44     	uint32_t msg;
;;;45     	// Time profiling
;;;46     	uint32_t time_mark = DWT_Get();
000002  f7fffffe          BL       DWT_Get
000006  4605              MOV      r5,r0
;;;47     	uint32_t ticks_count;
;;;48     		
;;;49     	// We have not woken a task at the start of the ISR.
;;;50     	xHigherPriorityTaskWokenByPost = pdFALSE;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;51     	
;;;52     	if (--tmr_gui_update == 0)
00000c  4c47              LDR      r4,|L1.300|
00000e  68a1              LDR      r1,[r4,#8]  ; tmr_gui_update
000010  1e49              SUBS     r1,r1,#1
000012  60a1              STR      r1,[r4,#8]  ; tmr_gui_update
000014  d109              BNE      |L1.42|
;;;53     	{
;;;54     		msg = GUI_UPDATE_ALL;
000016  9000              STR      r0,[sp,#0]
;;;55     		xQueueSendToBackFromISR(xQueueGUI, &msg, &xHigherPriorityTaskWokenByPost);
000018  4845              LDR      r0,|L1.304|
00001a  2300              MOVS     r3,#0
00001c  aa01              ADD      r2,sp,#4
00001e  4669              MOV      r1,sp
000020  6800              LDR      r0,[r0,#0]  ; xQueueGUI
000022  f7fffffe          BL       xQueueGenericSendFromISR
;;;56     		tmr_gui_update = GUI_UPDATE_INTERVAL;
000026  2019              MOVS     r0,#0x19
000028  60a0              STR      r0,[r4,#8]  ; tmr_gui_update
                  |L1.42|
;;;57     	}
;;;58     	
;;;59     	if (--tmr_converter_tick == 0)
00002a  68e1              LDR      r1,[r4,#0xc]  ; tmr_converter_tick
00002c  1e49              SUBS     r1,r1,#1
00002e  60e1              STR      r1,[r4,#0xc]  ; tmr_converter_tick
000030  d108              BNE      |L1.68|
;;;60     	{
;;;61     		//msg = CONVERTER_TICK;
;;;62     		xQueueSendToBackFromISR(xQueueConverter, &converter_tick_message, &xHigherPriorityTaskWokenByPost);
000032  4841              LDR      r0,|L1.312|
000034  2300              MOVS     r3,#0
000036  aa01              ADD      r2,sp,#4
000038  493e              LDR      r1,|L1.308|
00003a  6800              LDR      r0,[r0,#0]  ; xQueueConverter
00003c  f7fffffe          BL       xQueueGenericSendFromISR
;;;63     		tmr_converter_tick = CONVERTER_TICK_INTERVAL;
000040  2032              MOVS     r0,#0x32
000042  60e0              STR      r0,[r4,#0xc]  ; tmr_converter_tick
                  |L1.68|
;;;64     	}
;;;65     	
;;;66     	if (--tmr_dispatcher_tick == 0)
000044  6921              LDR      r1,[r4,#0x10]  ; tmr_dispatcher_tick
000046  1e49              SUBS     r1,r1,#1
000048  6121              STR      r1,[r4,#0x10]  ; tmr_dispatcher_tick
00004a  d108              BNE      |L1.94|
;;;67     	{
;;;68     		xQueueSendToBackFromISR(xQueueDispatcher, &dispatcher_tick_msg, &xHigherPriorityTaskWokenByPost);
00004c  483c              LDR      r0,|L1.320|
00004e  2300              MOVS     r3,#0
000050  aa01              ADD      r2,sp,#4
000052  493a              LDR      r1,|L1.316|
000054  6800              LDR      r0,[r0,#0]  ; xQueueDispatcher
000056  f7fffffe          BL       xQueueGenericSendFromISR
;;;69     		tmr_dispatcher_tick = DISPATCHER_TICK_INTERVAL;
00005a  200a              MOVS     r0,#0xa
00005c  6120              STR      r0,[r4,#0x10]  ; tmr_dispatcher_tick
                  |L1.94|
;;;70     	}
;;;71     	
;;;72     	if (--tmr_sound_driver_tick == 0)
00005e  6961              LDR      r1,[r4,#0x14]  ; tmr_sound_driver_tick
000060  1e49              SUBS     r1,r1,#1
000062  6161              STR      r1,[r4,#0x14]  ; tmr_sound_driver_tick
000064  d108              BNE      |L1.120|
;;;73     	{
;;;74     		xQueueSendToBackFromISR(xQueueSound, &sound_driver_sync_msg, &xHigherPriorityTaskWokenByPost);
000066  4838              LDR      r0,|L1.328|
000068  2300              MOVS     r3,#0
00006a  aa01              ADD      r2,sp,#4
00006c  4935              LDR      r1,|L1.324|
00006e  6800              LDR      r0,[r0,#0]  ; xQueueSound
000070  f7fffffe          BL       xQueueGenericSendFromISR
;;;75     		tmr_sound_driver_tick = SOUND_DRIVER_TICK_INTERVAL;
000074  2005              MOVS     r0,#5
000076  6160              STR      r0,[r4,#0x14]  ; tmr_sound_driver_tick
                  |L1.120|
;;;76     	}
;;;77     	
;;;78     	// Force context switching if required
;;;79     	// CHECKME
;;;80     	portEND_SWITCHING_ISR(xHigherPriorityTaskWokenByPost);
000078  9801              LDR      r0,[sp,#4]
00007a  b118              CBZ      r0,|L1.132|
00007c  4933              LDR      r1,|L1.332|
00007e  f04f5080          MOV      r0,#0x10000000
000082  6008              STR      r0,[r1,#0]
                  |L1.132|
;;;81     	
;;;82     	// Update time
;;;83     	ticks_count = DWT_GetDeltaForNow(time_mark);
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       DWT_GetDeltaForNow
;;;84     	if (ticks_count > time_profile.max_ticks_in_Systick_hook)
00008a  4928              LDR      r1,|L1.300|
00008c  3118              ADDS     r1,r1,#0x18
00008e  680a              LDR      r2,[r1,#0]  ; time_profile
000090  4282              CMP      r2,r0
000092  d200              BCS      |L1.150|
;;;85     		time_profile.max_ticks_in_Systick_hook = ticks_count;
000094  6008              STR      r0,[r1,#0]  ; time_profile
                  |L1.150|
;;;86     }
000096  bd7c              POP      {r2-r6,pc}
;;;87     
                          ENDP

                  Timer2_IRQHandler PROC
;;;140    //---------------------------------------------//
;;;141    void Timer2_IRQHandler(void) 
000098  e92d41f0          PUSH     {r4-r8,lr}
;;;142    {
;;;143    	static uint16_t hw_adc_counter = HW_ADC_CALL_PERIOD;
;;;144    	static uint16_t hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD - 1;
;;;145    	static uint16_t hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD - 2;
;;;146    	uint16_t temp;
;;;147    	// Time profiling
;;;148    	uint32_t time_mark1 = 0;
00009c  2600              MOVS     r6,#0
;;;149    	uint32_t time_mark2 = 0;
00009e  2500              MOVS     r5,#0
;;;150    	uint32_t ticks_count;
;;;151    /*	
;;;152    	// Debug
;;;153    	if (MDR_PORTA->RXTX & (1<<TXD1))
;;;154    		PORT_ResetBits(MDR_PORTA, 1<<TXD1);
;;;155    	else
;;;156    		PORT_SetBits(MDR_PORTA, 1<<TXD1);
;;;157    */	
;;;158    	ProcessPowerOff();				// Check AC line disconnection
0000a0  f7fffffe          BL       ProcessPowerOff
;;;159    	if (--hw_adc_counter == 0)
0000a4  4c21              LDR      r4,|L1.300|
;;;160    	{
;;;161    		hw_adc_counter = HW_ADC_CALL_PERIOD;
0000a6  f04f0705          MOV      r7,#5
0000aa  8820              LDRH     r0,[r4,#0]            ;159  ; hw_adc_counter
0000ac  1e40              SUBS     r0,r0,#1              ;159
0000ae  0402              LSLS     r2,r0,#16             ;159
0000b0  0c12              LSRS     r2,r2,#16             ;159
0000b2  8022              STRH     r2,[r4,#0]            ;159
0000b4  d102              BNE      |L1.188|
0000b6  8027              STRH     r7,[r4,#0]
;;;162    		//-------------------------------//
;;;163    		// 286
;;;164    		Converter_HW_ADCProcess();	// Converter low-level ADC control
0000b8  f7fffffe          BL       Converter_HW_ADCProcess
                  |L1.188|
;;;165    		//-------------------------------//
;;;166    	}
;;;167    	
;;;168    	//-------------------------------//
;;;169    	// 2369
;;;170    	if (--hw_uart2_rx_counter == 0)
0000bc  8860              LDRH     r0,[r4,#2]  ; hw_uart2_rx_counter
0000be  1e40              SUBS     r0,r0,#1
0000c0  0402              LSLS     r2,r0,#16
0000c2  0c12              LSRS     r2,r2,#16
0000c4  8062              STRH     r2,[r4,#2]
0000c6  d102              BNE      |L1.206|
;;;171    	{
;;;172    		hw_uart2_rx_counter = HW_UART2_RX_CALL_PERIOD;
0000c8  8067              STRH     r7,[r4,#2]
;;;173    		//-------------------------------//
;;;174    		// 373
;;;175    		processUartRX();			// UART2 receiver service
0000ca  f7fffffe          BL       processUartRX
                  |L1.206|
;;;176    		//-------------------------------//
;;;177    	}
;;;178    	if (--hw_uart2_tx_counter == 0)
0000ce  88a0              LDRH     r0,[r4,#4]  ; hw_uart2_tx_counter
0000d0  1e40              SUBS     r0,r0,#1
0000d2  0402              LSLS     r2,r0,#16
0000d4  0c12              LSRS     r2,r2,#16
0000d6  80a2              STRH     r2,[r4,#4]
0000d8  d108              BNE      |L1.236|
;;;179    	{
;;;180    		hw_uart2_tx_counter = HW_UART2_TX_CALL_PERIOD;
0000da  80a7              STRH     r7,[r4,#4]
;;;181    		time_mark1 = DWT_Get();
0000dc  f7fffffe          BL       DWT_Get
0000e0  4606              MOV      r6,r0
;;;182    		//-------------------------------//
;;;183    		// 2320
;;;184    		processUartTX();			// UART2 transmitter service
0000e2  f7fffffe          BL       processUartTX
;;;185    		//-------------------------------//
;;;186    		time_mark2 = DWT_Get();
0000e6  f7fffffe          BL       DWT_Get
0000ea  4605              MOV      r5,r0
                  |L1.236|
;;;187    	}
;;;188    	//-------------------------------//
;;;189    	
;;;190    	
;;;191    	//-------------------------------//
;;;192    	// 608
;;;193    	Converter_HWProcess();			// Converter low-level ON/OFF control and overload handling
0000ec  f7fffffe          BL       Converter_HWProcess
;;;194    	//-------------------------------//
;;;195    	
;;;196    	
;;;197    	
;;;198    	//-------------------------------//
;;;199    	// 198
;;;200    	ProcessEncoder();				// Poll encoder				
0000f0  f7fffffe          BL       ProcessEncoder
;;;201    
;;;202    	// Reinit timer2 CCR
;;;203    	temp = MDR_TIMER2->CCR2 + HW_IRQ_PERIOD;	
0000f4  4816              LDR      r0,|L1.336|
0000f6  6941              LDR      r1,[r0,#0x14]
0000f8  f5016148          ADD      r1,r1,#0xc80
0000fc  b28a              UXTH     r2,r1
;;;204    	MDR_TIMER2->CCR2 = (temp > MDR_TIMER2->ARR) ? temp - MDR_TIMER2->ARR : temp;
0000fe  6881              LDR      r1,[r0,#8]
000100  4291              CMP      r1,r2
000102  d201              BCS      |L1.264|
000104  6881              LDR      r1,[r0,#8]
000106  1a52              SUBS     r2,r2,r1
                  |L1.264|
000108  6142              STR      r2,[r0,#0x14]
;;;205    	TIMER_ClearFlag(MDR_TIMER2, TIMER_STATUS_CCR_REF_CH2);
00010a  f44f6180          MOV      r1,#0x400
00010e  f7fffffe          BL       TIMER_ClearFlag
;;;206    	//-------------------------------//
;;;207    	
;;;208    	
;;;209    	
;;;210    	// Update time
;;;211    	ticks_count = DWT_GetDelta(time_mark1, time_mark2);
000112  4629              MOV      r1,r5
000114  4630              MOV      r0,r6
000116  f7fffffe          BL       DWT_GetDelta
;;;212    	if (ticks_count > time_profile.max_ticks_in_Timer2_ISR)
00011a  4904              LDR      r1,|L1.300|
00011c  3118              ADDS     r1,r1,#0x18
00011e  684a              LDR      r2,[r1,#4]  ; time_profile
000120  4282              CMP      r2,r0
000122  d200              BCS      |L1.294|
;;;213    		time_profile.max_ticks_in_Timer2_ISR = ticks_count;
000124  6048              STR      r0,[r1,#4]  ; time_profile
                  |L1.294|
;;;214    }
000126  e8bd81f0          POP      {r4-r8,pc}
;;;215    
                          ENDP

00012a  0000              DCW      0x0000
                  |L1.300|
                          DCD      ||.data||
                  |L1.304|
                          DCD      xQueueGUI
                  |L1.308|
                          DCD      converter_tick_message
                  |L1.312|
                          DCD      xQueueConverter
                  |L1.316|
                          DCD      dispatcher_tick_msg
                  |L1.320|
                          DCD      xQueueDispatcher
                  |L1.324|
                          DCD      sound_driver_sync_msg
                  |L1.328|
                          DCD      xQueueSound
                  |L1.332|
                          DCD      0xe000ed04
                  |L1.336|
                          DCD      0x40078000

                          AREA ||.data||, DATA, ALIGN=2

                  hw_adc_counter
000000  0005              DCW      0x0005
                  hw_uart2_rx_counter
000002  0004              DCW      0x0004
                  hw_uart2_tx_counter
000004  0003              DCW      0x0003
000006  0000              DCB      0x00,0x00
                  tmr_gui_update
                          DCD      0x00000019
                  tmr_converter_tick
                          DCD      0x00000032
                  tmr_dispatcher_tick
                          DCD      0x0000000a
                  tmr_sound_driver_tick
                          DCD      0x00000005
                  time_profile
                          %        8

;*** Start embedded assembler ***

#line 1 "src\\systick.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_systick_c_c88225e9____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_systick_c_c88225e9____REVSH|
#line 130
|__asm___9_systick_c_c88225e9____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
