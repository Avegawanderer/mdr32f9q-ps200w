; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list -c --asm --interleave -o.\FLASH\mdr32f9qx_dma.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\mdr32f9qx_dma.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\mdr32f9qx_dma.crf ..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_CtrlDataInit PROC
;;;102      */
;;;103    void DMA_CtrlDataInit(DMA_CtrlDataInitTypeDef *DMA_ctrl_data_ptr, DMA_CtrlDataTypeDef *DMA_ctrl_table_ptr)
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105      /* Check DMA configuration parameters */
;;;106      assert_param(IS_DMA_CHANNELS(DMA_Channels_Number));
;;;107      assert_param(IS_DMA_ALTERNATE_DATA(DMA_AlternateData));
;;;108    
;;;109      /* Check the parameters */
;;;110      assert_param(IS_DMA_SOURCE_INC_STATE(DMA_ctrl_data_ptr->DMA_SourceIncSize));
;;;111      assert_param(IS_DMA_DEST_INC_STATE(DMA_ctrl_data_ptr->DMA_DestIncSize));
;;;112      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_ctrl_data_ptr->DMA_MemoryDataSize));
;;;113      assert_param(IS_DMA_MODE(DMA_ctrl_data_ptr->DMA_Mode));
;;;114      assert_param(IS_DMA_CYCLE_SIZE(DMA_ctrl_data_ptr->DMA_CycleSize));
;;;115      assert_param(IS_DMA_CONTINUOUS_NUMBER(DMA_ctrl_data_ptr->DMA_NumContinuous));
;;;116      assert_param(IS_DMA_SOURCE_PROT(DMA_ctrl_data_ptr->DMA_SourceProtCtrl));
;;;117      assert_param(IS_DMA_DEST_PROT(DMA_ctrl_data_ptr->DMA_DestProtCtrl));
;;;118    
;;;119      /* DMA Source Data End Address */
;;;120      if (DMA_ctrl_data_ptr->DMA_SourceIncSize == DMA_SourceIncNo)
;;;121      {
;;;122        DMA_ctrl_table_ptr->DMA_SourceEndAddr = DMA_ctrl_data_ptr->DMA_SourceBaseAddr;
000002  6883              LDR      r3,[r0,#8]
000004  6802              LDR      r2,[r0,#0]            ;120
000006  f1b36f40          CMP      r3,#0xc000000         ;120
00000a  d026              BEQ      |L1.90|
;;;123      }
;;;124      else
;;;125      {
;;;126        DMA_ctrl_table_ptr->DMA_SourceEndAddr = ( DMA_ctrl_data_ptr->DMA_SourceBaseAddr +
00000c  6984              LDR      r4,[r0,#0x18]
00000e  1e64              SUBS     r4,r4,#1
000010  0e9b              LSRS     r3,r3,#26
000012  409c              LSLS     r4,r4,r3
000014  4422              ADD      r2,r2,r4
000016  600a              STR      r2,[r1,#0]
                  |L1.24|
;;;127            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_SourceIncSize >> 26)));
;;;128      }
;;;129    
;;;130      /* DMA Destination Data End Address */
;;;131      if (DMA_ctrl_data_ptr->DMA_Mode == DMA_Mode_MemScatterPri)
000018  6942              LDR      r2,[r0,#0x14]
00001a  2a04              CMP      r2,#4
00001c  d01f              BEQ      |L1.94|
;;;132      {
;;;133        /* Memory Scatter-Gather mode */
;;;134        DMA_ctrl_table_ptr->DMA_DestEndAddr = (DMA_ctrl_data_ptr->DMA_DestBaseAddr + 12);
;;;135      }
;;;136      else
;;;137      {
;;;138        /* Other modes */
;;;139        if (DMA_ctrl_data_ptr->DMA_DestIncSize == DMA_DestIncNo)
00001e  68c2              LDR      r2,[r0,#0xc]
000020  f1b24f40          CMP      r2,#0xc0000000
000024  d01f              BEQ      |L1.102|
;;;140        {
;;;141          DMA_ctrl_table_ptr->DMA_DestEndAddr = DMA_ctrl_data_ptr->DMA_DestBaseAddr;
;;;142        }
;;;143        else
;;;144        {
;;;145          DMA_ctrl_table_ptr->DMA_DestEndAddr = ( DMA_ctrl_data_ptr->DMA_DestBaseAddr +
000026  6983              LDR      r3,[r0,#0x18]
000028  1e5b              SUBS     r3,r3,#1
00002a  0f92              LSRS     r2,r2,#30
00002c  4093              LSLS     r3,r3,r2
00002e  6842              LDR      r2,[r0,#4]
000030  441a              ADD      r2,r2,r3
000032  604a              STR      r2,[r1,#4]
                  |L1.52|
;;;146            ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << (DMA_ctrl_data_ptr->DMA_DestIncSize >> 30)));
;;;147        }
;;;148      }
;;;149    
;;;150      /* DMA Control Data */
;;;151      DMA_ctrl_table_ptr->DMA_Control = (DMA_ctrl_data_ptr->DMA_DestIncSize     |
000034  e9d02303          LDRD     r2,r3,[r0,#0xc]
000038  431a              ORRS     r2,r2,r3
00003a  6a44              LDR      r4,[r0,#0x24]
00003c  6883              LDR      r3,[r0,#8]
00003e  4323              ORRS     r3,r3,r4
000040  431a              ORRS     r2,r2,r3
000042  6a03              LDR      r3,[r0,#0x20]
000044  431a              ORRS     r2,r2,r3
000046  69c3              LDR      r3,[r0,#0x1c]
000048  431a              ORRS     r2,r2,r3
00004a  6983              LDR      r3,[r0,#0x18]
00004c  6940              LDR      r0,[r0,#0x14]
00004e  1e5b              SUBS     r3,r3,#1
000050  ea421203          ORR      r2,r2,r3,LSL #4
000054  4302              ORRS     r2,r2,r0
000056  608a              STR      r2,[r1,#8]
;;;152                                         DMA_ctrl_data_ptr->DMA_MemoryDataSize  |
;;;153                                         DMA_ctrl_data_ptr->DMA_SourceIncSize   |
;;;154                                         DMA_ctrl_data_ptr->DMA_DestProtCtrl    |
;;;155                                         DMA_ctrl_data_ptr->DMA_SourceProtCtrl  |
;;;156                                         DMA_ctrl_data_ptr->DMA_NumContinuous   |
;;;157                                         ((DMA_ctrl_data_ptr->DMA_CycleSize - 1) << 4)  |
;;;158                                         DMA_ctrl_data_ptr->DMA_Mode);
;;;159    }
000058  bd10              POP      {r4,pc}
                  |L1.90|
00005a  600a              STR      r2,[r1,#0]            ;122
00005c  e7dc              B        |L1.24|
                  |L1.94|
00005e  6842              LDR      r2,[r0,#4]            ;134
000060  320c              ADDS     r2,r2,#0xc            ;134
000062  604a              STR      r2,[r1,#4]            ;134
000064  e7e6              B        |L1.52|
                  |L1.102|
000066  6842              LDR      r2,[r0,#4]            ;141
000068  604a              STR      r2,[r1,#4]            ;141
00006a  e7e3              B        |L1.52|
;;;160    
                          ENDP

                  DMA_DeInit PROC
;;;165      */
;;;166    void DMA_DeInit(void)
00006c  4871              LDR      r0,|L1.564|
;;;167    {
;;;168      MDR_DMA->CFG = 0;                           /* Master Enable Off */
00006e  2100              MOVS     r1,#0
000070  6041              STR      r1,[r0,#4]
;;;169      MDR_DMA->CTRL_BASE_PTR = 0;                 /* Control data base pointer */
000072  6081              STR      r1,[r0,#8]
;;;170      MDR_DMA->CHNL_SW_REQUEST = 0;               /* Disable all sw requests */
000074  6141              STR      r1,[r0,#0x14]
;;;171      MDR_DMA->CHNL_USEBURST_CLR = 0xFFFFFFFF;    /* Disable burst mode */
000076  1e49              SUBS     r1,r1,#1
000078  61c1              STR      r1,[r0,#0x1c]
;;;172      MDR_DMA->CHNL_REQ_MASK_CLR = 0xFFFFFFFF;    /* Clear mask request */
00007a  6241              STR      r1,[r0,#0x24]
;;;173      MDR_DMA->CHNL_ENABLE_CLR = 0xFFFFFFFF;      /* Clear channel enable */
00007c  62c1              STR      r1,[r0,#0x2c]
;;;174      MDR_DMA->CHNL_PRI_ALT_CLR = 0xFFFFFFFF;     /* Reset to primary data structure */
00007e  6341              STR      r1,[r0,#0x34]
;;;175      MDR_DMA->CHNL_PRIORITY_CLR = 0xFFFFFFFF;    /* Reset to default priority */
000080  63c1              STR      r1,[r0,#0x3c]
;;;176      MDR_DMA->ERR_CLR = 0x01;                    /* Clear dma_err status */
000082  2101              MOVS     r1,#1
000084  64c1              STR      r1,[r0,#0x4c]
;;;177    }
000086  4770              BX       lr
;;;178    
                          ENDP

                  DMA_CtrlInit PROC
;;;188      */
;;;189    void DMA_CtrlInit(uint8_t DMA_Channel, uint8_t DMA_CtrlDataType,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
000088  b129              CBZ      r1,|L1.150|
;;;190    {
;;;191      /* Primary Control Data Init */
;;;192      if (DMA_CtrlDataType == DMA_CTRL_DATA_PRIMARY)
;;;193      {
;;;194        DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_ControlTable[DMA_Channel]);
;;;195      }
;;;196    #if (DMA_AlternateData == 1)
;;;197      /* Alternate Control Data Init */
;;;198      else
;;;199      {
;;;200        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
00008a  496a              LDR      r1,|L1.564|
00008c  68c9              LDR      r1,[r1,#0xc]
00008e  eb011100          ADD      r1,r1,r0,LSL #4
;;;201        DMA_CtrlDataInit(DMA_CtrlStruct, (DMA_CtrlDataTypeDef *)ptr);
000092  4610              MOV      r0,r2
000094  e7fe              B        DMA_CtrlDataInit
                  |L1.150|
000096  4968              LDR      r1,|L1.568|
000098  eb011100          ADD      r1,r1,r0,LSL #4       ;194
00009c  4610              MOV      r0,r2                 ;194
00009e  e7fe              B        DMA_CtrlDataInit
;;;202      }
;;;203    #endif
;;;204    }
;;;205    
                          ENDP

                  DMA_SG_CtrlInit PROC
;;;215      */
;;;216    void DMA_SG_CtrlInit(uint32_t DMA_Task, DMA_CtrlDataTypeDef *DMA_SG_TaskArray,  DMA_CtrlDataInitTypeDef* DMA_CtrlStruct)
0000a0  eb011100          ADD      r1,r1,r0,LSL #4
;;;217    {
;;;218      DMA_CtrlDataInit(DMA_CtrlStruct, &DMA_SG_TaskArray[DMA_Task]);
0000a4  4610              MOV      r0,r2
0000a6  e7fe              B        DMA_CtrlDataInit
;;;219    }
;;;220    
                          ENDP

                  DMA_SG_Init PROC
;;;227      */
;;;228    void DMA_SG_Init( uint8_t DMA_Channel, DMA_Channel_SG_InitTypeDef *DMA_SG_InitStruct)
0000a8  b570              PUSH     {r4-r6,lr}
;;;229    {
0000aa  b08a              SUB      sp,sp,#0x28
0000ac  4605              MOV      r5,r0
0000ae  460c              MOV      r4,r1
;;;230      DMA_CtrlDataInitTypeDef DMA_PriCtrlData;
;;;231    
;;;232      /* Check the parameters */
;;;233      assert_param(DMA_AlternateData == 1);
;;;234      assert_param(DMA_SG_InitStruct != 0);
;;;235      assert_param(DMA_SG_InitStruct->DMA_SG_TaskNumber != 0);
;;;236      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;237      assert_param(IS_DMA_AHB_PROT(DMA_SG_InitStruct->DMA_ProtCtrl));
;;;238      assert_param(IS_DMA_PRIORITY(DMA_SG_InitStruct->DMA_Priority));
;;;239      assert_param(IS_DMA_SOURCE_PROT(DMA_SG_InitStruct->DMA_SourceProtCtrl));
;;;240      assert_param(IS_DMA_DEST_PROT(DMA_SG_InitStruct->DMA_DestProtCtrl));
;;;241      assert_param(IS_DMA_BURST(DMA_SG_InitStruct->DMA_UseBurst));
;;;242    
;;;243      /* Check the CTRL_BASE_PTR initialisation */
;;;244      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
0000b0  4e60              LDR      r6,|L1.564|
0000b2  4861              LDR      r0,|L1.568|
0000b4  60b0              STR      r0,[r6,#8]
;;;245    
;;;246      /* Primary Control Data Init */
;;;247      DMA_PriCtrlData.DMA_SourceBaseAddr = (uint32_t)(DMA_SG_InitStruct->DMA_SG_TaskArray);
0000b6  6821              LDR      r1,[r4,#0]
0000b8  9100              STR      r1,[sp,#0]
;;;248      DMA_PriCtrlData.DMA_DestBaseAddr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
0000ba  68f1              LDR      r1,[r6,#0xc]
0000bc  eb011105          ADD      r1,r1,r5,LSL #4
0000c0  9101              STR      r1,[sp,#4]
;;;249      DMA_PriCtrlData.DMA_SourceIncSize = DMA_SourceIncWord;
0000c2  f04f6100          MOV      r1,#0x8000000
0000c6  9102              STR      r1,[sp,#8]
;;;250      DMA_PriCtrlData.DMA_DestIncSize = DMA_DestIncWord;
0000c8  0109              LSLS     r1,r1,#4
0000ca  9103              STR      r1,[sp,#0xc]
;;;251      DMA_PriCtrlData.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
0000cc  f04f5108          MOV      r1,#0x22000000
0000d0  9104              STR      r1,[sp,#0x10]
;;;252      DMA_PriCtrlData.DMA_Mode = DMA_Mode_MemScatterPri;
0000d2  2104              MOVS     r1,#4
0000d4  9105              STR      r1,[sp,#0x14]
;;;253      DMA_PriCtrlData.DMA_CycleSize = DMA_SG_InitStruct->DMA_SG_TaskNumber << 2;
0000d6  6861              LDR      r1,[r4,#4]
0000d8  0089              LSLS     r1,r1,#2
0000da  9106              STR      r1,[sp,#0x18]
;;;254      DMA_PriCtrlData.DMA_NumContinuous = DMA_Transfers_4;
0000dc  f44f4100          MOV      r1,#0x8000
0000e0  9107              STR      r1,[sp,#0x1c]
;;;255      DMA_PriCtrlData.DMA_SourceProtCtrl = DMA_SG_InitStruct->DMA_SourceProtCtrl;
0000e2  68a1              LDR      r1,[r4,#8]
0000e4  9108              STR      r1,[sp,#0x20]
;;;256      DMA_PriCtrlData.DMA_DestProtCtrl = DMA_SG_InitStruct->DMA_DestProtCtrl;
0000e6  68e1              LDR      r1,[r4,#0xc]
0000e8  9109              STR      r1,[sp,#0x24]
;;;257    
;;;258      DMA_CtrlDataInit(&DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
0000ea  eb001105          ADD      r1,r0,r5,LSL #4
0000ee  4668              MOV      r0,sp
0000f0  f7fffffe          BL       DMA_CtrlDataInit
;;;259    
;;;260      /* DMA configuration register */
;;;261      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE || DMA_SG_InitStruct->DMA_ProtCtrl;
0000f4  2001              MOVS     r0,#1
0000f6  6070              STR      r0,[r6,#4]
;;;262    
;;;263      /* Burst mode */
;;;264      if (DMA_SG_InitStruct->DMA_UseBurst == DMA_BurstSet)
0000f8  7d60              LDRB     r0,[r4,#0x15]
0000fa  2201              MOVS     r2,#1                 ;261
;;;265      {
;;;266        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
0000fc  40aa              LSLS     r2,r2,r5
0000fe  2801              CMP      r0,#1                 ;264
000100  d009              BEQ      |L1.278|
;;;267      }
;;;268      else
;;;269      {
;;;270        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
000102  61f2              STR      r2,[r6,#0x1c]
                  |L1.260|
;;;271      }
;;;272    
;;;273      /* Channel mask clear */
;;;274      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
000104  6272              STR      r2,[r6,#0x24]
;;;275    
;;;276      /* Enable channel */
;;;277      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000106  62b2              STR      r2,[r6,#0x28]
;;;278    
;;;279      /* Primary - Alternate control data structure selection */
;;;280      MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
000108  6372              STR      r2,[r6,#0x34]
;;;281    
;;;282      /* Channel priority set */
;;;283      if (DMA_SG_InitStruct->DMA_Priority == DMA_Priority_High)
00010a  7d20              LDRB     r0,[r4,#0x14]
00010c  2801              CMP      r0,#1
00010e  d004              BEQ      |L1.282|
;;;284      {
;;;285        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
;;;286      }
;;;287      else
;;;288      {
;;;289        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
000110  63f2              STR      r2,[r6,#0x3c]
                  |L1.274|
;;;290      }
;;;291    }
000112  b00a              ADD      sp,sp,#0x28
000114  bd70              POP      {r4-r6,pc}
                  |L1.278|
000116  61b2              STR      r2,[r6,#0x18]         ;266
000118  e7f4              B        |L1.260|
                  |L1.282|
00011a  63b2              STR      r2,[r6,#0x38]         ;285
00011c  e7f9              B        |L1.274|
;;;292    
                          ENDP

                  DMA_Init PROC
;;;300      */
;;;301    void DMA_Init(uint8_t DMA_Channel, DMA_ChannelInitTypeDef* DMA_InitStruct)
00011e  b570              PUSH     {r4-r6,lr}
;;;302    {
000120  4606              MOV      r6,r0
000122  460c              MOV      r4,r1
;;;303      /* Check the parameters */
;;;304      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;305      assert_param(IS_DMA_AHB_PROT(DMA_InitStruct->DMA_ProtCtrl));
;;;306      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;307      assert_param(IS_DMA_BURST(DMA_InitStruct->DMA_UseBurst));
;;;308      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_InitStruct->DMA_SelectDataStructure));
;;;309    
;;;310      /* Check the CTRL_BASE_PTR initialisation */
;;;311      MDR_DMA->CTRL_BASE_PTR = (uint32_t)DMA_ControlTable;
000124  4d43              LDR      r5,|L1.564|
000126  4944              LDR      r1,|L1.568|
000128  60a9              STR      r1,[r5,#8]
;;;312    
;;;313      /* Primary Control Data Init */
;;;314      if (DMA_InitStruct->DMA_PriCtrlData)
00012a  6820              LDR      r0,[r4,#0]
00012c  b118              CBZ      r0,|L1.310|
;;;315      {
;;;316        DMA_CtrlDataInit(DMA_InitStruct->DMA_PriCtrlData, &DMA_ControlTable[DMA_Channel]);
00012e  eb011106          ADD      r1,r1,r6,LSL #4
000132  f7fffffe          BL       DMA_CtrlDataInit
                  |L1.310|
;;;317      }
;;;318    
;;;319    #if (DMA_AlternateData == 1)
;;;320      /* Alternate Control Data Init */
;;;321      if (DMA_InitStruct->DMA_AltCtrlData)
000136  6860              LDR      r0,[r4,#4]
000138  b120              CBZ      r0,|L1.324|
;;;322      {
;;;323        uint32_t ptr = (MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
00013a  68e9              LDR      r1,[r5,#0xc]
00013c  eb011106          ADD      r1,r1,r6,LSL #4
;;;324        DMA_CtrlDataInit(DMA_InitStruct->DMA_AltCtrlData, (DMA_CtrlDataTypeDef *)ptr);
000140  f7fffffe          BL       DMA_CtrlDataInit
                  |L1.324|
;;;325      }
;;;326    #endif
;;;327    
;;;328      /* DMA configuration register */
;;;329      MDR_DMA->CFG = DMA_CFG_MASTER_ENABLE || DMA_InitStruct->DMA_ProtCtrl;
000144  2001              MOVS     r0,#1
000146  6068              STR      r0,[r5,#4]
;;;330    
;;;331      /* Burst mode */
;;;332      if (DMA_InitStruct->DMA_UseBurst == DMA_BurstSet)
000148  7b60              LDRB     r0,[r4,#0xd]
00014a  2201              MOVS     r2,#1                 ;329
;;;333      {
;;;334        MDR_DMA->CHNL_USEBURST_SET = (1 << DMA_Channel);
00014c  40b2              LSLS     r2,r2,r6
00014e  2801              CMP      r0,#1                 ;332
000150  d00a              BEQ      |L1.360|
;;;335      }
;;;336      else
;;;337      {
;;;338        MDR_DMA->CHNL_USEBURST_CLR = (1 << DMA_Channel);
000152  61ea              STR      r2,[r5,#0x1c]
                  |L1.340|
;;;339      }
;;;340    
;;;341      /* Channel mask clear */
;;;342      MDR_DMA->CHNL_REQ_MASK_CLR = (1 << DMA_Channel);
000154  626a              STR      r2,[r5,#0x24]
;;;343    
;;;344      /* Enable channel */
;;;345      MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000156  62aa              STR      r2,[r5,#0x28]
;;;346    
;;;347      /* Primary - Alternate control data structure selection */
;;;348      if (DMA_InitStruct->DMA_SelectDataStructure == DMA_CTRL_DATA_PRIMARY)
000158  7ba0              LDRB     r0,[r4,#0xe]
00015a  b138              CBZ      r0,|L1.364|
;;;349      {
;;;350        MDR_DMA->CHNL_PRI_ALT_CLR = (1 << DMA_Channel);       /* Use Primary */
;;;351      }
;;;352      else
;;;353      {
;;;354        MDR_DMA->CHNL_PRI_ALT_SET = (1 << DMA_Channel);       /* Use Alternate */
00015c  632a              STR      r2,[r5,#0x30]
                  |L1.350|
;;;355      }
;;;356    
;;;357      /* Channel priority set */
;;;358      if (DMA_InitStruct->DMA_Priority == DMA_Priority_High)
00015e  7b20              LDRB     r0,[r4,#0xc]
000160  2801              CMP      r0,#1
000162  d005              BEQ      |L1.368|
;;;359      {
;;;360        MDR_DMA->CHNL_PRIORITY_SET = (1 << DMA_Channel);      /* High priority */
;;;361      }
;;;362      else
;;;363      {
;;;364        MDR_DMA->CHNL_PRIORITY_CLR = (1 << DMA_Channel);      /* Default priority */
000164  63ea              STR      r2,[r5,#0x3c]
;;;365      }
;;;366    }
000166  bd70              POP      {r4-r6,pc}
                  |L1.360|
000168  61aa              STR      r2,[r5,#0x18]         ;334
00016a  e7f3              B        |L1.340|
                  |L1.364|
00016c  636a              STR      r2,[r5,#0x34]         ;350
00016e  e7f6              B        |L1.350|
                  |L1.368|
000170  63aa              STR      r2,[r5,#0x38]         ;360
000172  bd70              POP      {r4-r6,pc}
;;;367    
                          ENDP

                  DMA_StructInit PROC
;;;373      */
;;;374    void DMA_StructInit(DMA_ChannelInitTypeDef* DMA_InitStruct)
000174  2100              MOVS     r1,#0
;;;375    {
;;;376      DMA_InitStruct->DMA_PriCtrlData = 0;
000176  6001              STR      r1,[r0,#0]
;;;377      DMA_InitStruct->DMA_AltCtrlData = 0;
000178  6041              STR      r1,[r0,#4]
;;;378      DMA_InitStruct->DMA_ProtCtrl = 0;
00017a  6081              STR      r1,[r0,#8]
;;;379      DMA_InitStruct->DMA_Priority = 0;
00017c  7301              STRB     r1,[r0,#0xc]
;;;380      DMA_InitStruct->DMA_UseBurst = 0;
00017e  7341              STRB     r1,[r0,#0xd]
;;;381      DMA_InitStruct->DMA_SelectDataStructure = 0;
000180  7381              STRB     r1,[r0,#0xe]
;;;382    }
000182  4770              BX       lr
;;;383    
                          ENDP

                  DMA_SG_StructInit PROC
;;;389      */
;;;390    void DMA_SG_StructInit(DMA_Channel_SG_InitTypeDef* DMA_SG_InitStruct)
000184  2100              MOVS     r1,#0
;;;391    {
;;;392      DMA_SG_InitStruct->DMA_SG_TaskArray = 0;
000186  6001              STR      r1,[r0,#0]
;;;393      DMA_SG_InitStruct->DMA_SG_TaskNumber = 0;
000188  6041              STR      r1,[r0,#4]
;;;394      DMA_SG_InitStruct->DMA_SourceProtCtrl = 0;
00018a  6081              STR      r1,[r0,#8]
;;;395      DMA_SG_InitStruct->DMA_DestProtCtrl = 0;
00018c  60c1              STR      r1,[r0,#0xc]
;;;396      DMA_SG_InitStruct->DMA_ProtCtrl = 0;
00018e  6101              STR      r1,[r0,#0x10]
;;;397      DMA_SG_InitStruct->DMA_Priority = 0;
000190  7501              STRB     r1,[r0,#0x14]
;;;398      DMA_SG_InitStruct->DMA_UseBurst = 0;
000192  7541              STRB     r1,[r0,#0x15]
;;;399    }
000194  4770              BX       lr
;;;400    
                          ENDP

                  DMA_Cmd PROC
;;;407      */
;;;408    void DMA_Cmd(uint8_t DMA_Channel, FunctionalState NewState)
000196  2201              MOVS     r2,#1
;;;409    {
;;;410      /* Check the parameters */
;;;411      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;412    
;;;413      /* Channel Enable/Disable */
;;;414      if ( NewState == ENABLE)
;;;415      {
;;;416        MDR_DMA->CHNL_ENABLE_SET = (1 << DMA_Channel);
000198  4082              LSLS     r2,r2,r0
00019a  4826              LDR      r0,|L1.564|
00019c  2901              CMP      r1,#1                 ;414
00019e  d001              BEQ      |L1.420|
;;;417      }
;;;418      else
;;;419      {
;;;420        MDR_DMA->CHNL_ENABLE_CLR = (1 << DMA_Channel);
0001a0  62c2              STR      r2,[r0,#0x2c]
;;;421      }
;;;422    }
0001a2  4770              BX       lr
                  |L1.420|
0001a4  6282              STR      r2,[r0,#0x28]         ;416
0001a6  4770              BX       lr
;;;423    
                          ENDP

                  DMA_Request PROC
;;;428      */
;;;429    void DMA_Request(uint8_t DMA_Channel)
0001a8  2101              MOVS     r1,#1
;;;430    {
;;;431      /* Check the parameters */
;;;432      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;433    
;;;434      /* Set SW Request */
;;;435      MDR_DMA->CHNL_SW_REQUEST = (1 << DMA_Channel);
0001aa  4081              LSLS     r1,r1,r0
0001ac  4821              LDR      r0,|L1.564|
0001ae  6141              STR      r1,[r0,#0x14]
;;;436    }
0001b0  4770              BX       lr
;;;437    
                          ENDP

                  DMA_ClearError PROC
;;;442      */
;;;443    void DMA_ClearError(void)
0001b2  4920              LDR      r1,|L1.564|
;;;444    {
;;;445      MDR_DMA->ERR_CLR = 0x01;            /* Clear dma_err status */
0001b4  2001              MOVS     r0,#1
0001b6  64c8              STR      r0,[r1,#0x4c]
;;;446    }
0001b8  4770              BX       lr
;;;447    
                          ENDP

                  DMA_GetCurrTransferCounter PROC
;;;456      */
;;;457    uint32_t DMA_GetCurrTransferCounter(uint8_t DMA_Channel, uint8_t DMA_CtrlData)
0001ba  4a1e              LDR      r2,|L1.564|
;;;458    {
;;;459      DMA_CtrlDataTypeDef *ptr;     /* Pointer to the channels's data structure */
;;;460    
;;;461      /* Check the parameters */
;;;462      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;463      assert_param(IS_DMA_SELECT_DATA_STRUCTURE(DMA_CtrlData));
;;;464    
;;;465      /* Init the control data pointer */
;;;466      if (DMA_CtrlData == DMA_CTRL_DATA_PRIMARY)
0001bc  b139              CBZ      r1,|L1.462|
;;;467      {
;;;468        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
;;;469      }
;;;470      else
;;;471      {
;;;472        ptr = (DMA_CtrlDataTypeDef *)(MDR_DMA->ALT_CTRL_BASE_PTR + (DMA_Channel * sizeof(DMA_CtrlDataTypeDef)));
0001be  68d1              LDR      r1,[r2,#0xc]
0001c0  eb011000          ADD      r0,r1,r0,LSL #4
                  |L1.452|
;;;473      }
;;;474    
;;;475      /* Read the number of remaining transfers */
;;;476      return (((ptr->DMA_Control & DMA_CONTROL_MINUS_1)>>4) + 1);
0001c4  6880              LDR      r0,[r0,#8]
0001c6  f3c01009          UBFX     r0,r0,#4,#10
0001ca  1c40              ADDS     r0,r0,#1
;;;477    }
0001cc  4770              BX       lr
                  |L1.462|
0001ce  6891              LDR      r1,[r2,#8]            ;468
0001d0  eb011000          ADD      r0,r1,r0,LSL #4       ;468
0001d4  e7f6              B        |L1.452|
;;;478    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;493      */
;;;494    FlagStatus DMA_GetFlagStatus(uint8_t DMA_Channel, uint8_t DMA_Flag)
0001d6  2201              MOVS     r2,#1
;;;495    {
;;;496      /* Check the parameters */
;;;497      assert_param(IS_DMA_CHANNEL(DMA_Channel));
;;;498      assert_param(IS_DMA_FLAG(DMA_Flag));
;;;499    
;;;500      /* Read Flag Status */
;;;501      switch(DMA_Flag)
;;;502      {
;;;503        case DMA_FLAG_DMA_ENA:
;;;504          return (FlagStatus)(MDR_DMA->STATUS & DMA_STATUS_MASTER_ENABLE);
0001d8  4b16              LDR      r3,|L1.564|
;;;505        case DMA_FLAG_DMA_ERR:
;;;506          return (FlagStatus)(MDR_DMA->ERR_CLR & 0x01);
;;;507        case DMA_FLAG_CHNL_ENA:
;;;508          return (FlagStatus)(MDR_DMA->CHNL_ENABLE_SET & (1 << DMA_Channel));
0001da  4082              LSLS     r2,r2,r0
0001dc  2909              CMP      r1,#9                 ;501
0001de  d226              BCS      |L1.558|
0001e0  e8dff001          TBB      [pc,r1]               ;501
0001e4  2505090d          DCB      0x25,0x05,0x09,0x0d
0001e8  1115191d          DCB      0x11,0x15,0x19,0x1d
0001ec  2100              DCB      0x21,0x00
0001ee  6818              LDR      r0,[r3,#0]            ;504
0001f0  f0000001          AND      r0,r0,#1              ;504
;;;509        case DMA_FLAG_CHNL_MASK:
;;;510          return (FlagStatus)(MDR_DMA->CHNL_REQ_MASK_SET & (1 << DMA_Channel));
;;;511        case DMA_FLAG_CHNL_WAIT:
;;;512          return (FlagStatus)(MDR_DMA->WAITONREQ_STATUS & (1 << DMA_Channel));
;;;513        case DMA_FLAG_CHNL_BURST:
;;;514          return (FlagStatus)(MDR_DMA->CHNL_USEBURST_SET & (1 << DMA_Channel));
;;;515        case DMA_FLAG_CHNL_ALT:
;;;516          return (FlagStatus)(MDR_DMA->CHNL_PRI_ALT_SET & (1 << DMA_Channel));
;;;517        case DMA_FLAG_CHNL_PRIORITY:
;;;518          return (FlagStatus)(MDR_DMA->CHNL_PRIORITY_SET & (1 << DMA_Channel));
;;;519        default:
;;;520          return (FlagStatus)0;
;;;521      }
;;;522    }
0001f4  4770              BX       lr
0001f6  6cd8              LDR      r0,[r3,#0x4c]         ;506
0001f8  f0000001          AND      r0,r0,#1              ;506
0001fc  4770              BX       lr
0001fe  6a98              LDR      r0,[r3,#0x28]         ;508
000200  4010              ANDS     r0,r0,r2              ;508
000202  b2c0              UXTB     r0,r0                 ;508
000204  4770              BX       lr
000206  6a18              LDR      r0,[r3,#0x20]         ;510
000208  4010              ANDS     r0,r0,r2              ;510
00020a  b2c0              UXTB     r0,r0                 ;510
00020c  4770              BX       lr
00020e  6918              LDR      r0,[r3,#0x10]         ;512
000210  4010              ANDS     r0,r0,r2              ;512
000212  b2c0              UXTB     r0,r0                 ;512
000214  4770              BX       lr
000216  6998              LDR      r0,[r3,#0x18]         ;514
000218  4010              ANDS     r0,r0,r2              ;514
00021a  b2c0              UXTB     r0,r0                 ;514
00021c  4770              BX       lr
00021e  6b18              LDR      r0,[r3,#0x30]         ;516
000220  4010              ANDS     r0,r0,r2              ;516
000222  b2c0              UXTB     r0,r0                 ;516
000224  4770              BX       lr
000226  6b98              LDR      r0,[r3,#0x38]         ;518
000228  4010              ANDS     r0,r0,r2              ;518
00022a  b2c0              UXTB     r0,r0                 ;518
00022c  4770              BX       lr
                  |L1.558|
00022e  2000              MOVS     r0,#0                 ;520
000230  4770              BX       lr
;;;523    
                          ENDP

000232  0000              DCW      0x0000
                  |L1.564|
                          DCD      0x40028000
                  |L1.568|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=10

                  DMA_ControlTable
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\Library\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_dma.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_MDR32F9Qx_dma_c_605561c4____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH|
#line 130
|__asm___15_MDR32F9Qx_dma_c_605561c4____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
