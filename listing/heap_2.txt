; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\heap_2.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\heap_2.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\heap_2.crf ..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\MemMang\heap_2.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;275    
;;;276    static void prvHeapInit( void )
000000  4a43              LDR      r2,|L1.272|
;;;277    {
;;;278    xBlockLink *pxFirstFreeBlock;
;;;279    unsigned char *pucAlignedHeap;
;;;280    
;;;281    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;282    	pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
000002  f0220007          BIC      r0,r2,#7
;;;283    
;;;284    	/* xStart is used to hold a pointer to the first item in the list of free
;;;285    	blocks.  The void cast is used to prevent compiler warnings. */
;;;286    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000006  4a43              LDR      r2,|L1.276|
000008  6010              STR      r0,[r2,#0]  ; xStart
;;;287    	xStart.xBlockSize = ( size_t ) 0;
00000a  2200              MOVS     r2,#0
00000c  4b41              LDR      r3,|L1.276|
00000e  605a              STR      r2,[r3,#4]  ; xStart
;;;288    
;;;289    	/* xEnd is used to mark the end of the list of free blocks. */
;;;290    	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
000010  f24432f8          MOV      r2,#0x43f8
000014  4b40              LDR      r3,|L1.280|
000016  605a              STR      r2,[r3,#4]  ; xEnd
;;;291    	xEnd.pxNextFreeBlock = NULL;
000018  2200              MOVS     r2,#0
00001a  601a              STR      r2,[r3,#0]  ; xEnd
;;;292    
;;;293    	/* To start with there is a single free block that is sized to take up the
;;;294    	entire heap space. */
;;;295    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
00001c  4601              MOV      r1,r0
;;;296    	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
00001e  f24432f8          MOV      r2,#0x43f8
000022  604a              STR      r2,[r1,#4]
;;;297    	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
000024  461a              MOV      r2,r3
000026  600a              STR      r2,[r1,#0]
;;;298    }
000028  4770              BX       lr
;;;299    /*-----------------------------------------------------------*/
                          ENDP

                  pvPortMalloc PROC
;;;144    
;;;145    void *pvPortMalloc( size_t xWantedSize )
00002a  e92d41f0          PUSH     {r4-r8,lr}
;;;146    {
00002e  4604              MOV      r4,r0
;;;147    xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;148    static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
;;;149    void *pvReturn = NULL;
000030  f04f0800          MOV      r8,#0
;;;150    
;;;151    	vTaskSuspendAll();
000034  f7fffffe          BL       vTaskSuspendAll
;;;152    	{
;;;153    		/* If this is the first call to malloc then the heap will require
;;;154    		initialisation to setup the list of free blocks. */
;;;155    		if( xHeapHasBeenInitialised == pdFALSE )
000038  4838              LDR      r0,|L1.284|
00003a  6800              LDR      r0,[r0,#0]  ; xHeapHasBeenInitialised
00003c  b920              CBNZ     r0,|L1.72|
;;;156    		{
;;;157    			prvHeapInit();
00003e  f7fffffe          BL       prvHeapInit
;;;158    			xHeapHasBeenInitialised = pdTRUE;
000042  2001              MOVS     r0,#1
000044  4935              LDR      r1,|L1.284|
000046  6008              STR      r0,[r1,#0]  ; xHeapHasBeenInitialised
                  |L1.72|
;;;159    		}
;;;160    
;;;161    		/* The wanted size is increased so it can contain a xBlockLink
;;;162    		structure in addition to the requested amount of bytes. */
;;;163    		if( xWantedSize > 0 )
000048  b144              CBZ      r4,|L1.92|
;;;164    		{
;;;165    			xWantedSize += heapSTRUCT_SIZE;
00004a  3408              ADDS     r4,r4,#8
;;;166    
;;;167    			/* Ensure that blocks are always aligned to the required number of bytes. */
;;;168    			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
00004c  f0140f07          TST      r4,#7
000050  d004              BEQ      |L1.92|
;;;169    			{
;;;170    				/* Byte alignment required. */
;;;171    				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
000052  f0040007          AND      r0,r4,#7
000056  f1c00008          RSB      r0,r0,#8
00005a  4404              ADD      r4,r4,r0
                  |L1.92|
;;;172    			}
;;;173    		}
;;;174    
;;;175    		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
00005c  2c00              CMP      r4,#0
00005e  d032              BEQ      |L1.198|
000060  f24430f8          MOV      r0,#0x43f8
000064  4284              CMP      r4,r0
000066  d22e              BCS      |L1.198|
;;;176    		{
;;;177    			/* Blocks are stored in byte order - traverse the list from the start
;;;178    			(smallest) block until one of adequate size is found. */
;;;179    			pxPreviousBlock = &xStart;
000068  4f2a              LDR      r7,|L1.276|
;;;180    			pxBlock = xStart.pxNextFreeBlock;
00006a  4638              MOV      r0,r7
00006c  6805              LDR      r5,[r0,#0]  ; xStart
;;;181    			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00006e  e001              B        |L1.116|
                  |L1.112|
;;;182    			{
;;;183    				pxPreviousBlock = pxBlock;
000070  462f              MOV      r7,r5
;;;184    				pxBlock = pxBlock->pxNextFreeBlock;
000072  682d              LDR      r5,[r5,#0]
                  |L1.116|
000074  6868              LDR      r0,[r5,#4]            ;181
000076  42a0              CMP      r0,r4                 ;181
000078  d202              BCS      |L1.128|
00007a  6828              LDR      r0,[r5,#0]            ;181
00007c  2800              CMP      r0,#0                 ;181
00007e  d1f7              BNE      |L1.112|
                  |L1.128|
;;;185    			}
;;;186    
;;;187    			/* If we found the end marker then a block of adequate size was not found. */
;;;188    			if( pxBlock != &xEnd )
000080  4825              LDR      r0,|L1.280|
000082  4285              CMP      r5,r0
000084  d01f              BEQ      |L1.198|
;;;189    			{
;;;190    				/* Return the memory space - jumping over the xBlockLink structure
;;;191    				at its start. */
;;;192    				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
000086  6838              LDR      r0,[r7,#0]
000088  f1000808          ADD      r8,r0,#8
;;;193    
;;;194    				/* This block is being returned for use so must be taken out of the
;;;195    				list of free blocks. */
;;;196    				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00008c  6828              LDR      r0,[r5,#0]
00008e  6038              STR      r0,[r7,#0]
;;;197    
;;;198    				/* If the block is larger than required it can be split into two. */
;;;199    				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000090  6868              LDR      r0,[r5,#4]
000092  1b00              SUBS     r0,r0,r4
000094  2810              CMP      r0,#0x10
000096  d910              BLS      |L1.186|
;;;200    				{
;;;201    					/* This block is to be split into two.  Create a new block
;;;202    					following the number of bytes requested. The void cast is
;;;203    					used to prevent byte alignment warnings from the compiler. */
;;;204    					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
000098  192e              ADDS     r6,r5,r4
;;;205    
;;;206    					/* Calculate the sizes of two blocks split from the single
;;;207    					block. */
;;;208    					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
00009a  6868              LDR      r0,[r5,#4]
00009c  1b00              SUBS     r0,r0,r4
00009e  6070              STR      r0,[r6,#4]
;;;209    					pxBlock->xBlockSize = xWantedSize;
0000a0  606c              STR      r4,[r5,#4]
;;;210    
;;;211    					/* Insert the new block into the list of free blocks. */
;;;212    					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
0000a2  6871              LDR      r1,[r6,#4]
0000a4  481b              LDR      r0,|L1.276|
0000a6  e000              B        |L1.170|
                  |L1.168|
0000a8  6800              LDR      r0,[r0,#0]
                  |L1.170|
0000aa  6802              LDR      r2,[r0,#0]
0000ac  6852              LDR      r2,[r2,#4]
0000ae  428a              CMP      r2,r1
0000b0  d3fa              BCC      |L1.168|
0000b2  6802              LDR      r2,[r0,#0]
0000b4  6032              STR      r2,[r6,#0]
0000b6  6006              STR      r6,[r0,#0]
0000b8  bf00              NOP      
                  |L1.186|
;;;213    				}
;;;214    
;;;215    				xFreeBytesRemaining -= pxBlock->xBlockSize;
0000ba  4919              LDR      r1,|L1.288|
0000bc  6868              LDR      r0,[r5,#4]
0000be  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000c0  1a08              SUBS     r0,r1,r0
0000c2  4917              LDR      r1,|L1.288|
0000c4  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
                  |L1.198|
;;;216    			}
;;;217    		}
;;;218    		
;;;219    		traceMALLOC( pvReturn, xWantedSize );
;;;220    	}
;;;221    	xTaskResumeAll();
0000c6  f7fffffe          BL       xTaskResumeAll
;;;222    
;;;223    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;224    	{
;;;225    		if( pvReturn == NULL )
;;;226    		{
;;;227    			extern void vApplicationMallocFailedHook( void );
;;;228    			vApplicationMallocFailedHook();
;;;229    		}
;;;230    	}
;;;231    	#endif
;;;232    
;;;233    	return pvReturn;
0000ca  4640              MOV      r0,r8
;;;234    }
0000cc  e8bd81f0          POP      {r4-r8,pc}
;;;235    /*-----------------------------------------------------------*/
                          ENDP

                  vPortFree PROC
;;;236    
;;;237    void vPortFree( void *pv )
0000d0  b570              PUSH     {r4-r6,lr}
;;;238    {
0000d2  4606              MOV      r6,r0
;;;239    unsigned char *puc = ( unsigned char * ) pv;
0000d4  4635              MOV      r5,r6
;;;240    xBlockLink *pxLink;
;;;241    
;;;242    	if( pv != NULL )
0000d6  b1b6              CBZ      r6,|L1.262|
;;;243    	{
;;;244    		/* The memory being freed will have an xBlockLink structure immediately
;;;245    		before it. */
;;;246    		puc -= heapSTRUCT_SIZE;
0000d8  3d08              SUBS     r5,r5,#8
;;;247    
;;;248    		/* This unexpected casting is to keep some compilers from issuing 
;;;249    		byte alignment warnings. */
;;;250    		pxLink = ( void * ) puc;
0000da  462c              MOV      r4,r5
;;;251    
;;;252    		vTaskSuspendAll();
0000dc  f7fffffe          BL       vTaskSuspendAll
;;;253    		{
;;;254    			/* Add this block to the list of free blocks. */
;;;255    			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
0000e0  6861              LDR      r1,[r4,#4]
0000e2  480c              LDR      r0,|L1.276|
0000e4  e000              B        |L1.232|
                  |L1.230|
0000e6  6800              LDR      r0,[r0,#0]
                  |L1.232|
0000e8  6802              LDR      r2,[r0,#0]
0000ea  6852              LDR      r2,[r2,#4]
0000ec  428a              CMP      r2,r1
0000ee  d3fa              BCC      |L1.230|
0000f0  6802              LDR      r2,[r0,#0]
0000f2  6022              STR      r2,[r4,#0]
0000f4  6004              STR      r4,[r0,#0]
;;;256    			xFreeBytesRemaining += pxLink->xBlockSize;
0000f6  490a              LDR      r1,|L1.288|
0000f8  6860              LDR      r0,[r4,#4]
0000fa  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000fc  4408              ADD      r0,r0,r1
0000fe  4908              LDR      r1,|L1.288|
000100  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;257    			traceFREE( pv, pxLink->xBlockSize );
;;;258    		}
;;;259    		xTaskResumeAll();
000102  f7fffffe          BL       xTaskResumeAll
                  |L1.262|
;;;260    	}
;;;261    }
000106  bd70              POP      {r4-r6,pc}
;;;262    /*-----------------------------------------------------------*/
                          ENDP

                  xPortGetFreeHeapSize PROC
;;;263    
;;;264    size_t xPortGetFreeHeapSize( void )
000108  4805              LDR      r0,|L1.288|
;;;265    {
;;;266    	return xFreeBytesRemaining;
00010a  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;267    }
00010c  4770              BX       lr
;;;268    /*-----------------------------------------------------------*/
                          ENDP

                  vPortInitialiseBlocks PROC
;;;269    
;;;270    void vPortInitialiseBlocks( void )
00010e  4770              BX       lr
;;;271    {
;;;272    	/* This just exists to keep the linker quiet. */
;;;273    }
;;;274    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.272|
                          DCD      ucHeap+0x8
                  |L1.276|
                          DCD      xStart
                  |L1.280|
                          DCD      xEnd
                  |L1.284|
                          DCD      xHeapHasBeenInitialised
                  |L1.288|
                          DCD      xFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xFreeBytesRemaining
                          DCD      0x000043f8
                  xHeapHasBeenInitialised
                          DCD      0x00000000
                  xStart
                          %        8
                  xEnd
                          %        8
