; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\croutine.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\croutine.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\croutine.crf ..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\croutine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvInitialiseCoRoutineLists PROC
;;;342    
;;;343    static void prvInitialiseCoRoutineLists( void )
000000  b570              PUSH     {r4-r6,lr}
;;;344    {
;;;345    unsigned portBASE_TYPE uxPriority;
;;;346    
;;;347    	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
;;;348    	{
;;;349    		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
000004  4d8c              LDR      r5,|L1.568|
                  |L1.6|
000006  eb040084          ADD      r0,r4,r4,LSL #2
00000a  eb050080          ADD      r0,r5,r0,LSL #2
00000e  f7fffffe          BL       vListInitialise
000012  1c64              ADDS     r4,r4,#1              ;347
000014  2c02              CMP      r4,#2                 ;347
000016  d3f6              BCC      |L1.6|
;;;350    	}
;;;351    
;;;352    	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
000018  4887              LDR      r0,|L1.568|
00001a  3028              ADDS     r0,r0,#0x28
00001c  f7fffffe          BL       vListInitialise
;;;353    	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
000020  4885              LDR      r0,|L1.568|
000022  303c              ADDS     r0,r0,#0x3c
000024  f7fffffe          BL       vListInitialise
;;;354    	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
000028  4883              LDR      r0,|L1.568|
00002a  3050              ADDS     r0,r0,#0x50
00002c  f7fffffe          BL       vListInitialise
;;;355    
;;;356    	/* Start with pxDelayedCoRoutineList using list1 and the
;;;357    	pxOverflowDelayedCoRoutineList using list2. */
;;;358    	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
000030  4981              LDR      r1,|L1.568|
000032  4882              LDR      r0,|L1.572|
000034  3128              ADDS     r1,r1,#0x28
000036  6141              STR      r1,[r0,#0x14]  ; pxDelayedCoRoutineList
;;;359    	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
000038  3114              ADDS     r1,r1,#0x14
00003a  6181              STR      r1,[r0,#0x18]  ; pxOverflowDelayedCoRoutineList
;;;360    }
00003c  bd70              POP      {r4-r6,pc}
;;;361    /*-----------------------------------------------------------*/
                          ENDP

                  xCoRoutineCreate PROC
;;;136    
;;;137    signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
00003e  e92d41f0          PUSH     {r4-r8,lr}
;;;138    {
000042  4607              MOV      r7,r0
000044  460d              MOV      r5,r1
000046  4690              MOV      r8,r2
;;;139    signed portBASE_TYPE xReturn;
;;;140    corCRCB *pxCoRoutine;
;;;141    
;;;142    	/* Allocate the memory that will store the co-routine control block. */
;;;143    	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
000048  2038              MOVS     r0,#0x38
00004a  f7fffffe          BL       pvPortMalloc
00004e  4604              MOV      r4,r0
;;;144    	if( pxCoRoutine )
000050  b354              CBZ      r4,|L1.168|
;;;145    	{
;;;146    		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
;;;147    		be created and the co-routine data structures need initialising. */
;;;148    		if( pxCurrentCoRoutine == NULL )
000052  4e7a              LDR      r6,|L1.572|
000054  6830              LDR      r0,[r6,#0]  ; pxCurrentCoRoutine
000056  b910              CBNZ     r0,|L1.94|
;;;149    		{
;;;150    			pxCurrentCoRoutine = pxCoRoutine;
000058  6034              STR      r4,[r6,#0]  ; pxCurrentCoRoutine
;;;151    			prvInitialiseCoRoutineLists();
00005a  f7fffffe          BL       prvInitialiseCoRoutineLists
                  |L1.94|
;;;152    		}
;;;153    
;;;154    		/* Check the priority is within limits. */
;;;155    		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
00005e  2d02              CMP      r5,#2
000060  d300              BCC      |L1.100|
;;;156    		{
;;;157    			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
000062  2501              MOVS     r5,#1
                  |L1.100|
;;;158    		}
;;;159    
;;;160    		/* Fill out the co-routine control block from the function parameters. */
;;;161    		pxCoRoutine->uxState = corINITIAL_STATE;
000064  2000              MOVS     r0,#0
000066  86a0              STRH     r0,[r4,#0x34]
;;;162    		pxCoRoutine->uxPriority = uxPriority;
000068  62e5              STR      r5,[r4,#0x2c]
;;;163    		pxCoRoutine->uxIndex = uxIndex;
00006a  f8c48030          STR      r8,[r4,#0x30]
;;;164    		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
00006e  6027              STR      r7,[r4,#0]
;;;165    
;;;166    		/* Initialise all the other co-routine control block parameters. */
;;;167    		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
000070  1d20              ADDS     r0,r4,#4
000072  f7fffffe          BL       vListInitialiseItem
;;;168    		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
000076  f1040018          ADD      r0,r4,#0x18
00007a  f7fffffe          BL       vListInitialiseItem
;;;169    
;;;170    		/* Set the co-routine control block as a link back from the xListItem.
;;;171    		This is so we can get back to the containing CRCB from a generic item
;;;172    		in a list. */
;;;173    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
00007e  6124              STR      r4,[r4,#0x10]
;;;174    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
000080  6264              STR      r4,[r4,#0x24]
;;;175    
;;;176    		/* Event lists are always in priority order. */
;;;177    		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
000082  f1c50005          RSB      r0,r5,#5
000086  61a0              STR      r0,[r4,#0x18]
;;;178    
;;;179    		/* Now the co-routine has been initialised it can be added to the ready
;;;180    		list at the correct priority. */
;;;181    		prvAddCoRoutineToReadyQueue( pxCoRoutine );
000088  6ae0              LDR      r0,[r4,#0x2c]
00008a  6871              LDR      r1,[r6,#4]  ; uxTopCoRoutineReadyPriority
00008c  4288              CMP      r0,r1
00008e  d900              BLS      |L1.146|
000090  6070              STR      r0,[r6,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.146|
000092  4969              LDR      r1,|L1.568|
000094  eb000080          ADD      r0,r0,r0,LSL #2
000098  eb010080          ADD      r0,r1,r0,LSL #2
00009c  1d21              ADDS     r1,r4,#4
00009e  f7fffffe          BL       vListInsertEnd
;;;182    
;;;183    		xReturn = pdPASS;
0000a2  2001              MOVS     r0,#1
                  |L1.164|
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;188    	}
;;;189    
;;;190    	return xReturn;
;;;191    }
0000a4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.168|
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;187
0000ac  e7fa              B        |L1.164|
;;;192    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineAddToDelayedList PROC
;;;193    
;;;194    void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
0000ae  b570              PUSH     {r4-r6,lr}
;;;195    {
0000b0  460e              MOV      r6,r1
;;;196    portTickType xTimeToWake;
;;;197    
;;;198    	/* Calculate the time to wake - this may overflow but this is
;;;199    	not a problem. */
;;;200    	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
0000b2  4d62              LDR      r5,|L1.572|
0000b4  68a9              LDR      r1,[r5,#8]  ; xCoRoutineTickCount
0000b6  180c              ADDS     r4,r1,r0
;;;201    
;;;202    	/* We must remove ourselves from the ready list before adding
;;;203    	ourselves to the blocked list as the same list item is used for
;;;204    	both lists. */
;;;205    	( void ) uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000b8  6828              LDR      r0,[r5,#0]  ; pxCurrentCoRoutine
0000ba  1d00              ADDS     r0,r0,#4
0000bc  f7fffffe          BL       uxListRemove
;;;206    
;;;207    	/* The list item will be inserted in wake time order. */
;;;208    	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
0000c0  6829              LDR      r1,[r5,#0]  ; pxCurrentCoRoutine
0000c2  604c              STR      r4,[r1,#4]
;;;209    
;;;210    	if( xTimeToWake < xCoRoutineTickCount )
0000c4  68a8              LDR      r0,[r5,#8]  ; xCoRoutineTickCount
0000c6  4284              CMP      r4,r0
0000c8  d204              BCS      |L1.212|
;;;211    	{
;;;212    		/* Wake time has overflowed.  Place this item in the
;;;213    		overflow list. */
;;;214    		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000ca  1d09              ADDS     r1,r1,#4
0000cc  69a8              LDR      r0,[r5,#0x18]  ; pxOverflowDelayedCoRoutineList
0000ce  f7fffffe          BL       vListInsert
0000d2  e003              B        |L1.220|
                  |L1.212|
;;;215    	}
;;;216    	else
;;;217    	{
;;;218    		/* The wake time has not overflowed, so we can use the
;;;219    		current block list. */
;;;220    		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000d4  1d09              ADDS     r1,r1,#4
0000d6  6968              LDR      r0,[r5,#0x14]  ; pxDelayedCoRoutineList
0000d8  f7fffffe          BL       vListInsert
                  |L1.220|
;;;221    	}
;;;222    
;;;223    	if( pxEventList )
0000dc  2e00              CMP      r6,#0
0000de  d006              BEQ      |L1.238|
;;;224    	{
;;;225    		/* Also add the co-routine to an event list.  If this is done then the
;;;226    		function must be called with interrupts disabled. */
;;;227    		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
0000e0  6829              LDR      r1,[r5,#0]  ; pxCurrentCoRoutine
0000e2  4630              MOV      r0,r6
0000e4  e8bd4070          POP      {r4-r6,lr}
0000e8  3118              ADDS     r1,r1,#0x18
0000ea  f7ffbffe          B.W      vListInsert
                  |L1.238|
;;;228    	}
;;;229    }
0000ee  bd70              POP      {r4-r6,pc}
;;;230    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckPendingReadyList PROC
;;;231    
;;;232    static void prvCheckPendingReadyList( void )
0000f0  b570              PUSH     {r4-r6,lr}
;;;233    {
;;;234    	/* Are there any co-routines waiting to get moved to the ready list?  These
;;;235    	are co-routines that have been readied by an ISR.  The ISR cannot access
;;;236    	the	ready lists itself. */
;;;237    	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
;;;238    	{
;;;239    		corCRCB *pxUnblockedCRCB;
;;;240    
;;;241    		/* The pending ready list can be accessed by an ISR. */
;;;242    		portDISABLE_INTERRUPTS();
;;;243    		{
;;;244    			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
0000f2  4d51              LDR      r5,|L1.568|
;;;245    			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
;;;246    		}
;;;247    		portENABLE_INTERRUPTS();
;;;248    
;;;249    		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
;;;250    		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
0000f4  4e51              LDR      r6,|L1.572|
0000f6  3550              ADDS     r5,r5,#0x50           ;244
0000f8  e01a              B        |L1.304|
                  |L1.250|
0000fa  f7fffffe          BL       ulPortSetInterruptMask
0000fe  68e8              LDR      r0,[r5,#0xc]          ;244  ; xPendingReadyCoRoutineList
000100  68c4              LDR      r4,[r0,#0xc]          ;244
000102  f1040018          ADD      r0,r4,#0x18           ;245
000106  f7fffffe          BL       uxListRemove
00010a  2000              MOVS     r0,#0                 ;247
00010c  f7fffffe          BL       vPortClearInterruptMask
000110  1d20              ADDS     r0,r4,#4              ;249
000112  f7fffffe          BL       uxListRemove
000116  6ae0              LDR      r0,[r4,#0x2c]
000118  6871              LDR      r1,[r6,#4]  ; uxTopCoRoutineReadyPriority
00011a  4288              CMP      r0,r1
00011c  d900              BLS      |L1.288|
00011e  6070              STR      r0,[r6,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.288|
000120  4945              LDR      r1,|L1.568|
000122  eb000080          ADD      r0,r0,r0,LSL #2
000126  eb010080          ADD      r0,r1,r0,LSL #2
00012a  1d21              ADDS     r1,r4,#4
00012c  f7fffffe          BL       vListInsertEnd
                  |L1.304|
000130  6828              LDR      r0,[r5,#0]            ;237  ; xPendingReadyCoRoutineList
000132  2800              CMP      r0,#0                 ;237
000134  d1e1              BNE      |L1.250|
;;;251    	}
;;;252    }
000136  bd70              POP      {r4-r6,pc}
;;;253    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckDelayedList PROC
;;;254    
;;;255    static void prvCheckDelayedList( void )
000138  b570              PUSH     {r4-r6,lr}
;;;256    {
;;;257    corCRCB *pxCRCB;
;;;258    
;;;259    	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
00013a  f7fffffe          BL       xTaskGetTickCount
00013e  4d3f              LDR      r5,|L1.572|
000140  68e9              LDR      r1,[r5,#0xc]  ; xLastTickCount
000142  1a40              SUBS     r0,r0,r1
000144  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
;;;260    	while( xPassedTicks )
000146  e02f              B        |L1.424|
                  |L1.328|
;;;261    	{
;;;262    		xCoRoutineTickCount++;
000148  68a9              LDR      r1,[r5,#8]  ; xCoRoutineTickCount
00014a  1c49              ADDS     r1,r1,#1
00014c  60a9              STR      r1,[r5,#8]  ; xCoRoutineTickCount
;;;263    		xPassedTicks--;
00014e  1e40              SUBS     r0,r0,#1
000150  6128              STR      r0,[r5,#0x10]  ; xPassedTicks
;;;264    
;;;265    		/* If the tick count has overflowed we need to swap the ready lists. */
;;;266    		if( xCoRoutineTickCount == 0 )
000152  bb29              CBNZ     r1,|L1.416|
;;;267    		{
;;;268    			xList * pxTemp;
;;;269    
;;;270    			/* Tick count has overflowed so we need to swap the delay lists.  If there are
;;;271    			any items in pxDelayedCoRoutineList here then there is an error! */
;;;272    			pxTemp = pxDelayedCoRoutineList;
000154  6968              LDR      r0,[r5,#0x14]  ; pxDelayedCoRoutineList
;;;273    			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
000156  69a9              LDR      r1,[r5,#0x18]  ; pxOverflowDelayedCoRoutineList
000158  6169              STR      r1,[r5,#0x14]  ; pxDelayedCoRoutineList
;;;274    			pxOverflowDelayedCoRoutineList = pxTemp;
00015a  61a8              STR      r0,[r5,#0x18]  ; pxOverflowDelayedCoRoutineList
;;;275    		}
00015c  e020              B        |L1.416|
                  |L1.350|
;;;276    
;;;277    		/* See if this tick has made a timeout expire. */
;;;278    		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
;;;279    		{
;;;280    			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
00015e  68c0              LDR      r0,[r0,#0xc]
000160  68c4              LDR      r4,[r0,#0xc]
;;;281    
;;;282    			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
000162  68a9              LDR      r1,[r5,#8]  ; xCoRoutineTickCount
000164  6860              LDR      r0,[r4,#4]
000166  4288              CMP      r0,r1
000168  d81e              BHI      |L1.424|
;;;283    			{
;;;284    				/* Timeout not yet expired. */
;;;285    				break;
;;;286    			}
;;;287    
;;;288    			portDISABLE_INTERRUPTS();
00016a  f7fffffe          BL       ulPortSetInterruptMask
;;;289    			{
;;;290    				/* The event could have occurred just before this critical
;;;291    				section.  If this is the case then the generic list item will
;;;292    				have been moved to the pending ready list and the following
;;;293    				line is still valid.  Also the pvContainer parameter will have
;;;294    				been set to NULL so the following lines are also valid. */
;;;295    				uxListRemove( &( pxCRCB->xGenericListItem ) );
00016e  1d20              ADDS     r0,r4,#4
000170  f7fffffe          BL       uxListRemove
;;;296    
;;;297    				/* Is the co-routine waiting on an event also? */
;;;298    				if( pxCRCB->xEventListItem.pvContainer )
000174  6aa0              LDR      r0,[r4,#0x28]
000176  b118              CBZ      r0,|L1.384|
;;;299    				{
;;;300    					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
000178  f1040018          ADD      r0,r4,#0x18
00017c  f7fffffe          BL       uxListRemove
                  |L1.384|
;;;301    				}
;;;302    			}
;;;303    			portENABLE_INTERRUPTS();
000180  2000              MOVS     r0,#0
000182  f7fffffe          BL       vPortClearInterruptMask
;;;304    
;;;305    			prvAddCoRoutineToReadyQueue( pxCRCB );
000186  6ae0              LDR      r0,[r4,#0x2c]
000188  6869              LDR      r1,[r5,#4]  ; uxTopCoRoutineReadyPriority
00018a  4288              CMP      r0,r1
00018c  d900              BLS      |L1.400|
00018e  6068              STR      r0,[r5,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.400|
000190  4929              LDR      r1,|L1.568|
000192  eb000080          ADD      r0,r0,r0,LSL #2
000196  eb010080          ADD      r0,r1,r0,LSL #2
00019a  1d21              ADDS     r1,r4,#4
00019c  f7fffffe          BL       vListInsertEnd
                  |L1.416|
0001a0  6968              LDR      r0,[r5,#0x14]         ;278  ; pxDelayedCoRoutineList
0001a2  6801              LDR      r1,[r0,#0]            ;278
0001a4  2900              CMP      r1,#0                 ;278
0001a6  d1da              BNE      |L1.350|
                  |L1.424|
0001a8  6928              LDR      r0,[r5,#0x10]         ;260  ; xPassedTicks
0001aa  2800              CMP      r0,#0                 ;260
0001ac  d1cc              BNE      |L1.328|
;;;306    		}
;;;307    	}
;;;308    
;;;309    	xLastTickCount = xCoRoutineTickCount;
0001ae  68a8              LDR      r0,[r5,#8]  ; xCoRoutineTickCount
0001b0  60e8              STR      r0,[r5,#0xc]  ; xLastTickCount
;;;310    }
0001b2  bd70              POP      {r4-r6,pc}
;;;311    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineSchedule PROC
;;;312    
;;;313    void vCoRoutineSchedule( void )
0001b4  b510              PUSH     {r4,lr}
;;;314    {
;;;315    	/* See if any co-routines readied by events need moving to the ready lists. */
;;;316    	prvCheckPendingReadyList();
0001b6  f7fffffe          BL       prvCheckPendingReadyList
;;;317    
;;;318    	/* See if any delayed co-routines have timed out. */
;;;319    	prvCheckDelayedList();
0001ba  f7fffffe          BL       prvCheckDelayedList
;;;320    
;;;321    	/* Find the highest priority queue that contains ready co-routines. */
;;;322    	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
0001be  4a1e              LDR      r2,|L1.568|
;;;323    	{
;;;324    		if( uxTopCoRoutineReadyPriority == 0 )
0001c0  491e              LDR      r1,|L1.572|
0001c2  e003              B        |L1.460|
                  |L1.452|
0001c4  2800              CMP      r0,#0
0001c6  d01e              BEQ      |L1.518|
;;;325    		{
;;;326    			/* No more co-routines to check. */
;;;327    			return;
;;;328    		}
;;;329    		--uxTopCoRoutineReadyPriority;
0001c8  1e40              SUBS     r0,r0,#1
0001ca  6048              STR      r0,[r1,#4]  ; uxTopCoRoutineReadyPriority
                  |L1.460|
0001cc  6848              LDR      r0,[r1,#4]            ;322  ; uxTopCoRoutineReadyPriority
0001ce  eb000380          ADD      r3,r0,r0,LSL #2       ;322
0001d2  f8523023          LDR      r3,[r2,r3,LSL #2]     ;322
0001d6  2b00              CMP      r3,#0                 ;322
0001d8  d0f4              BEQ      |L1.452|
;;;330    	}
;;;331    
;;;332    	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
;;;333    	 of the	same priority get an equal share of the processor time. */
;;;334    	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
0001da  6848              LDR      r0,[r1,#4]  ; uxTopCoRoutineReadyPriority
0001dc  eb000080          ADD      r0,r0,r0,LSL #2
0001e0  eb020080          ADD      r0,r2,r0,LSL #2
0001e4  6842              LDR      r2,[r0,#4]
0001e6  6852              LDR      r2,[r2,#4]
0001e8  6042              STR      r2,[r0,#4]
0001ea  f1000308          ADD      r3,r0,#8
0001ee  429a              CMP      r2,r3
0001f0  d101              BNE      |L1.502|
0001f2  6852              LDR      r2,[r2,#4]
0001f4  6042              STR      r2,[r0,#4]
                  |L1.502|
0001f6  6840              LDR      r0,[r0,#4]
0001f8  68c0              LDR      r0,[r0,#0xc]
0001fa  6008              STR      r0,[r1,#0]  ; pxCurrentCoRoutine
;;;335    
;;;336    	/* Call the co-routine. */
;;;337    	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
0001fc  6802              LDR      r2,[r0,#0]
0001fe  6b01              LDR      r1,[r0,#0x30]
000200  e8bd4010          POP      {r4,lr}
000204  4710              BX       r2
                  |L1.518|
;;;338    
;;;339    	return;
;;;340    }
000206  bd10              POP      {r4,pc}
;;;341    /*-----------------------------------------------------------*/
                          ENDP

                  xCoRoutineRemoveFromEventList PROC
;;;362    
;;;363    signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
000208  b570              PUSH     {r4-r6,lr}
;;;364    {
;;;365    corCRCB *pxUnblockedCRCB;
;;;366    signed portBASE_TYPE xReturn;
;;;367    
;;;368    	/* This function is called from within an interrupt.  It can only access
;;;369    	event lists and the pending ready list.  This function assumes that a
;;;370    	check has already been made to ensure pxEventList is not empty. */
;;;371    	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
00020a  68c0              LDR      r0,[r0,#0xc]
00020c  68c4              LDR      r4,[r0,#0xc]
;;;372    	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
00020e  f1040018          ADD      r0,r4,#0x18
000212  4605              MOV      r5,r0
000214  f7fffffe          BL       uxListRemove
;;;373    	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
000218  4807              LDR      r0,|L1.568|
00021a  4629              MOV      r1,r5
00021c  3050              ADDS     r0,r0,#0x50
00021e  f7fffffe          BL       vListInsertEnd
;;;374    
;;;375    	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
000222  4906              LDR      r1,|L1.572|
000224  6ae0              LDR      r0,[r4,#0x2c]
000226  6809              LDR      r1,[r1,#0]  ; pxCurrentCoRoutine
000228  6ac9              LDR      r1,[r1,#0x2c]
00022a  4288              CMP      r0,r1
00022c  d301              BCC      |L1.562|
;;;376    	{
;;;377    		xReturn = pdTRUE;
00022e  2001              MOVS     r0,#1
;;;378    	}
;;;379    	else
;;;380    	{
;;;381    		xReturn = pdFALSE;
;;;382    	}
;;;383    
;;;384    	return xReturn;
;;;385    }
000230  bd70              POP      {r4-r6,pc}
                  |L1.562|
000232  2000              MOVS     r0,#0                 ;381
000234  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

000236  0000              DCW      0x0000
                  |L1.568|
                          DCD      ||.bss||
                  |L1.572|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyCoRoutineLists
                          %        40
                  xDelayedCoRoutineList1
                          %        20
                  xDelayedCoRoutineList2
                          %        20
                  xPendingReadyCoRoutineList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentCoRoutine
                          DCD      0x00000000
                  uxTopCoRoutineReadyPriority
                          DCD      0x00000000
                  xCoRoutineTickCount
                          DCD      0x00000000
                  xLastTickCount
                          DCD      0x00000000
                  xPassedTicks
                          DCD      0x00000000
                  pxDelayedCoRoutineList
                          DCD      0x00000000
                  pxOverflowDelayedCoRoutineList
                          DCD      0x00000000
