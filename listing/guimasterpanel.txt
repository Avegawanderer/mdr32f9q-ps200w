; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list -c --asm --interleave -o.\FLASH\guimasterpanel.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\guimasterpanel.d --cpu=Cortex-M3 --apcs=interwork -O1 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -I.\src\gui -I.\src\gui\guiCore -I.\src\gui\guiWidgets -I.\src\gui\guiGraphics -I.\src\gui\utils -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\guimasterpanel.crf src\gui\guiMasterPanel.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_d
                          REQUIRE _printf_c
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  onSpinBoxValueChanged PROC
;;;347    
;;;348    static uint8_t onSpinBoxValueChanged(void *sender, guiEvent_t *event)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350        guiSpinBox_t *spinBox = (guiSpinBox_t *)sender;
;;;351        if (spinBox == &spinBox_voltage)
000002  49fe              LDR      r1,|L1.1020|
000004  4288              CMP      r0,r1
000006  d107              BNE      |L1.24|
;;;352        {
;;;353            applyGuiVoltageSetting(spinBox_voltage.value * 10);
000008  6a88              LDR      r0,[r1,#0x28]  ; spinBox_voltage
00000a  eb000080          ADD      r0,r0,r0,LSL #2
00000e  0440              LSLS     r0,r0,#17
000010  0c00              LSRS     r0,r0,#16
000012  f7fffffe          BL       applyGuiVoltageSetting
000016  e00a              B        |L1.46|
                  |L1.24|
;;;354        }
;;;355        else if (spinBox == &spinBox_current)
000018  49f8              LDR      r1,|L1.1020|
00001a  3148              ADDS     r1,r1,#0x48
00001c  4288              CMP      r0,r1
00001e  d106              BNE      |L1.46|
;;;356        {
;;;357            applyGuiCurrentSetting(spinBox_current.value * 10);
000020  6a88              LDR      r0,[r1,#0x28]  ; spinBox_current
000022  eb000080          ADD      r0,r0,r0,LSL #2
000026  0440              LSLS     r0,r0,#17
000028  0c00              LSRS     r0,r0,#16
00002a  f7fffffe          BL       applyGuiCurrentSetting
                  |L1.46|
;;;358        }
;;;359        return 0;   // doesn't matter
00002e  2000              MOVS     r0,#0
;;;360    }
000030  bd10              POP      {r4,pc}
;;;361    
                          ENDP

                  onSpinBoxDrawEvent PROC
;;;313    
;;;314    static uint8_t onSpinBoxDrawEvent(void *sender, guiEvent_t *event)
000032  e92d41fc          PUSH     {r2-r8,lr}
;;;315    {
000036  4604              MOV      r4,r0
;;;316        guiSpinBox_t *spinBox = (guiSpinBox_t *)sender;
;;;317    
;;;318        if ((spinBox->redrawFocus) && (spinBox == &spinBox_voltage))
;;;319        {
;;;320            if (spinBox->isFocused)
;;;321            {
;;;322                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
;;;323                LCD_DrawImage((uint8_t*)&selector_tri, 88, 40, 6, 12, IMAGE_MODE_NORMAL);
000038  f04f0601          MOV      r6,#1
00003c  7a60              LDRB     r0,[r4,#9]            ;318
00003e  f04f050c          MOV      r5,#0xc
000042  07c0              LSLS     r0,r0,#31             ;318
;;;324            }
;;;325            else
;;;326            {
;;;327                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
;;;328                LCD_DrawImage((uint8_t*)&selector_tri, 88, 40, 6, 12, IMAGE_MODE_INVERSE);
000044  f04f0700          MOV      r7,#0
000048  d01c              BEQ      |L1.132|
00004a  48ec              LDR      r0,|L1.1020|
00004c  4284              CMP      r4,r0                 ;318
00004e  d119              BNE      |L1.132|
000050  7a20              LDRB     r0,[r4,#8]            ;320
000052  0700              LSLS     r0,r0,#28             ;320
000054  d50b              BPL      |L1.110|
000056  2002              MOVS     r0,#2                 ;322
000058  f7fffffe          BL       LCD_SetPixelOutputMode
00005c  e9cd5600          STRD     r5,r6,[sp,#0]         ;323
000060  2306              MOVS     r3,#6                 ;323
000062  2228              MOVS     r2,#0x28              ;323
000064  2158              MOVS     r1,#0x58              ;323
000066  48e6              LDR      r0,|L1.1024|
000068  f7fffffe          BL       LCD_DrawImage
00006c  e00a              B        |L1.132|
                  |L1.110|
00006e  2001              MOVS     r0,#1                 ;327
000070  f7fffffe          BL       LCD_SetPixelOutputMode
000074  e9cd5700          STRD     r5,r7,[sp,#0]
000078  2306              MOVS     r3,#6
00007a  2228              MOVS     r2,#0x28
00007c  2158              MOVS     r1,#0x58
00007e  48e0              LDR      r0,|L1.1024|
000080  f7fffffe          BL       LCD_DrawImage
                  |L1.132|
;;;329            }
;;;330        }
;;;331        if ((spinBox->redrawFocus) && (spinBox == &spinBox_current))
000084  7a60              LDRB     r0,[r4,#9]
000086  07c0              LSLS     r0,r0,#31
000088  d01d              BEQ      |L1.198|
00008a  48dc              LDR      r0,|L1.1020|
00008c  3048              ADDS     r0,r0,#0x48
00008e  4284              CMP      r4,r0
000090  d119              BNE      |L1.198|
;;;332        {
;;;333            if (spinBox->isFocused)
000092  7a20              LDRB     r0,[r4,#8]
000094  0700              LSLS     r0,r0,#28
000096  d50b              BPL      |L1.176|
;;;334            {
;;;335                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
000098  2002              MOVS     r0,#2
00009a  f7fffffe          BL       LCD_SetPixelOutputMode
;;;336                LCD_DrawImage((uint8_t*)&selector_tri, 96+88, 40, 6, 12, IMAGE_MODE_NORMAL);
00009e  e9cd5600          STRD     r5,r6,[sp,#0]
0000a2  2306              MOVS     r3,#6
0000a4  2228              MOVS     r2,#0x28
0000a6  21b8              MOVS     r1,#0xb8
0000a8  48d5              LDR      r0,|L1.1024|
0000aa  f7fffffe          BL       LCD_DrawImage
0000ae  e00a              B        |L1.198|
                  |L1.176|
;;;337            }
;;;338            else
;;;339            {
;;;340                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       LCD_SetPixelOutputMode
;;;341                LCD_DrawImage((uint8_t*)&selector_tri, 96+88, 40, 6, 12, IMAGE_MODE_INVERSE);
0000b6  e9cd5700          STRD     r5,r7,[sp,#0]
0000ba  2306              MOVS     r3,#6
0000bc  2228              MOVS     r2,#0x28
0000be  21b8              MOVS     r1,#0xb8
0000c0  48cf              LDR      r0,|L1.1024|
0000c2  f7fffffe          BL       LCD_DrawImage
                  |L1.198|
;;;342            }
;;;343        }
;;;344        return 0;   // doesn't matter
0000c6  2000              MOVS     r0,#0
;;;345    }
0000c8  e8bd81fc          POP      {r2-r8,pc}
;;;346    
                          ENDP

                  spinBoxEventProcessFunction PROC
;;;289    
;;;290    static uint8_t spinBoxEventProcessFunction(guiGenericWidget_t *widget, guiEvent_t event)
0000cc  b537              PUSH     {r0-r2,r4,r5,lr}
;;;291    {
;;;292        guiSpinBox_t *spinBox = (guiSpinBox_t *)widget;
;;;293        uint8_t processResult = GUI_EVENT_ACCEPTED;
0000ce  2401              MOVS     r4,#1
;;;294    
;;;295        switch(event.type)
0000d0  f89d1004          LDRB     r1,[sp,#4]
0000d4  290c              CMP      r1,#0xc
0000d6  d006              BEQ      |L1.230|
;;;296        {
;;;297            case GUI_EVENT_ENCODER:
;;;298                if (spinBox->isActive)
;;;299                {
;;;300                    processResult = guiSpinBox_ProcessEvent(widget, event);
;;;301                }
;;;302                else
;;;303                {
;;;304                    event.type = SPINBOX_EVENT_ACTIVATE;
;;;305                    guiCore_AddMessageToQueue(widget,&event);   // activate
;;;306                }
;;;307                break;
;;;308            default: processResult = guiSpinBox_ProcessEvent(widget, event);
0000d8  e9dd1201          LDRD     r1,r2,[sp,#4]
0000dc  f7fffffe          BL       guiSpinBox_ProcessEvent
0000e0  4604              MOV      r4,r0
                  |L1.226|
;;;309        }
;;;310        return processResult;
0000e2  4620              MOV      r0,r4
;;;311    }
0000e4  bd3e              POP      {r1-r5,pc}
                  |L1.230|
0000e6  f8901024          LDRB     r1,[r0,#0x24]         ;298
0000ea  0709              LSLS     r1,r1,#28             ;298
0000ec  d505              BPL      |L1.250|
0000ee  e9dd1201          LDRD     r1,r2,[sp,#4]         ;300
0000f2  f7fffffe          BL       guiSpinBox_ProcessEvent
0000f6  4604              MOV      r4,r0                 ;300
0000f8  e7f3              B        |L1.226|
                  |L1.250|
0000fa  2140              MOVS     r1,#0x40              ;304
0000fc  f88d1004          STRB     r1,[sp,#4]            ;304
000100  a901              ADD      r1,sp,#4              ;305
000102  f7fffffe          BL       guiCore_AddMessageToQueue
000106  e7ec              B        |L1.226|
;;;312    
                          ENDP

                  onTextLabelKeyEncoderEvent PROC
;;;382    
;;;383    static uint8_t onTextLabelKeyEncoderEvent(void *sender, guiEvent_t *event)
000108  b510              PUSH     {r4,lr}
;;;384    {
;;;385        guiTextLabel_t *label = (guiTextLabel_t *)sender;
;;;386        uint8_t processResult = GUI_EVENT_ACCEPTED;
00010a  2401              MOVS     r4,#1
;;;387        switch (event->type)
00010c  7808              LDRB     r0,[r1,#0]
00010e  280c              CMP      r0,#0xc
000110  d002              BEQ      |L1.280|
;;;388        {
;;;389            case GUI_EVENT_ENCODER:
;;;390                if ((int16_t)event->lparam < 0)
;;;391                {
;;;392                    applyGuiCurrentLimit(GUI_CURRENT_LIM_LOW);
;;;393                }
;;;394                else if ((int16_t)event->lparam > 0)
;;;395                {
;;;396                    applyGuiCurrentLimit(GUI_CURRENT_LIM_HIGH);
;;;397                }
;;;398                break;
;;;399            default:
;;;400                processResult = GUI_EVENT_DECLINE;
000112  2400              MOVS     r4,#0
                  |L1.276|
;;;401        }
;;;402        return processResult;
000114  4620              MOV      r0,r4
;;;403    }
000116  bd10              POP      {r4,pc}
                  |L1.280|
000118  f9b12002          LDRSH    r2,[r1,#2]            ;390
00011c  2a00              CMP      r2,#0                 ;390
00011e  da04              BGE      |L1.298|
000120  f04f0000          MOV      r0,#0                 ;392
000124  f7fffffe          BL       applyGuiCurrentLimit
000128  e7f4              B        |L1.276|
                  |L1.298|
00012a  ddf3              BLE      |L1.276|
00012c  f04f0001          MOV      r0,#1                 ;396
000130  f7fffffe          BL       applyGuiCurrentLimit
000134  e7ee              B        |L1.276|
;;;404    
                          ENDP

                  onTextLabelDrawEvent PROC
;;;362    
;;;363    static uint8_t onTextLabelDrawEvent(void *sender, guiEvent_t *event)
000136  b51c              PUSH     {r2-r4,lr}
;;;364    {
;;;365        guiTextLabel_t *label = (guiTextLabel_t *)sender;
;;;366        if ((label->redrawFocus) && (label == &textLabel_currLimit))
000138  7a41              LDRB     r1,[r0,#9]
00013a  07c9              LSLS     r1,r1,#31
00013c  d021              BEQ      |L1.386|
00013e  49af              LDR      r1,|L1.1020|
000140  3948              SUBS     r1,r1,#0x48
000142  4288              CMP      r0,r1
000144  d11d              BNE      |L1.386|
;;;367        {
;;;368            if (label->isFocused)
000146  7a00              LDRB     r0,[r0,#8]
;;;369            {
;;;370                LCD_SetPixelOutputMode(PIXEL_MODE_OR);
;;;371                LCD_DrawImage((uint8_t*)&selector_tri, 96 + 32, 56, 6, 12, IMAGE_MODE_NORMAL);
000148  f04f040c          MOV      r4,#0xc
00014c  0700              LSLS     r0,r0,#28             ;368
00014e  d50c              BPL      |L1.362|
000150  2002              MOVS     r0,#2                 ;370
000152  f7fffffe          BL       LCD_SetPixelOutputMode
000156  2001              MOVS     r0,#1
000158  e9cd4000          STRD     r4,r0,[sp,#0]
00015c  2306              MOVS     r3,#6
00015e  2238              MOVS     r2,#0x38
000160  2180              MOVS     r1,#0x80
000162  48a7              LDR      r0,|L1.1024|
000164  f7fffffe          BL       LCD_DrawImage
000168  e00b              B        |L1.386|
                  |L1.362|
;;;372            }
;;;373            else
;;;374            {
;;;375                LCD_SetPixelOutputMode(PIXEL_MODE_AND);
00016a  2001              MOVS     r0,#1
00016c  f7fffffe          BL       LCD_SetPixelOutputMode
;;;376                LCD_DrawImage((uint8_t*)&selector_tri, 96 + 32, 56, 6, 12, IMAGE_MODE_INVERSE);
000170  2000              MOVS     r0,#0
000172  e9cd4000          STRD     r4,r0,[sp,#0]
000176  2306              MOVS     r3,#6
000178  2238              MOVS     r2,#0x38
00017a  2180              MOVS     r1,#0x80
00017c  48a0              LDR      r0,|L1.1024|
00017e  f7fffffe          BL       LCD_DrawImage
                  |L1.386|
;;;377            }
;;;378        }
;;;379        return 0;   // doesn't matter
000182  2000              MOVS     r0,#0
;;;380    }
000184  bd1c              POP      {r2-r4,pc}
;;;381    
                          ENDP

                  guiMasterPanel_ProcessEvents PROC
;;;233    
;;;234    static uint8_t guiMasterPanel_ProcessEvents(struct guiGenericWidget_t *widget, guiEvent_t event)
000186  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;235    {
000188  4606              MOV      r6,r0
;;;236        uint8_t processResult = GUI_EVENT_ACCEPTED;
00018a  2501              MOVS     r5,#1
;;;237        switch (event.type)
00018c  f89d1004          LDRB     r1,[sp,#4]
000190  2901              CMP      r1,#1
000192  d004              BEQ      |L1.414|
000194  2909              CMP      r1,#9
000196  d047              BEQ      |L1.552|
000198  290b              CMP      r1,#0xb
00019a  d176              BNE      |L1.650|
00019c  e052              B        |L1.580|
                  |L1.414|
;;;238        {
;;;239            case GUI_EVENT_DRAW:
;;;240                guiGraph_DrawPanel(&guiMasterPanel);
00019e  4897              LDR      r0,|L1.1020|
0001a0  30a0              ADDS     r0,r0,#0xa0
0001a2  f7fffffe          BL       guiGraph_DrawPanel
;;;241    
;;;242                if (guiMasterPanel.redrawForced)
0001a6  4c95              LDR      r4,|L1.1020|
0001a8  34a0              ADDS     r4,r4,#0xa0
0001aa  7a20              LDRB     r0,[r4,#8]  ; guiMasterPanel
0001ac  0600              LSLS     r0,r0,#24
0001ae  d532              BPL      |L1.534|
;;;243                {
;;;244                    // Draw static elements
;;;245                    LCD_SetPixelOutputMode(PIXEL_MODE_REWRITE);
0001b0  2000              MOVS     r0,#0
0001b2  f7fffffe          BL       LCD_SetPixelOutputMode
;;;246                    LCD_SetLineStyle(LINE_STYLE_SOLID);
0001b6  2010              MOVS     r0,#0x10
0001b8  f7fffffe          BL       LCD_SetLineStyle
;;;247                    LCD_DrawHorLine(0, 55, 96*2, 1);
0001bc  2301              MOVS     r3,#1
0001be  22c0              MOVS     r2,#0xc0
0001c0  2137              MOVS     r1,#0x37
0001c2  2000              MOVS     r0,#0
0001c4  f7fffffe          BL       LCD_DrawHorLine
;;;248                    LCD_DrawVertLine(48, 56, 13, 1);
0001c8  2301              MOVS     r3,#1
0001ca  220d              MOVS     r2,#0xd
0001cc  2138              MOVS     r1,#0x38
0001ce  2030              MOVS     r0,#0x30
0001d0  f7fffffe          BL       LCD_DrawVertLine
;;;249                    LCD_DrawVertLine(96+42, 56 , 13, 1);
0001d4  2301              MOVS     r3,#1
0001d6  220d              MOVS     r2,#0xd
0001d8  2138              MOVS     r1,#0x38
0001da  208a              MOVS     r0,#0x8a
0001dc  f7fffffe          BL       LCD_DrawVertLine
;;;250                    LCD_SetFont(&font_h11);
0001e0  4888              LDR      r0,|L1.1028|
0001e2  f7fffffe          BL       LCD_SetFont
;;;251                    LCD_PrintString("SET:", 2, 41, IMAGE_MODE_NORMAL);
0001e6  2301              MOVS     r3,#1
0001e8  2229              MOVS     r2,#0x29
0001ea  2102              MOVS     r1,#2
0001ec  a086              ADR      r0,|L1.1032|
0001ee  f7fffffe          BL       LCD_PrintString
;;;252                    LCD_PrintString("V", 75, 41, IMAGE_MODE_NORMAL);
0001f2  2301              MOVS     r3,#1
0001f4  2229              MOVS     r2,#0x29
0001f6  214b              MOVS     r1,#0x4b
0001f8  a085              ADR      r0,|L1.1040|
0001fa  f7fffffe          BL       LCD_PrintString
;;;253                    LCD_PrintString("SET:", 96+2, 41, IMAGE_MODE_NORMAL);
0001fe  2301              MOVS     r3,#1
000200  2229              MOVS     r2,#0x29
000202  2162              MOVS     r1,#0x62
000204  a080              ADR      r0,|L1.1032|
000206  f7fffffe          BL       LCD_PrintString
;;;254                    LCD_PrintString("A", 96+75, 41, IMAGE_MODE_NORMAL);
00020a  2301              MOVS     r3,#1
00020c  2229              MOVS     r2,#0x29
00020e  21ab              MOVS     r1,#0xab
000210  a080              ADR      r0,|L1.1044|
000212  f7fffffe          BL       LCD_PrintString
                  |L1.534|
;;;255                }
;;;256                // Reset flags - redrawForced will be reset by core
;;;257                guiMasterPanel.redrawFocus = 0;
000216  7a60              LDRB     r0,[r4,#9]  ; guiMasterPanel
000218  f0200001          BIC      r0,r0,#1
00021c  7260              STRB     r0,[r4,#9]
;;;258                guiMasterPanel.redrawRequired = 0;
00021e  7a20              LDRB     r0,[r4,#8]  ; guiMasterPanel
000220  f0200040          BIC      r0,r0,#0x40
000224  7220              STRB     r0,[r4,#8]
;;;259                break;
000226  e036              B        |L1.662|
                  |L1.552|
;;;260            case GUI_EVENT_FOCUS:
;;;261                processResult = guiPanel_ProcessEvent(widget, event);
000228  e9dd1201          LDRD     r1,r2,[sp,#4]
00022c  4630              MOV      r0,r6
00022e  f7fffffe          BL       guiPanel_ProcessEvent
000232  4605              MOV      r5,r0
;;;262                if (processResult == GUI_EVENT_ACCEPTED)
000234  2d01              CMP      r5,#1
000236  d12e              BNE      |L1.662|
;;;263                    guiCore_RequestFocusNextWidget((guiGenericContainer_t *)&guiMasterPanel,1);
000238  4870              LDR      r0,|L1.1020|
00023a  2101              MOVS     r1,#1
00023c  30a0              ADDS     r0,r0,#0xa0
00023e  f7fffffe          BL       guiCore_RequestFocusNextWidget
000242  e028              B        |L1.662|
                  |L1.580|
;;;264                break;
;;;265            case GUI_EVENT_KEY:
;;;266                if ((event.spec == GUI_KEY_EVENT_DOWN) && (event.lparam == GUI_KEY_ENCODER))
000244  f89d0005          LDRB     r0,[sp,#5]
000248  2801              CMP      r0,#1
00024a  d11e              BNE      |L1.650|
00024c  f8bd0006          LDRH     r0,[sp,#6]
000250  2807              CMP      r0,#7
000252  d11a              BNE      |L1.650|
;;;267                {
;;;268                    if (spinBox_voltage.isFocused)
000254  4869              LDR      r0,|L1.1020|
;;;269                    {
;;;270                        guiCore_RequestFocusChange((guiGenericWidget_t *)&spinBox_current);
;;;271                        event.type = SPINBOX_EVENT_ACTIVATE;
000256  f04f0440          MOV      r4,#0x40
00025a  7a00              LDRB     r0,[r0,#8]            ;268  ; spinBox_voltage
00025c  0700              LSLS     r0,r0,#28             ;268
00025e  d50b              BPL      |L1.632|
000260  4866              LDR      r0,|L1.1020|
000262  3048              ADDS     r0,r0,#0x48           ;270
000264  f7fffffe          BL       guiCore_RequestFocusChange
000268  f88d4004          STRB     r4,[sp,#4]
;;;272                        guiCore_AddMessageToQueue((guiGenericWidget_t *)&spinBox_current,&event);   // activate
00026c  4863              LDR      r0,|L1.1020|
00026e  a901              ADD      r1,sp,#4
000270  3048              ADDS     r0,r0,#0x48
000272  f7fffffe          BL       guiCore_AddMessageToQueue
000276  e008              B        |L1.650|
                  |L1.632|
;;;273                    }
;;;274                    else
;;;275                    {
;;;276                        guiCore_RequestFocusChange((guiGenericWidget_t *)&spinBox_voltage);
000278  4860              LDR      r0,|L1.1020|
00027a  f7fffffe          BL       guiCore_RequestFocusChange
;;;277                        event.type = SPINBOX_EVENT_ACTIVATE;
00027e  f88d4004          STRB     r4,[sp,#4]
;;;278                        guiCore_AddMessageToQueue((guiGenericWidget_t *)&spinBox_voltage,&event);   // activate
000282  a901              ADD      r1,sp,#4
000284  485d              LDR      r0,|L1.1020|
000286  f7fffffe          BL       guiCore_AddMessageToQueue
                  |L1.650|
;;;279                    }
;;;280                }
;;;281                // fall down to default
;;;282            default:
;;;283                processResult = guiPanel_ProcessEvent(widget, event);
00028a  e9dd1201          LDRD     r1,r2,[sp,#4]
00028e  4630              MOV      r0,r6
000290  f7fffffe          BL       guiPanel_ProcessEvent
000294  4605              MOV      r5,r0
                  |L1.662|
;;;284        }
;;;285    
;;;286        return processResult;
000296  4628              MOV      r0,r5
;;;287    }
000298  bdfe              POP      {r1-r7,pc}
;;;288    
                          ENDP

                  guiMasterPanel_Initialize PROC
;;;72     //-------------------------------------------------------//
;;;73     void guiMasterPanel_Initialize(guiGenericWidget_t *parent)
00029a  e92d5ff0          PUSH     {r4-r12,lr}
;;;74     {
;;;75         // Initialize form
;;;76         guiPanel_Initialize(&guiMasterPanel, parent);
00029e  4601              MOV      r1,r0
0002a0  4856              LDR      r0,|L1.1020|
0002a2  30a0              ADDS     r0,r0,#0xa0
0002a4  f7fffffe          BL       guiPanel_Initialize
;;;77         guiMasterPanel.processEvent = guiMasterPanel_ProcessEvents;     // redefine standard panel message processing funtion
0002a8  4954              LDR      r1,|L1.1020|
0002aa  485b              LDR      r0,|L1.1048|
0002ac  31a0              ADDS     r1,r1,#0xa0
0002ae  6148              STR      r0,[r1,#0x14]  ; guiMasterPanel
;;;78         guiMasterPanel.widgets.count = MASTER_PANEL_ELEMENTS_COUNT;
0002b0  2008              MOVS     r0,#8
0002b2  f8810020          STRB     r0,[r1,#0x20]
;;;79         guiMasterPanel.widgets.elements = guiMasterPanelElements;
0002b6  f101002c          ADD      r0,r1,#0x2c
0002ba  6248              STR      r0,[r1,#0x24]  ; guiMasterPanel
;;;80         guiMasterPanel.widgets.elements[0] = &textLabel_voltage;
0002bc  312c              ADDS     r1,r1,#0x2c
0002be  f5a0700b          SUB      r0,r0,#0x22c
0002c2  6008              STR      r0,[r1,#0]
;;;81         guiMasterPanel.widgets.elements[1] = &textLabel_current;
0002c4  3038              ADDS     r0,r0,#0x38
0002c6  6048              STR      r0,[r1,#4]
;;;82         guiMasterPanel.widgets.elements[2] = &textLabel_power;
0002c8  3038              ADDS     r0,r0,#0x38
0002ca  6088              STR      r0,[r1,#8]
;;;83         guiMasterPanel.widgets.elements[3] = &textLabel_temperature;
0002cc  3038              ADDS     r0,r0,#0x38
0002ce  60c8              STR      r0,[r1,#0xc]
;;;84         guiMasterPanel.widgets.elements[4] = &textLabel_channel;
0002d0  3038              ADDS     r0,r0,#0x38
0002d2  6108              STR      r0,[r1,#0x10]
;;;85         guiMasterPanel.widgets.elements[5] = &textLabel_currLimit;      // focusable!
0002d4  f1000638          ADD      r6,r0,#0x38
0002d8  4608              MOV      r0,r1
0002da  6146              STR      r6,[r0,#0x14]
;;;86         guiMasterPanel.widgets.elements[6] = &spinBox_voltage;          // focusable
0002dc  4c47              LDR      r4,|L1.1020|
0002de  6184              STR      r4,[r0,#0x18]
;;;87         guiMasterPanel.widgets.elements[7] = &spinBox_current;          // focusable
0002e0  f1a00584          SUB      r5,r0,#0x84
0002e4  61c5              STR      r5,[r0,#0x1c]
;;;88         guiMasterPanel.x = 0;
0002e6  2000              MOVS     r0,#0
0002e8  392c              SUBS     r1,r1,#0x2c
0002ea  8188              STRH     r0,[r1,#0xc]
;;;89         guiMasterPanel.y = 0;
0002ec  81c8              STRH     r0,[r1,#0xe]
;;;90         guiMasterPanel.width = 96 * 2;
0002ee  20c0              MOVS     r0,#0xc0
0002f0  8208              STRH     r0,[r1,#0x10]
;;;91         guiMasterPanel.height = 68;
0002f2  2044              MOVS     r0,#0x44
0002f4  8248              STRH     r0,[r1,#0x12]
;;;92         guiMasterPanel.showFocus = 0;
0002f6  4608              MOV      r0,r1
0002f8  7a40              LDRB     r0,[r0,#9]  ; guiMasterPanel
0002fa  f0200002          BIC      r0,r0,#2
0002fe  7248              STRB     r0,[r1,#9]
;;;93         guiMasterPanel.focusFallsThrough = 0;
000300  4608              MOV      r0,r1
000302  f8900028          LDRB     r0,[r0,#0x28]  ; guiMasterPanel
000306  f0200001          BIC      r0,r0,#1
00030a  f8810028          STRB     r0,[r1,#0x28]
;;;94     
;;;95         // Initialize text label for measured voltage display
;;;96         guiTextLabel_Initialize(&textLabel_voltage, (guiGenericWidget_t *)&guiMasterPanel);
00030e  f5a17000          SUB      r0,r1,#0x200
000312  f7fffffe          BL       guiTextLabel_Initialize
;;;97         textLabel_voltage.x = 1;
000316  f5a471b0          SUB      r1,r4,#0x160
00031a  2001              MOVS     r0,#1
00031c  8188              STRH     r0,[r1,#0xc]
;;;98         textLabel_voltage.y = 1;
00031e  81c8              STRH     r0,[r1,#0xe]
;;;99         textLabel_voltage.width = 94;
000320  205e              MOVS     r0,#0x5e
000322  8208              STRH     r0,[r1,#0x10]
;;;100        textLabel_voltage.height = 32;
000324  2020              MOVS     r0,#0x20
000326  8248              STRH     r0,[r1,#0x12]
;;;101        textLabel_voltage.textAlignment = ALIGN_TOP_RIGHT;
000328  2006              MOVS     r0,#6
00032a  f8810028          STRB     r0,[r1,#0x28]
;;;102        textLabel_voltage.text = label_voltage_data;
00032e  f101002c          ADD      r0,r1,#0x2c
000332  6208              STR      r0,[r1,#0x20]  ; textLabel_voltage
;;;103        textLabel_voltage.font = &font_h32;
000334  4839              LDR      r0,|L1.1052|
000336  6248              STR      r0,[r1,#0x24]  ; textLabel_voltage
;;;104    
;;;105        // Initialize text label for measured current display
;;;106        guiTextLabel_Initialize(&textLabel_current, (guiGenericWidget_t *)&guiMasterPanel);
000338  f5017100          ADD      r1,r1,#0x200
00033c  f5a170e4          SUB      r0,r1,#0x1c8
000340  f7fffffe          BL       guiTextLabel_Initialize
;;;107        textLabel_current.x = 96 + 1;
000344  f5a47094          SUB      r0,r4,#0x128
000348  f04f0961          MOV      r9,#0x61
00034c  f8a0900c          STRH     r9,[r0,#0xc]
;;;108        textLabel_current.y = 1;
000350  f5a47194          SUB      r1,r4,#0x128
000354  2001              MOVS     r0,#1
000356  81c8              STRH     r0,[r1,#0xe]
;;;109        textLabel_current.width = 94;
000358  205e              MOVS     r0,#0x5e
00035a  8208              STRH     r0,[r1,#0x10]
;;;110        textLabel_current.height = 32;
00035c  2020              MOVS     r0,#0x20
00035e  8248              STRH     r0,[r1,#0x12]
;;;111        textLabel_current.textAlignment = ALIGN_TOP_RIGHT;
000360  2006              MOVS     r0,#6
000362  f8810028          STRB     r0,[r1,#0x28]
;;;112        textLabel_current.text = label_current_data;
000366  f101002c          ADD      r0,r1,#0x2c
00036a  6208              STR      r0,[r1,#0x20]  ; textLabel_current
;;;113        textLabel_current.font = &font_h32;
00036c  482b              LDR      r0,|L1.1052|
00036e  6248              STR      r0,[r1,#0x24]  ; textLabel_current
;;;114    
;;;115        // Initialize text label for measured power display
;;;116        guiTextLabel_Initialize(&textLabel_power, (guiGenericWidget_t *)&guiMasterPanel);
000370  f50171e4          ADD      r1,r1,#0x1c8
000374  f5a170c8          SUB      r0,r1,#0x190
000378  f7fffffe          BL       guiTextLabel_Initialize
;;;117        textLabel_power.x = 96 + 45;
00037c  f1a401f0          SUB      r1,r4,#0xf0
000380  208d              MOVS     r0,#0x8d
000382  8188              STRH     r0,[r1,#0xc]
;;;118        textLabel_power.y = 57;
000384  2039              MOVS     r0,#0x39
000386  81c8              STRH     r0,[r1,#0xe]
;;;119        textLabel_power.width = 50;
000388  2032              MOVS     r0,#0x32
00038a  8208              STRH     r0,[r1,#0x10]
;;;120        textLabel_power.height = 11;
00038c  200b              MOVS     r0,#0xb
00038e  8248              STRH     r0,[r1,#0x12]
;;;121        textLabel_power.textAlignment = ALIGN_TOP_RIGHT;
000390  2006              MOVS     r0,#6
000392  f8810028          STRB     r0,[r1,#0x28]
;;;122        textLabel_power.text = label_power_data;
000396  f101002c          ADD      r0,r1,#0x2c
00039a  6208              STR      r0,[r1,#0x20]  ; textLabel_power
;;;123        textLabel_power.font = &font_h11;
00039c  4819              LDR      r0,|L1.1028|
00039e  6248              STR      r0,[r1,#0x24]  ; textLabel_power
;;;124    
;;;125        // Initialize text label for temperature display
;;;126        guiTextLabel_Initialize(&textLabel_temperature, (guiGenericWidget_t *)&guiMasterPanel);
0003a0  f50171c8          ADD      r1,r1,#0x190
0003a4  f5a170ac          SUB      r0,r1,#0x158
0003a8  f7fffffe          BL       guiTextLabel_Initialize
;;;127        textLabel_temperature.x = 55;
0003ac  f1a401b8          SUB      r1,r4,#0xb8
0003b0  2037              MOVS     r0,#0x37
0003b2  8188              STRH     r0,[r1,#0xc]
;;;128        textLabel_temperature.y = 57;
0003b4  2039              MOVS     r0,#0x39
0003b6  81c8              STRH     r0,[r1,#0xe]
;;;129        textLabel_temperature.width = 40;
0003b8  2028              MOVS     r0,#0x28
0003ba  8208              STRH     r0,[r1,#0x10]
;;;130        textLabel_temperature.height = 11;
0003bc  200b              MOVS     r0,#0xb
0003be  8248              STRH     r0,[r1,#0x12]
;;;131        textLabel_temperature.textAlignment = ALIGN_TOP_LEFT;
0003c0  4608              MOV      r0,r1
0003c2  2705              MOVS     r7,#5
0003c4  f8807028          STRB     r7,[r0,#0x28]
;;;132        textLabel_temperature.text = label_temperature_data;
0003c8  302c              ADDS     r0,r0,#0x2c
0003ca  6208              STR      r0,[r1,#0x20]  ; textLabel_temperature
;;;133        textLabel_temperature.font = &font_h11;
0003cc  480d              LDR      r0,|L1.1028|
0003ce  6248              STR      r0,[r1,#0x24]  ; textLabel_temperature
;;;134    
;;;135        // Initialize text label for feedback channel display
;;;136        guiTextLabel_Initialize(&textLabel_channel, (guiGenericWidget_t *)&guiMasterPanel);
0003d0  f50171ac          ADD      r1,r1,#0x158
0003d4  f5a17090          SUB      r0,r1,#0x120
0003d8  f7fffffe          BL       guiTextLabel_Initialize
;;;137        textLabel_channel.x = 1;
0003dc  f1a40180          SUB      r1,r4,#0x80
0003e0  2001              MOVS     r0,#1
0003e2  8188              STRH     r0,[r1,#0xc]
;;;138        textLabel_channel.y = 57;
0003e4  2039              MOVS     r0,#0x39
0003e6  81c8              STRH     r0,[r1,#0xe]
;;;139        textLabel_channel.width = 45;
0003e8  4608              MOV      r0,r1
0003ea  f04f082d          MOV      r8,#0x2d
0003ee  f8a08010          STRH     r8,[r0,#0x10]
;;;140        textLabel_channel.height = 11;
0003f2  200b              MOVS     r0,#0xb
0003f4  8248              STRH     r0,[r1,#0x12]
;;;141        textLabel_channel.textAlignment = ALIGN_TOP_LEFT;
0003f6  4608              MOV      r0,r1
0003f8  e012              B        |L1.1056|
0003fa  0000              DCW      0x0000
                  |L1.1020|
                          DCD      ||.bss||+0x160
                  |L1.1024|
                          DCD      selector_tri
                  |L1.1028|
                          DCD      font_h11
                  |L1.1032|
000408  5345543a          DCB      "SET:",0
00040c  00      
00040d  00                DCB      0
00040e  00                DCB      0
00040f  00                DCB      0
                  |L1.1040|
000410  5600              DCB      "V",0
000412  00                DCB      0
000413  00                DCB      0
                  |L1.1044|
000414  4100              DCB      "A",0
000416  00                DCB      0
000417  00                DCB      0
                  |L1.1048|
                          DCD      guiMasterPanel_ProcessEvents
                  |L1.1052|
                          DCD      font_h32
                  |L1.1056|
000420  f8807028          STRB     r7,[r0,#0x28]
;;;142        textLabel_channel.text = label_channel_data;
000424  302c              ADDS     r0,r0,#0x2c
000426  6208              STR      r0,[r1,#0x20]  ; textLabel_channel
;;;143        textLabel_channel.font = &font_h11;
000428  48a6              LDR      r0,|L1.1732|
00042a  6248              STR      r0,[r1,#0x24]  ; textLabel_channel
;;;144    
;;;145        // Initialize text label for current limit display and control
;;;146        guiTextLabel_Initialize(&textLabel_currLimit, (guiGenericWidget_t *)&guiMasterPanel);
00042c  f5017190          ADD      r1,r1,#0x120
000430  4630              MOV      r0,r6
000432  f7fffffe          BL       guiTextLabel_Initialize
;;;147        textLabel_currLimit.x = 96+1;
000436  f8a6900c          STRH     r9,[r6,#0xc]
;;;148        textLabel_currLimit.y = 57;
00043a  2039              MOVS     r0,#0x39
00043c  81f0              STRH     r0,[r6,#0xe]
;;;149        textLabel_currLimit.width = 25;
00043e  2019              MOVS     r0,#0x19
000440  8230              STRH     r0,[r6,#0x10]
;;;150        textLabel_currLimit.height = 11;
000442  200b              MOVS     r0,#0xb
000444  8270              STRH     r0,[r6,#0x12]
;;;151        textLabel_currLimit.textAlignment = ALIGN_TOP_LEFT;
000446  f8867028          STRB     r7,[r6,#0x28]
;;;152        textLabel_currLimit.text = label_currLimit_data;
00044a  f1a4001c          SUB      r0,r4,#0x1c
00044e  6230              STR      r0,[r6,#0x20]  ; textLabel_currLimit
;;;153        textLabel_currLimit.font = &font_h11;
000450  489c              LDR      r0,|L1.1732|
000452  6270              STR      r0,[r6,#0x24]  ; textLabel_currLimit
;;;154        textLabel_currLimit.acceptFocusByTab = 1;
000454  7a30              LDRB     r0,[r6,#8]  ; textLabel_currLimit
000456  f0400001          ORR      r0,r0,#1
00045a  7230              STRB     r0,[r6,#8]
;;;155        textLabel_currLimit.tabIndex = 13;
00045c  200d              MOVS     r0,#0xd
00045e  72f0              STRB     r0,[r6,#0xb]
;;;156        textLabel_currLimit.showFocus = 0;
000460  7a70              LDRB     r0,[r6,#9]  ; textLabel_currLimit
000462  f0200002          BIC      r0,r0,#2
000466  7270              STRB     r0,[r6,#9]
;;;157        // Handlers:
;;;158        textLabelHandlers[0].eventType = GUI_EVENT_DRAW;
000468  f1a40010          SUB      r0,r4,#0x10
00046c  2101              MOVS     r1,#1
00046e  7001              STRB     r1,[r0,#0]
;;;159        textLabelHandlers[0].handler = onTextLabelDrawEvent;
000470  4995              LDR      r1,|L1.1736|
000472  6041              STR      r1,[r0,#4]  ; textLabelHandlers
;;;160        textLabelHandlers[1].eventType = GUI_EVENT_ENCODER;
000474  210c              MOVS     r1,#0xc
000476  7201              STRB     r1,[r0,#8]
;;;161        textLabelHandlers[1].handler = onTextLabelKeyEncoderEvent;
000478  4994              LDR      r1,|L1.1740|
00047a  60c1              STR      r1,[r0,#0xc]  ; textLabelHandlers
;;;162        textLabel_currLimit.handlers.count = 2;
00047c  2702              MOVS     r7,#2
00047e  7637              STRB     r7,[r6,#0x18]
;;;163        textLabel_currLimit.handlers.elements = textLabelHandlers;
000480  61f0              STR      r0,[r6,#0x1c]  ; textLabel_currLimit
;;;164    
;;;165    
;;;166        guiSpinBox_Initialize(&spinBox_voltage, (guiGenericWidget_t *)&guiMasterPanel);
000482  f10001b0          ADD      r1,r0,#0xb0
000486  3010              ADDS     r0,r0,#0x10
000488  f7fffffe          BL       guiSpinBox_Initialize
;;;167        spinBox_voltage.processEvent = spinBoxEventProcessFunction;
00048c  f1040408          ADD      r4,r4,#8
000490  f8df923c          LDR      r9,|L1.1744|
000494  f8c4900c          STR      r9,[r4,#0xc]  ; spinBox_voltage
;;;168        spinBox_voltage.x = 30;
000498  f04f001e          MOV      r0,#0x1e
00049c  80a0              STRH     r0,[r4,#4]
;;;169        spinBox_voltage.y = 34;
00049e  f04f0a22          MOV      r10,#0x22
0004a2  f8a4a006          STRH     r10,[r4,#6]
;;;170        spinBox_voltage.width = 45;
0004a6  f8a48008          STRH     r8,[r4,#8]
;;;171        spinBox_voltage.height = 21;
0004aa  f04f0b15          MOV      r11,#0x15
0004ae  f8a4b00a          STRH     r11,[r4,#0xa]
;;;172        spinBox_voltage.textRightOffset = 0;
0004b2  f04f0000          MOV      r0,#0
0004b6  f884003d          STRB     r0,[r4,#0x3d]
;;;173        spinBox_voltage.textTopOffset = 1;
0004ba  f04f0001          MOV      r0,#1
0004be  f884003e          STRB     r0,[r4,#0x3e]
;;;174        spinBox_voltage.tabIndex = 11;
0004c2  f04f000b          MOV      r0,#0xb
0004c6  70e0              STRB     r0,[r4,#3]
;;;175        spinBox_voltage.font = &font_h16;
0004c8  4e82              LDR      r6,|L1.1748|
0004ca  61a6              STR      r6,[r4,#0x18]  ; spinBox_voltage
;;;176        spinBox_voltage.dotPosition = 2;
0004cc  77e7              STRB     r7,[r4,#0x1f]
;;;177        spinBox_voltage.activeDigit = 2;
0004ce  77a7              STRB     r7,[r4,#0x1e]
;;;178        spinBox_voltage.minDigitsToDisplay = 3;
0004d0  f04f0003          MOV      r0,#3
0004d4  7760              STRB     r0,[r4,#0x1d]
;;;179        spinBox_voltage.restoreValueOnEscape = 1;
0004d6  7f20              LDRB     r0,[r4,#0x1c]  ; spinBox_voltage
0004d8  f0400010          ORR      r0,r0,#0x10
0004dc  7720              STRB     r0,[r4,#0x1c]
;;;180        spinBox_voltage.maxValue = 4100;
0004de  f2410004          MOV      r0,#0x1004
0004e2  62a0              STR      r0,[r4,#0x28]  ; spinBox_voltage
;;;181        spinBox_voltage.minValue = 0;
0004e4  f04f0000          MOV      r0,#0
0004e8  62e0              STR      r0,[r4,#0x2c]  ; spinBox_voltage
;;;182        spinBox_voltage.showFocus = 0;
0004ea  7860              LDRB     r0,[r4,#1]  ; spinBox_voltage
0004ec  f0200002          BIC      r0,r0,#2
0004f0  7060              STRB     r0,[r4,#1]
;;;183    
;;;184        guiSpinBox_Initialize(&spinBox_current, (guiGenericWidget_t *)&guiMasterPanel);
0004f2  f1050158          ADD      r1,r5,#0x58
0004f6  4628              MOV      r0,r5
0004f8  f7fffffe          BL       guiSpinBox_Initialize
;;;185        spinBox_current.processEvent = spinBoxEventProcessFunction;
0004fc  f1050508          ADD      r5,r5,#8
000500  f8c5900c          STR      r9,[r5,#0xc]  ; spinBox_current
;;;186        spinBox_current.x = 96+30;
000504  f04f007e          MOV      r0,#0x7e
000508  80a8              STRH     r0,[r5,#4]
;;;187        spinBox_current.y = 34;
00050a  f8a5a006          STRH     r10,[r5,#6]
;;;188        spinBox_current.width = 45;
00050e  f8a58008          STRH     r8,[r5,#8]
;;;189        spinBox_current.height = 21;
000512  f8a5b00a          STRH     r11,[r5,#0xa]
;;;190        spinBox_current.textRightOffset = 0;
000516  f04f0000          MOV      r0,#0
00051a  f885003d          STRB     r0,[r5,#0x3d]
;;;191        spinBox_current.textTopOffset = 1;
00051e  f04f0001          MOV      r0,#1
000522  f885003e          STRB     r0,[r5,#0x3e]
;;;192        spinBox_current.tabIndex = 12;
000526  f04f000c          MOV      r0,#0xc
00052a  70e8              STRB     r0,[r5,#3]
;;;193        spinBox_current.font = &font_h16;
00052c  61ae              STR      r6,[r5,#0x18]  ; spinBox_current
;;;194        spinBox_current.dotPosition = 2;
00052e  77ef              STRB     r7,[r5,#0x1f]
;;;195        spinBox_current.activeDigit = 2;
000530  77af              STRB     r7,[r5,#0x1e]
;;;196        spinBox_current.minDigitsToDisplay = 3;
000532  f04f0003          MOV      r0,#3
000536  7768              STRB     r0,[r5,#0x1d]
;;;197        spinBox_current.restoreValueOnEscape = 1;
000538  7f28              LDRB     r0,[r5,#0x1c]  ; spinBox_current
00053a  f0400010          ORR      r0,r0,#0x10
00053e  7728              STRB     r0,[r5,#0x1c]
;;;198        spinBox_current.maxValue = 4100;
000540  f2410004          MOV      r0,#0x1004
000544  62a8              STR      r0,[r5,#0x28]  ; spinBox_current
;;;199        spinBox_current.minValue = 0;
000546  f04f0000          MOV      r0,#0
00054a  62e8              STR      r0,[r5,#0x2c]  ; spinBox_current
;;;200        spinBox_current.showFocus = 0;
00054c  7868              LDRB     r0,[r5,#1]  ; spinBox_current
00054e  f0200002          BIC      r0,r0,#2
000552  7068              STRB     r0,[r5,#1]
;;;201    
;;;202        spinBoxHandlers[0].eventType = GUI_EVENT_DRAW;
000554  4860              LDR      r0,|L1.1752|
000556  f04f0101          MOV      r1,#1
00055a  7001              STRB     r1,[r0,#0]
;;;203        spinBoxHandlers[0].handler = onSpinBoxDrawEvent;
00055c  495f              LDR      r1,|L1.1756|
00055e  6041              STR      r1,[r0,#4]  ; spinBoxHandlers
;;;204        spinBoxHandlers[1].eventType = SPINBOX_VALUE_CHANGED;
000560  f04f01c1          MOV      r1,#0xc1
000564  7201              STRB     r1,[r0,#8]
;;;205        spinBoxHandlers[1].handler = onSpinBoxValueChanged;
000566  495e              LDR      r1,|L1.1760|
000568  60c1              STR      r1,[r0,#0xc]  ; spinBoxHandlers
;;;206        spinBox_voltage.handlers.count = 2;
00056a  7427              STRB     r7,[r4,#0x10]
;;;207        spinBox_voltage.handlers.elements = spinBoxHandlers;
00056c  6160              STR      r0,[r4,#0x14]  ; spinBox_voltage
;;;208        spinBox_current.handlers.count = 2;
00056e  742f              STRB     r7,[r5,#0x10]
;;;209        spinBox_current.handlers.elements = spinBoxHandlers;
000570  6168              STR      r0,[r5,#0x14]  ; spinBox_current
;;;210    
;;;211    
;;;212    
;;;213    #if 0
;;;214        textLabel_voltage.hasFrame = 1;
;;;215        textLabel_voltage.showFocus = 1;
;;;216        textLabel_current.hasFrame = 1;
;;;217        textLabel_current.showFocus = 1;
;;;218        textLabel_power.hasFrame = 1;
;;;219        textLabel_power.showFocus = 1;
;;;220        textLabel_temperature.hasFrame = 1;
;;;221        textLabel_temperature.showFocus = 1;
;;;222        textLabel_channel.hasFrame = 1;
;;;223        textLabel_channel.showFocus = 1;
;;;224        textLabel_currLimit.hasFrame = 1;
;;;225        textLabel_currLimit.showFocus = 1;
;;;226        spinBox_voltage.hasFrame = 1;
;;;227        spinBox_voltage.showFocus = 1;
;;;228    #endif
;;;229    }
000572  e8bd9ff0          POP      {r4-r12,pc}
;;;230    
                          ENDP

                  setVoltageIndicator PROC
;;;405    
;;;406    void setVoltageIndicator(uint16_t value)
000576  b570              PUSH     {r4-r6,lr}
;;;407    {
;;;408        sprintf(textLabel_voltage.text, "%2.2fv", (float)value/1000);
000578  f7fffffe          BL       __aeabi_ui2f
00057c  4959              LDR      r1,|L1.1764|
00057e  f7fffffe          BL       __aeabi_fdiv
000582  f7fffffe          BL       __aeabi_f2d
000586  4c58              LDR      r4,|L1.1768|
000588  4602              MOV      r2,r0
00058a  460b              MOV      r3,r1
00058c  6a25              LDR      r5,[r4,#0x20]  ; textLabel_voltage
00058e  a157              ADR      r1,|L1.1772|
000590  4628              MOV      r0,r5
000592  f7fffffe          BL       __2sprintf
;;;409        textLabel_voltage.redrawText = 1;
000596  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_voltage
00059a  f0400002          ORR      r0,r0,#2
00059e  f8840029          STRB     r0,[r4,#0x29]
;;;410        textLabel_voltage.redrawRequired = 1;
0005a2  7a20              LDRB     r0,[r4,#8]  ; textLabel_voltage
0005a4  f0400040          ORR      r0,r0,#0x40
0005a8  7220              STRB     r0,[r4,#8]
;;;411    }
0005aa  bd70              POP      {r4-r6,pc}
;;;412    
                          ENDP

                  setVoltageSetting PROC
;;;413    void setVoltageSetting(uint16_t value)
0005ac  210a              MOVS     r1,#0xa
;;;414    {
;;;415        // FIXME
;;;416        guiSpinBox_SetValue(&spinBox_voltage, value/10);
0005ae  fbb0f1f1          UDIV     r1,r0,r1
0005b2  4849              LDR      r0,|L1.1752|
0005b4  3890              SUBS     r0,r0,#0x90
0005b6  f7ffbffe          B.W      guiSpinBox_SetValue
;;;417    
;;;418    }
;;;419    
                          ENDP

                  setCurrentIndicator PROC
;;;420    void setCurrentIndicator(uint16_t value)
0005ba  b570              PUSH     {r4-r6,lr}
;;;421    {
;;;422        sprintf(textLabel_current.text, "%2.2fa", (float)value/1000);
0005bc  f7fffffe          BL       __aeabi_ui2f
0005c0  4948              LDR      r1,|L1.1764|
0005c2  f7fffffe          BL       __aeabi_fdiv
0005c6  f7fffffe          BL       __aeabi_f2d
0005ca  4c47              LDR      r4,|L1.1768|
0005cc  4602              MOV      r2,r0
0005ce  3438              ADDS     r4,r4,#0x38
0005d0  460b              MOV      r3,r1
0005d2  6a25              LDR      r5,[r4,#0x20]  ; textLabel_current
0005d4  a147              ADR      r1,|L1.1780|
0005d6  4628              MOV      r0,r5
0005d8  f7fffffe          BL       __2sprintf
;;;423        textLabel_current.redrawText = 1;
0005dc  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_current
0005e0  f0400002          ORR      r0,r0,#2
0005e4  f8840029          STRB     r0,[r4,#0x29]
;;;424        textLabel_current.redrawRequired = 1;
0005e8  7a20              LDRB     r0,[r4,#8]  ; textLabel_current
0005ea  f0400040          ORR      r0,r0,#0x40
0005ee  7220              STRB     r0,[r4,#8]
;;;425    }
0005f0  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

                  setCurrentSetting PROC
;;;427    void setCurrentSetting(uint16_t value)
0005f2  210a              MOVS     r1,#0xa
;;;428    {
;;;429        // FIXME
;;;430        guiSpinBox_SetValue(&spinBox_current, value/10);
0005f4  fbb0f1f1          UDIV     r1,r0,r1
0005f8  4837              LDR      r0,|L1.1752|
0005fa  3848              SUBS     r0,r0,#0x48
0005fc  f7ffbffe          B.W      guiSpinBox_SetValue
;;;431    }
;;;432    
                          ENDP

                  setPowerIndicator PROC
;;;433    void setPowerIndicator(uint32_t value)
000600  b570              PUSH     {r4-r6,lr}
;;;434    {
;;;435        sprintf(textLabel_power.text, "%3.2fW", (float)value/1000 );
000602  f7fffffe          BL       __aeabi_ui2f
000606  4937              LDR      r1,|L1.1764|
000608  f7fffffe          BL       __aeabi_fdiv
00060c  f7fffffe          BL       __aeabi_f2d
000610  4c35              LDR      r4,|L1.1768|
000612  4602              MOV      r2,r0
000614  3470              ADDS     r4,r4,#0x70
000616  460b              MOV      r3,r1
000618  6a25              LDR      r5,[r4,#0x20]  ; textLabel_power
00061a  a138              ADR      r1,|L1.1788|
00061c  4628              MOV      r0,r5
00061e  f7fffffe          BL       __2sprintf
;;;436        textLabel_power.redrawText = 1;
000622  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_power
000626  f0400002          ORR      r0,r0,#2
00062a  f8840029          STRB     r0,[r4,#0x29]
;;;437        textLabel_power.redrawRequired = 1;
00062e  7a20              LDRB     r0,[r4,#8]  ; textLabel_power
000630  f0400040          ORR      r0,r0,#0x40
000634  7220              STRB     r0,[r4,#8]
;;;438    }
000636  bd70              POP      {r4-r6,pc}
;;;439    
                          ENDP

                  setTemperatureIndicator PROC
;;;440    void setTemperatureIndicator(int16_t value)
000638  b510              PUSH     {r4,lr}
;;;441    {
00063a  4602              MOV      r2,r0
;;;442        sprintf(textLabel_temperature.text, "%2d%cC", value, 0xb0);
00063c  4c2a              LDR      r4,|L1.1768|
00063e  23b0              MOVS     r3,#0xb0
000640  34a8              ADDS     r4,r4,#0xa8
000642  a130              ADR      r1,|L1.1796|
000644  6a20              LDR      r0,[r4,#0x20]  ; textLabel_temperature
000646  f7fffffe          BL       __2sprintf
;;;443        textLabel_temperature.redrawText = 1;
00064a  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_temperature
00064e  f0400002          ORR      r0,r0,#2
000652  f8840029          STRB     r0,[r4,#0x29]
;;;444        textLabel_temperature.redrawRequired = 1;
000656  7a20              LDRB     r0,[r4,#8]  ; textLabel_temperature
000658  f0400040          ORR      r0,r0,#0x40
00065c  7220              STRB     r0,[r4,#8]
;;;445    }
00065e  bd10              POP      {r4,pc}
;;;446    
                          ENDP

                  setFeedbackChannelIndicator PROC
;;;447    void setFeedbackChannelIndicator(uint8_t channel)
000660  b510              PUSH     {r4,lr}
;;;448    {
;;;449        if (channel == GUI_CHANNEL_5V)
;;;450            sprintf(textLabel_channel.text, "Ch.5V");
000662  4c21              LDR      r4,|L1.1768|
000664  4601              MOV      r1,r0                 ;449
000666  34e0              ADDS     r4,r4,#0xe0
000668  2901              CMP      r1,#1                 ;449
00066a  6a20              LDR      r0,[r4,#0x20]         ;449
00066c  d00d              BEQ      |L1.1674|
;;;451        else
;;;452            sprintf(textLabel_channel.text, "Ch.12V");
00066e  a127              ADR      r1,|L1.1804|
000670  f7fffffe          BL       __2sprintf
                  |L1.1652|
;;;453        textLabel_channel.redrawText = 1;
000674  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_channel
000678  f0400002          ORR      r0,r0,#2
00067c  f8840029          STRB     r0,[r4,#0x29]
;;;454        textLabel_channel.redrawRequired = 1;
000680  7a20              LDRB     r0,[r4,#8]  ; textLabel_channel
000682  f0400040          ORR      r0,r0,#0x40
000686  7220              STRB     r0,[r4,#8]
;;;455    }
000688  bd10              POP      {r4,pc}
                  |L1.1674|
00068a  a122              ADR      r1,|L1.1812|
00068c  f7fffffe          BL       __2sprintf
000690  e7f0              B        |L1.1652|
;;;456    
                          ENDP

                  setCurrentLimitIndicator PROC
;;;457    void setCurrentLimitIndicator(uint8_t current_limit)
000692  b510              PUSH     {r4,lr}
;;;458    {
;;;459        if (current_limit == GUI_CURRENT_LIM_LOW)
;;;460            sprintf(textLabel_currLimit.text, "20A");
000694  4c10              LDR      r4,|L1.1752|
000696  0001              MOVS     r1,r0                 ;459
000698  f1a404d8          SUB      r4,r4,#0xd8
00069c  6a20              LDR      r0,[r4,#0x20]         ;459
00069e  d00d              BEQ      |L1.1724|
;;;461        else
;;;462            sprintf(textLabel_currLimit.text, "40A");
0006a0  a11e              ADR      r1,|L1.1820|
0006a2  f7fffffe          BL       __2sprintf
                  |L1.1702|
;;;463        textLabel_currLimit.redrawText = 1;
0006a6  f8940029          LDRB     r0,[r4,#0x29]  ; textLabel_currLimit
0006aa  f0400002          ORR      r0,r0,#2
0006ae  f8840029          STRB     r0,[r4,#0x29]
;;;464        textLabel_currLimit.redrawRequired = 1;
0006b2  7a20              LDRB     r0,[r4,#8]  ; textLabel_currLimit
0006b4  f0400040          ORR      r0,r0,#0x40
0006b8  7220              STRB     r0,[r4,#8]
;;;465    }
0006ba  bd10              POP      {r4,pc}
                  |L1.1724|
0006bc  a118              ADR      r1,|L1.1824|
0006be  f7fffffe          BL       __2sprintf
0006c2  e7f0              B        |L1.1702|
;;;466    
                          ENDP

                  |L1.1732|
                          DCD      font_h11
                  |L1.1736|
                          DCD      onTextLabelDrawEvent
                  |L1.1740|
                          DCD      onTextLabelKeyEncoderEvent
                  |L1.1744|
                          DCD      spinBoxEventProcessFunction
                  |L1.1748|
                          DCD      font_h16
                  |L1.1752|
                          DCD      ||.bss||+0x1f0
                  |L1.1756|
                          DCD      onSpinBoxDrawEvent
                  |L1.1760|
                          DCD      onSpinBoxValueChanged
                  |L1.1764|
                          DCD      0x447a0000
                  |L1.1768|
                          DCD      ||.bss||
                  |L1.1772|
0006ec  25322e32          DCB      "%2.2fv",0
0006f0  667600  
0006f3  00                DCB      0
                  |L1.1780|
0006f4  25322e32          DCB      "%2.2fa",0
0006f8  666100  
0006fb  00                DCB      0
                  |L1.1788|
0006fc  25332e32          DCB      "%3.2fW",0
000700  665700  
000703  00                DCB      0
                  |L1.1796|
000704  25326425          DCB      "%2d%cC",0
000708  634300  
00070b  00                DCB      0
                  |L1.1804|
00070c  43682e31          DCB      "Ch.12V",0
000710  325600  
000713  00                DCB      0
                  |L1.1812|
000714  43682e35          DCB      "Ch.5V",0
000718  5600    
00071a  00                DCB      0
00071b  00                DCB      0
                  |L1.1820|
00071c  34304100          DCB      "40A",0
                  |L1.1824|
000720  32304100          DCB      "20A",0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  textLabel_voltage
                          %        44
                  label_voltage_data
                          %        12
                  textLabel_current
                          %        44
                  label_current_data
                          %        12
                  textLabel_power
                          %        44
                  label_power_data
                          %        12
                  textLabel_temperature
                          %        44
                  label_temperature_data
                          %        12
                  textLabel_channel
                          %        44
                  label_channel_data
                          %        12
                  textLabel_currLimit
                          %        44
                  label_currLimit_data
                          %        12
                  textLabelHandlers
                          %        16
                  spinBox_voltage
                          %        72
                  spinBox_current
                          %        72
                  spinBoxHandlers
                          %        16
                  guiMasterPanel
                          %        44
                  guiMasterPanelElements
                          %        32
