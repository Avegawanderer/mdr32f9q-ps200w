; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\mdr32f9qx_uart.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\mdr32f9qx_uart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\mdr32f9qx_uart.crf ..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\src\MDR32F9Qx_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UART_DeInit PROC
;;;73       */
;;;74     void UART_DeInit(MDR_UART_TypeDef* UARTx)
000000  2100              MOVS     r1,#0
;;;75     {
;;;76       /* Check the parameters */
;;;77       assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;78     
;;;79       /* Clear UART CR */
;;;80       UARTx->CR = 0;
000002  6301              STR      r1,[r0,#0x30]
;;;81       UARTx->LCR_H = 0;
000004  62c1              STR      r1,[r0,#0x2c]
;;;82       UARTx->RSR_ECR = 0;
000006  6041              STR      r1,[r0,#4]
;;;83       UARTx->FR = UART_FLAG_TXFE | UART_FLAG_RXFE;
000008  2190              MOVS     r1,#0x90
00000a  6181              STR      r1,[r0,#0x18]
;;;84       UARTx->ILPR = 0;
00000c  2100              MOVS     r1,#0
00000e  6201              STR      r1,[r0,#0x20]
;;;85       UARTx->IBRD = 0;
000010  6241              STR      r1,[r0,#0x24]
;;;86       UARTx->FBRD = 0;
000012  6281              STR      r1,[r0,#0x28]
;;;87       UARTx->IFLS = UART_IT_FIFO_LVL_8words;
000014  2102              MOVS     r1,#2
000016  6341              STR      r1,[r0,#0x34]
;;;88       UARTx->IMSC = 0;
000018  2100              MOVS     r1,#0
00001a  6381              STR      r1,[r0,#0x38]
;;;89       UARTx->DMACR = 0;
00001c  6481              STR      r1,[r0,#0x48]
;;;90       /* Set UART CR[RXE] and UART CR[TXE] bits */
;;;91       UARTx->CR = UART_HardwareFlowControl_RXE | UART_HardwareFlowControl_TXE;
00001e  f44f7140          MOV      r1,#0x300
000022  6301              STR      r1,[r0,#0x30]
;;;92     }
000024  4770              BX       lr
;;;93     
                          ENDP

                  UART_Init PROC
;;;103      */
;;;104    BaudRateStatus UART_Init(MDR_UART_TypeDef* UARTx, UART_InitTypeDef* UART_InitStruct)
000026  e92d4ff0          PUSH     {r4-r11,lr}
;;;105    {
00002a  b087              SUB      sp,sp,#0x1c
00002c  4604              MOV      r4,r0
00002e  460d              MOV      r5,r1
;;;106      uint32_t tmpreg, cpuclock;
;;;107      uint32_t realspeed, speederror;
;;;108      uint32_t divider;
;;;109      uint32_t integerdivider;
;;;110      uint32_t fractionaldivider;
;;;111      RST_CLK_FreqTypeDef RST_CLK_Clocks;
;;;112    
;;;113      /* Check the parameters */
;;;114      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;115      assert_param(IS_UART_BAUDRATE(UART_InitStruct->UART_BaudRate));
;;;116      assert_param(IS_UART_WORD_LENGTH(UART_InitStruct->UART_WordLength));
;;;117      assert_param(IS_UART_STOPBITS(UART_InitStruct->UART_StopBits));
;;;118      assert_param(IS_UART_PARITY(UART_InitStruct->UART_Parity));
;;;119      assert_param(IS_UART_FIFOMODE(UART_InitStruct->UART_FIFOMode));
;;;120      assert_param(IS_UART_HARDWARE_FLOW_CONTROL(UART_InitStruct->UART_HardwareFlowControl));
;;;121    
;;;122      /* Configure the UART Baud Rate */
;;;123      RST_CLK_GetClocksFreq(&RST_CLK_Clocks);
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       RST_CLK_GetClocksFreq
;;;124      cpuclock = RST_CLK_Clocks.CPU_CLK_Frequency;
000036  9f01              LDR      r7,[sp,#4]
;;;125    
;;;126      tmpreg = MDR_RST_CLK->UART_CLOCK;
000038  4870              LDR      r0,|L1.508|
00003a  6a86              LDR      r6,[r0,#0x28]
;;;127    
;;;128      if (UARTx == MDR_UART1)
00003c  4870              LDR      r0,|L1.512|
00003e  4284              CMP      r4,r0
000040  d106              BNE      |L1.80|
;;;129      {
;;;130        cpuclock /= (1 << (tmpreg & UART1_BRG_Mask));
000042  f0060107          AND      r1,r6,#7
000046  2001              MOVS     r0,#1
000048  4088              LSLS     r0,r0,r1
00004a  fbb7f7f0          UDIV     r7,r7,r0
00004e  e008              B        |L1.98|
                  |L1.80|
;;;131      }
;;;132      else if (UARTx == MDR_UART2)
000050  486c              LDR      r0,|L1.516|
000052  4284              CMP      r4,r0
000054  d105              BNE      |L1.98|
;;;133      {
;;;134        cpuclock /= (1 << ((tmpreg & UART2_BRG_Mask) >> UART2_BRG_Offs));
000056  f3c62102          UBFX     r1,r6,#8,#3
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  fbb7f7f0          UDIV     r7,r7,r0
                  |L1.98|
;;;135      }
;;;136    
;;;137      /* Determine the integer part */
;;;138      divider = cpuclock / (UART_InitStruct->UART_BaudRate >> 2);
000062  6828              LDR      r0,[r5,#0]
000064  0880              LSRS     r0,r0,#2
000066  fbb7f9f0          UDIV     r9,r7,r0
;;;139      integerdivider = divider >> 6;
00006a  ea4f1899          LSR      r8,r9,#6
;;;140      /* Determine the fractional part */
;;;141      fractionaldivider = (divider & FBRD_Fract_Mask);
00006e  f0090a3f          AND      r10,r9,#0x3f
;;;142      /* Determine the speed error */
;;;143      realspeed = (cpuclock * 4) / ((integerdivider * 64) + fractionaldivider);
000072  00b8              LSLS     r0,r7,#2
000074  eb0a1188          ADD      r1,r10,r8,LSL #6
000078  fbb0fbf1          UDIV     r11,r0,r1
;;;144      speederror = ((realspeed - UART_InitStruct->UART_BaudRate) * 128) / UART_InitStruct->UART_BaudRate;
00007c  6828              LDR      r0,[r5,#0]
00007e  ebab0000          SUB      r0,r11,r0
000082  01c0              LSLS     r0,r0,#7
000084  6829              LDR      r1,[r5,#0]
000086  fbb0f0f1          UDIV     r0,r0,r1
00008a  9006              STR      r0,[sp,#0x18]
;;;145      if (speederror > 2)
00008c  9806              LDR      r0,[sp,#0x18]
00008e  2802              CMP      r0,#2
000090  d903              BLS      |L1.154|
;;;146      {
;;;147        return BaudRateInvalid;
000092  2000              MOVS     r0,#0
                  |L1.148|
;;;148      }
;;;149      /* Write UART Baud Rate */
;;;150      UARTx->IBRD = integerdivider;
;;;151      UARTx->FBRD = fractionaldivider;
;;;152    
;;;153      /* UART LCR_H configuration */
;;;154      /* Set the WLEN bits according to UART_WordLength value */
;;;155      /* Set STP2 bit according to UART_StopBits value */
;;;156      /* Set PEN, EPS and SPS bits according to UART_Parity value */
;;;157      /* Set FEN bit according to UART_FIFOMode value */
;;;158      tmpreg = UARTx->LCR_H;
;;;159      tmpreg |= UART_InitStruct->UART_WordLength | UART_InitStruct->UART_StopBits |
;;;160                             UART_InitStruct->UART_Parity | UART_InitStruct->UART_FIFOMode;
;;;161      UARTx->LCR_H = tmpreg;
;;;162    
;;;163      /* UART CR configuration */
;;;164      tmpreg = UARTx->CR;
;;;165      /* Clear UART CR Flow control bits */
;;;166      tmpreg &= ~CR_FC_Mask;
;;;167      /* Set UART CR Flow control bits */
;;;168      tmpreg |= UART_InitStruct->UART_HardwareFlowControl;
;;;169      /* Write to UART CR */
;;;170      UARTx->CR = tmpreg;
;;;171    
;;;172      return BaudRateValid;
;;;173    }
000094  b007              ADD      sp,sp,#0x1c
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.154|
00009a  f8c48024          STR      r8,[r4,#0x24]         ;150
00009e  f8c4a028          STR      r10,[r4,#0x28]        ;151
0000a2  6ae6              LDR      r6,[r4,#0x2c]         ;158
0000a4  88a8              LDRH     r0,[r5,#4]            ;159
0000a6  88e9              LDRH     r1,[r5,#6]            ;159
0000a8  4308              ORRS     r0,r0,r1              ;159
0000aa  8929              LDRH     r1,[r5,#8]            ;159
0000ac  4308              ORRS     r0,r0,r1              ;159
0000ae  8969              LDRH     r1,[r5,#0xa]          ;159
0000b0  4308              ORRS     r0,r0,r1              ;159
0000b2  4306              ORRS     r6,r6,r0              ;159
0000b4  62e6              STR      r6,[r4,#0x2c]         ;161
0000b6  6b26              LDR      r6,[r4,#0x30]         ;164
0000b8  f64f7080          MOV      r0,#0xff80            ;166
0000bc  4386              BICS     r6,r6,r0              ;166
0000be  89a8              LDRH     r0,[r5,#0xc]          ;168
0000c0  4306              ORRS     r6,r6,r0              ;168
0000c2  6326              STR      r6,[r4,#0x30]         ;170
0000c4  2001              MOVS     r0,#1                 ;172
0000c6  e7e5              B        |L1.148|
;;;174    
                          ENDP

                  UART_StructInit PROC
;;;180      */
;;;181    void UART_StructInit(UART_InitTypeDef* UART_InitStruct)
0000c8  f44f5116          MOV      r1,#0x2580
;;;182    {
;;;183      /* UART_InitStruct members default value */
;;;184      UART_InitStruct->UART_BaudRate = 9600;
0000cc  6001              STR      r1,[r0,#0]
;;;185      UART_InitStruct->UART_WordLength = UART_WordLength5b;
0000ce  2100              MOVS     r1,#0
0000d0  8081              STRH     r1,[r0,#4]
;;;186      UART_InitStruct->UART_StopBits = UART_StopBits1;
0000d2  80c1              STRH     r1,[r0,#6]
;;;187      UART_InitStruct->UART_Parity = UART_Parity_No;
0000d4  8101              STRH     r1,[r0,#8]
;;;188      UART_InitStruct->UART_FIFOMode = UART_FIFO_OFF;
0000d6  8141              STRH     r1,[r0,#0xa]
;;;189      UART_InitStruct->UART_HardwareFlowControl = UART_HardwareFlowControl_RXE | UART_HardwareFlowControl_TXE;
0000d8  f44f7140          MOV      r1,#0x300
0000dc  8181              STRH     r1,[r0,#0xc]
;;;190    }
0000de  4770              BX       lr
;;;191    
                          ENDP

                  UART_Cmd PROC
;;;200      */
;;;201    void UART_Cmd(MDR_UART_TypeDef* UARTx, FunctionalState NewState)
0000e0  b121              CBZ      r1,|L1.236|
;;;202    {
;;;203      /* Check the parameters */
;;;204      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;205      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;206    
;;;207      if (NewState != DISABLE)
;;;208      {
;;;209        /* Enable the selected UART by setting the UARTEN bit in the CR register */
;;;210        UARTx->CR |= CR_EN_Set;
0000e2  6b02              LDR      r2,[r0,#0x30]
0000e4  f0420201          ORR      r2,r2,#1
0000e8  6302              STR      r2,[r0,#0x30]
0000ea  e004              B        |L1.246|
                  |L1.236|
;;;211      }
;;;212      else
;;;213      {
;;;214        /* Disable the selected UART by clearing the UARTEN bit in the CR register */
;;;215        UARTx->CR &= CR_EN_Reset;
0000ec  6b02              LDR      r2,[r0,#0x30]
0000ee  f64f73fe          MOV      r3,#0xfffe
0000f2  401a              ANDS     r2,r2,r3
0000f4  6302              STR      r2,[r0,#0x30]
                  |L1.246|
;;;216      }
;;;217    }
0000f6  4770              BX       lr
;;;218    
                          ENDP

                  UART_ITConfig PROC
;;;240      */
;;;241    void UART_ITConfig(MDR_UART_TypeDef* UARTx, uint32_t UART_IT, FunctionalState NewState)
0000f8  b11a              CBZ      r2,|L1.258|
;;;242    {
;;;243      /* Check the parameters */
;;;244      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;245      assert_param(IS_UART_CONFIG_IT(UART_IT));
;;;246      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;247    
;;;248      if (NewState != DISABLE)
;;;249      {
;;;250        UARTx->IMSC |= UART_IT;
0000fa  6b83              LDR      r3,[r0,#0x38]
0000fc  430b              ORRS     r3,r3,r1
0000fe  6383              STR      r3,[r0,#0x38]
000100  e002              B        |L1.264|
                  |L1.258|
;;;251      }
;;;252      else
;;;253      {
;;;254        UARTx->IMSC &= ~UART_IT;
000102  6b83              LDR      r3,[r0,#0x38]
000104  438b              BICS     r3,r3,r1
000106  6383              STR      r3,[r0,#0x38]
                  |L1.264|
;;;255      }
;;;256    }
000108  4770              BX       lr
;;;257    
                          ENDP

                  UART_GetITStatus PROC
;;;277      */
;;;278    ITStatus UART_GetITStatus(MDR_UART_TypeDef* UARTx, uint32_t UART_IT)
00010a  4602              MOV      r2,r0
;;;279    {
;;;280      ITStatus bitstatus;
;;;281    
;;;282      /* Check the parameters */
;;;283      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;284      assert_param(IS_UART_CONFIG_IT(UART_IT));
;;;285    
;;;286      if ((UARTx->RIS & UART_IT) == UART_IT)
00010c  6bd3              LDR      r3,[r2,#0x3c]
00010e  400b              ANDS     r3,r3,r1
000110  428b              CMP      r3,r1
000112  d101              BNE      |L1.280|
;;;287      {
;;;288        bitstatus = SET;
000114  2001              MOVS     r0,#1
000116  e000              B        |L1.282|
                  |L1.280|
;;;289      }
;;;290      else
;;;291      {
;;;292        bitstatus = RESET;
000118  2000              MOVS     r0,#0
                  |L1.282|
;;;293      }
;;;294    
;;;295      return bitstatus;
;;;296    }
00011a  4770              BX       lr
;;;297    
                          ENDP

                  UART_GetITStatusMasked PROC
;;;317      */
;;;318    ITStatus UART_GetITStatusMasked(MDR_UART_TypeDef* UARTx, uint32_t UART_IT)
00011c  4602              MOV      r2,r0
;;;319    {
;;;320      ITStatus bitstatus;
;;;321    
;;;322      /* Check the parameters */
;;;323      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;324      assert_param(IS_UART_CONFIG_IT(UART_IT));
;;;325    
;;;326      if (UARTx->MIS & UART_IT)
00011e  6c13              LDR      r3,[r2,#0x40]
000120  420b              TST      r3,r1
000122  d001              BEQ      |L1.296|
;;;327      {
;;;328        bitstatus = SET;
000124  2001              MOVS     r0,#1
000126  e000              B        |L1.298|
                  |L1.296|
;;;329      }
;;;330      else
;;;331      {
;;;332        bitstatus = RESET;
000128  2000              MOVS     r0,#0
                  |L1.298|
;;;333      }
;;;334    
;;;335      return bitstatus;
;;;336    }
00012a  4770              BX       lr
;;;337    
                          ENDP

                  UART_ClearITPendingBit PROC
;;;357      */
;;;358    void UART_ClearITPendingBit(MDR_UART_TypeDef* UARTx, uint32_t UART_IT)
00012c  6c42              LDR      r2,[r0,#0x44]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;362      assert_param(IS_UART_CONFIG_IT(UART_IT));
;;;363    
;;;364      UARTx->ICR |= UART_IT;
00012e  430a              ORRS     r2,r2,r1
000130  6442              STR      r2,[r0,#0x44]
;;;365    }
000132  4770              BX       lr
;;;366    
                          ENDP

                  UART_DMAConfig PROC
;;;387      */
;;;388    void UART_DMAConfig(MDR_UART_TypeDef* UARTx, uint32_t UART_IT_RB_LVL, uint32_t UART_IT_TB_LVL)
000134  ea4203c1          ORR      r3,r2,r1,LSL #3
;;;389    {
;;;390      /* Check the parameters */
;;;391      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;392      assert_param(IS_UART_IT_FIFO_LVL(UART_IT_RB_LVL));
;;;393      assert_param(IS_UART_IT_FIFO_LVL(UART_IT_TB_LVL));
;;;394    
;;;395      UARTx->IFLS = (UART_IT_RB_LVL << 3) | UART_IT_TB_LVL;
000138  6343              STR      r3,[r0,#0x34]
;;;396    }
00013a  4770              BX       lr
;;;397    
                          ENDP

                  UART_DMACmd PROC
;;;412      */
;;;413    void UART_DMACmd(MDR_UART_TypeDef* UARTx, uint32_t UART_DMAReq, FunctionalState NewState)
00013c  b510              PUSH     {r4,lr}
;;;414    {
;;;415      /* Check the parameters */
;;;416      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;417      assert_param(IS_UART_DMAREQ(UART_DMAReq));
;;;418      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;419    
;;;420      if (NewState != DISABLE)
00013e  b11a              CBZ      r2,|L1.328|
;;;421      {
;;;422        /* Enable the DMA transfer for selected requests and DMAONERR bit
;;;423           in the UART DMACR register */
;;;424        UARTx->DMACR |= UART_DMAReq;
000140  6c83              LDR      r3,[r0,#0x48]
000142  430b              ORRS     r3,r3,r1
000144  6483              STR      r3,[r0,#0x48]
000146  e004              B        |L1.338|
                  |L1.328|
;;;425      }
;;;426      else
;;;427      {
;;;428        /* Disable the DMA transfer for selected requests and DMAONERR bit
;;;429           in the UART DMACR register */
;;;430        UARTx->DMACR &= (uint16_t)~UART_DMAReq;
000148  6c83              LDR      r3,[r0,#0x48]
00014a  43cc              MVNS     r4,r1
00014c  b2a4              UXTH     r4,r4
00014e  4023              ANDS     r3,r3,r4
000150  6483              STR      r3,[r0,#0x48]
                  |L1.338|
;;;431      }
;;;432    }
000152  bd10              POP      {r4,pc}
;;;433    
                          ENDP

                  UART_SendData PROC
;;;441      */
;;;442    void UART_SendData(MDR_UART_TypeDef* UARTx, uint16_t Data)
000154  f3c10208          UBFX     r2,r1,#0,#9
;;;443    {
;;;444      /* Check the parameters */
;;;445      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;446      assert_param(IS_UART_DATA(Data));
;;;447    
;;;448      /* Transmit Data */
;;;449      UARTx->DR = (Data & (uint16_t)0x01FF);
000158  6002              STR      r2,[r0,#0]
;;;450    }
00015a  4770              BX       lr
;;;451    
                          ENDP

                  UART_ReceiveData PROC
;;;458      */
;;;459    uint16_t UART_ReceiveData(MDR_UART_TypeDef* UARTx)
00015c  4601              MOV      r1,r0
;;;460    {
;;;461      /* Check the parameters */
;;;462      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;463    
;;;464      /* Receive Data */
;;;465      return (uint16_t)(UARTx->DR);
00015e  6808              LDR      r0,[r1,#0]
000160  b280              UXTH     r0,r0
;;;466    }
000162  4770              BX       lr
;;;467    
                          ENDP

                  UART_BreakLine PROC
;;;476      */
;;;477    void UART_BreakLine(MDR_UART_TypeDef* UARTx, FunctionalState NewState)
000164  b121              CBZ      r1,|L1.368|
;;;478    {
;;;479      /* Check the parameters */
;;;480      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;481      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;482    
;;;483      if (NewState != DISABLE)
;;;484      {
;;;485        /* Set BRK bit in the UART LCR_H register */
;;;486        UARTx->LCR_H |= LCR_H_BRK_Set;
000166  6ac2              LDR      r2,[r0,#0x2c]
000168  f0420201          ORR      r2,r2,#1
00016c  62c2              STR      r2,[r0,#0x2c]
00016e  e004              B        |L1.378|
                  |L1.368|
;;;487      }
;;;488      else
;;;489      {
;;;490        /* Reset BRK bit in the UART LCR_H register */
;;;491        UARTx->LCR_H |= LCR_H_BRK_Reset;
000170  6ac2              LDR      r2,[r0,#0x2c]
000172  f64f73fe          MOV      r3,#0xfffe
000176  431a              ORRS     r2,r2,r3
000178  62c2              STR      r2,[r0,#0x2c]
                  |L1.378|
;;;492      }
;;;493    }
00017a  4770              BX       lr
;;;494    
                          ENDP

                  UART_IrDAConfig PROC
;;;505      */
;;;506    void UART_IrDAConfig(MDR_UART_TypeDef* UARTx, uint32_t UART_IrDAMode)
00017c  b570              PUSH     {r4-r6,lr}
;;;507    {
00017e  b086              SUB      sp,sp,#0x18
000180  4604              MOV      r4,r0
000182  460d              MOV      r5,r1
;;;508      uint32_t cpuclock;
;;;509      RST_CLK_FreqTypeDef RST_CLK_Clocks;
;;;510    
;;;511      /* Check the parameters */
;;;512      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;513      assert_param(IS_UART_IRDA_MODE(UART_IrDAMode));
;;;514    
;;;515      if (UART_IrDAMode == UART_IrDAMode_LowPower)
000184  2d04              CMP      r5,#4
000186  d108              BNE      |L1.410|
;;;516      {
;;;517        /* Configure the UART ILPR */
;;;518        RST_CLK_GetClocksFreq(&RST_CLK_Clocks);
000188  a801              ADD      r0,sp,#4
00018a  f7fffffe          BL       RST_CLK_GetClocksFreq
;;;519        cpuclock = RST_CLK_Clocks.CPU_CLK_Frequency;
00018e  9e01              LDR      r6,[sp,#4]
;;;520        UARTx->ILPR = cpuclock / IrLPBaud16;
000190  f44f10e1          MOV      r0,#0x1c2000
000194  fbb6f0f0          UDIV     r0,r6,r0
000198  6220              STR      r0,[r4,#0x20]
                  |L1.410|
;;;521      }
;;;522      UARTx->CR |= UART_IrDAMode;
00019a  6b20              LDR      r0,[r4,#0x30]
00019c  4328              ORRS     r0,r0,r5
00019e  6320              STR      r0,[r4,#0x30]
;;;523    }
0001a0  b006              ADD      sp,sp,#0x18
0001a2  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP

                  UART_IrDACmd PROC
;;;533      */
;;;534    void UART_IrDACmd(MDR_UART_TypeDef* UARTx, FunctionalState NewState)
0001a4  b121              CBZ      r1,|L1.432|
;;;535    {
;;;536      /* Check the parameters */
;;;537      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;538      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;539    
;;;540      if (NewState != DISABLE)
;;;541      {
;;;542        /* Set SIREN bit in the UART CR register */
;;;543        UARTx->CR |= CR_SIREN_Set;
0001a6  6b02              LDR      r2,[r0,#0x30]
0001a8  f0420202          ORR      r2,r2,#2
0001ac  6302              STR      r2,[r0,#0x30]
0001ae  e004              B        |L1.442|
                  |L1.432|
;;;544      }
;;;545      else
;;;546      {
;;;547        /* Reset SIREN bit in the UART CR register */
;;;548        UARTx->CR |= CR_SIREN_Reset;
0001b0  6b02              LDR      r2,[r0,#0x30]
0001b2  f64f73fd          MOV      r3,#0xfffd
0001b6  431a              ORRS     r2,r2,r3
0001b8  6302              STR      r2,[r0,#0x30]
                  |L1.442|
;;;549      }
;;;550    }
0001ba  4770              BX       lr
;;;551    
                          ENDP

                  UART_GetFlagStatus PROC
;;;569      */
;;;570    FlagStatus UART_GetFlagStatus(MDR_UART_TypeDef* UARTx, uint32_t UART_FLAG)
0001bc  4602              MOV      r2,r0
;;;571    {
;;;572      FlagStatus bitstatus;
;;;573    
;;;574      /* Check the parameters */
;;;575      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;576      assert_param(IS_UART_FLAG(UART_FLAG));
;;;577    
;;;578      if (UARTx->FR & UART_FLAG)
0001be  6993              LDR      r3,[r2,#0x18]
0001c0  420b              TST      r3,r1
0001c2  d001              BEQ      |L1.456|
;;;579      {
;;;580        bitstatus = SET;
0001c4  2001              MOVS     r0,#1
0001c6  e000              B        |L1.458|
                  |L1.456|
;;;581      }
;;;582      else
;;;583      {
;;;584        bitstatus = RESET;
0001c8  2000              MOVS     r0,#0
                  |L1.458|
;;;585      }
;;;586      return bitstatus;
;;;587    }
0001ca  4770              BX       lr
;;;588    
                          ENDP

                  UART_BRGInit PROC
;;;606      */
;;;607    void UART_BRGInit(MDR_UART_TypeDef* UARTx, uint32_t UART_BRG)
0001cc  4602              MOV      r2,r0
;;;608    {
;;;609      uint32_t tmpreg;
;;;610    
;;;611      /* Check the parameters */
;;;612      assert_param(IS_UART_ALL_PERIPH(UARTx));
;;;613      assert_param(IS_UART_CLOCK_BRG(UART_BRG));
;;;614    
;;;615      tmpreg = MDR_RST_CLK->UART_CLOCK;
0001ce  4b0b              LDR      r3,|L1.508|
0001d0  6a98              LDR      r0,[r3,#0x28]
;;;616    
;;;617      if (UARTx == MDR_UART1)
0001d2  4b0b              LDR      r3,|L1.512|
0001d4  429a              CMP      r2,r3
0001d6  d105              BNE      |L1.484|
;;;618      {
;;;619        tmpreg |= RST_CLK_UART_CLOCK_UART1_CLK_EN;
0001d8  f0407080          ORR      r0,r0,#0x1000000
;;;620        tmpreg &= ~RST_CLK_UART_CLOCK_UART1_BRG_Msk;
0001dc  f02000ff          BIC      r0,r0,#0xff
;;;621        tmpreg |= UART_BRG;
0001e0  4308              ORRS     r0,r0,r1
0001e2  e008              B        |L1.502|
                  |L1.484|
;;;622      }
;;;623      else if (UARTx == MDR_UART2)
0001e4  4b07              LDR      r3,|L1.516|
0001e6  429a              CMP      r2,r3
0001e8  d105              BNE      |L1.502|
;;;624      {
;;;625        tmpreg |= RST_CLK_UART_CLOCK_UART2_CLK_EN;
0001ea  f0407000          ORR      r0,r0,#0x2000000
;;;626        tmpreg &= ~RST_CLK_UART_CLOCK_UART2_BRG_Msk;
0001ee  f420407f          BIC      r0,r0,#0xff00
;;;627        tmpreg |= (UART_BRG << 8);
0001f2  ea402001          ORR      r0,r0,r1,LSL #8
                  |L1.502|
;;;628      }
;;;629      MDR_RST_CLK->UART_CLOCK = tmpreg;
0001f6  4b01              LDR      r3,|L1.508|
0001f8  6298              STR      r0,[r3,#0x28]
;;;630    }
0001fa  4770              BX       lr
;;;631    
                          ENDP

                  |L1.508|
                          DCD      0x40020000
                  |L1.512|
                          DCD      0x40030000
                  |L1.516|
                          DCD      0x40038000

;*** Start embedded assembler ***

#line 1 "..\\Library\\Libraries\\MDR32F9Qx_StdPeriph_Driver\\src\\MDR32F9Qx_uart.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_uart_c_c95a8597____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_MDR32F9Qx_uart_c_c95a8597____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_MDR32F9Qx_uart_c_c95a8597____REVSH|
#line 130
|__asm___16_MDR32F9Qx_uart_c_c95a8597____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
