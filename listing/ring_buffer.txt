; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\FLASH\ring_buffer.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\FLASH\ring_buffer.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\src\fonts -I.\ -I.\src -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\inc -I..\Library\Libraries\CMSIS\CM3\DeviceSupport\MDR32F9Qx\startup\arm -I..\Library\Libraries\MDR32F9Qx_StdPeriph_Driver\inc -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\portable\RVDS\ARM_CM3\ -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source -I..\Library\FreeRTOSV7.5.3\FreeRTOS\Source\include -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Milandr\MDR32F9x --omf_browse=.\FLASH\ring_buffer.crf src\ring_buffer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  initRingBuffer PROC
;;;6      
;;;7      void initRingBuffer(ring_buffer_t *rb, char *data, uint16_t size)
000000  f64f73fa          MOV      r3,#0xfffa
;;;8      {
;;;9      	rb->read_count = 0xFFFA;
000004  8143              STRH     r3,[r0,#0xa]
;;;10     	rb->write_count = 0xFFFA;
000006  8103              STRH     r3,[r0,#8]
;;;11     	rb->head_index = 0;
000008  2300              MOVS     r3,#0
00000a  80c3              STRH     r3,[r0,#6]
;;;12     	rb->tail_index = 0;
00000c  8083              STRH     r3,[r0,#4]
;;;13     	rb->size = size;
00000e  8182              STRH     r2,[r0,#0xc]
;;;14     	rb->data = data;
000010  6001              STR      r1,[r0,#0]
;;;15     }
000012  4770              BX       lr
;;;16     
                          ENDP

                  putIntoRingBuffer PROC
;;;17     
;;;18     uint8_t putIntoRingBuffer(ring_buffer_t *rb, char item)
000014  4602              MOV      r2,r0
;;;19     {
;;;20     	if ((uint16_t)(rb->write_count - rb->read_count) < rb->size)
000016  8910              LDRH     r0,[r2,#8]
000018  8953              LDRH     r3,[r2,#0xa]
00001a  1ac0              SUBS     r0,r0,r3
00001c  b280              UXTH     r0,r0
00001e  8993              LDRH     r3,[r2,#0xc]
000020  4298              CMP      r0,r3
000022  da11              BGE      |L1.72|
;;;21     	{
;;;22     		rb->data[rb->tail_index] = item;
000024  8893              LDRH     r3,[r2,#4]
000026  6810              LDR      r0,[r2,#0]
000028  54c1              STRB     r1,[r0,r3]
;;;23     		rb->tail_index = (rb->tail_index < (rb->size - 1)) ? rb->tail_index + 1 : 0;
00002a  8893              LDRH     r3,[r2,#4]
00002c  8990              LDRH     r0,[r2,#0xc]
00002e  1e40              SUBS     r0,r0,#1
000030  4283              CMP      r3,r0
000032  da02              BGE      |L1.58|
000034  8890              LDRH     r0,[r2,#4]
000036  1c40              ADDS     r0,r0,#1
000038  e000              B        |L1.60|
                  |L1.58|
00003a  2000              MOVS     r0,#0
                  |L1.60|
00003c  8090              STRH     r0,[r2,#4]
;;;24     		rb->write_count++;
00003e  8910              LDRH     r0,[r2,#8]
000040  1c40              ADDS     r0,r0,#1
000042  8110              STRH     r0,[r2,#8]
;;;25     		return 1;
000044  2001              MOVS     r0,#1
                  |L1.70|
;;;26     	}
;;;27     	return 0;
;;;28     }
000046  4770              BX       lr
                  |L1.72|
000048  2000              MOVS     r0,#0                 ;27
00004a  e7fc              B        |L1.70|
;;;29     
                          ENDP

                  getFromRingBuffer PROC
;;;30     
;;;31     uint8_t getFromRingBuffer(ring_buffer_t *rb,  char *item)
00004c  4602              MOV      r2,r0
;;;32     {
;;;33     	if ((uint16_t)(rb->write_count - rb->read_count) > 0)
00004e  8910              LDRH     r0,[r2,#8]
000050  8953              LDRH     r3,[r2,#0xa]
000052  1ac0              SUBS     r0,r0,r3
000054  b280              UXTH     r0,r0
000056  2800              CMP      r0,#0
000058  dd12              BLE      |L1.128|
;;;34     	{
;;;35     		*item = rb->data[rb->head_index];
00005a  88d3              LDRH     r3,[r2,#6]
00005c  6810              LDR      r0,[r2,#0]
00005e  5cc0              LDRB     r0,[r0,r3]
000060  7008              STRB     r0,[r1,#0]
;;;36     		rb->head_index = (rb->head_index < (rb->size - 1)) ? rb->head_index + 1 : 0;
000062  88d3              LDRH     r3,[r2,#6]
000064  8990              LDRH     r0,[r2,#0xc]
000066  1e40              SUBS     r0,r0,#1
000068  4283              CMP      r3,r0
00006a  da02              BGE      |L1.114|
00006c  88d0              LDRH     r0,[r2,#6]
00006e  1c40              ADDS     r0,r0,#1
000070  e000              B        |L1.116|
                  |L1.114|
000072  2000              MOVS     r0,#0
                  |L1.116|
000074  80d0              STRH     r0,[r2,#6]
;;;37     		rb->read_count++;
000076  8950              LDRH     r0,[r2,#0xa]
000078  1c40              ADDS     r0,r0,#1
00007a  8150              STRH     r0,[r2,#0xa]
;;;38     		return 1;
00007c  2001              MOVS     r0,#1
                  |L1.126|
;;;39     	}
;;;40     	return 0;
;;;41     }
00007e  4770              BX       lr
                  |L1.128|
000080  2000              MOVS     r0,#0                 ;40
000082  e7fc              B        |L1.126|
;;;42     
                          ENDP

